<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello kpl!</title>
    <url>/blog/2022/054a17b156.html</url>
    <content><![CDATA[<p><img src="https://i.loli.net/2021/04/07/BHgA5RqQeZTv8Wt.png" alt="image-20210407205253791"></p>
<p><img src="https://s2.loli.net/2022/06/17/yQSFtAlM4WrZBUi.jpg" alt="9f793abca820791d52dae9e921ce535"></p>
]]></content>
  </entry>
  <entry>
    <title>LeetCode笔记-二叉树</title>
    <url>/blog/2022/0621aed2ac.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为个人笔记，内容或有错误。<br>
图片部分源于<a href="https://programmercarl.com/">代码随想录</a>，侵删。</p>
</blockquote>
<!-- toc -->
<!-- tocstop -->
]]></content>
  </entry>
  <entry>
    <title>C++中STL常用库函数</title>
    <url>/blog/2022/06b47eaf04.html</url>
    <content><![CDATA[<blockquote>
<p>总结下C++中STL常用函数</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#sort%E5%BF%AB%E6%8E%92">sort()快排</a></li>
<li><a href="#reverse%E9%80%86%E7%BD%AE">reverse()逆置</a></li>
<li><a href="#stoi">stoi()</a></li>
<li><a href="#unique%E5%8E%BB%E9%87%8D">unique()去重</a></li>
<li><a href="#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E5%87%BD%E6%95%B0">二分查找函数</a></li>
<li><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%9F%A5%E6%89%BE%E5%87%BD%E6%95%B0">字符串查找函数</a></li>
<li><a href="#vector">vector</a></li>
<li><a href="#pairint-int">pair&lt;int, int&gt;</a></li>
<li><a href="#string%E5%AD%97%E7%AC%A6%E4%B8%B2">string，字符串</a></li>
<li><a href="#queue-%E9%98%9F%E5%88%97">queue, 队列</a></li>
<li><a href="#priority_queue">priority_queue</a></li>
<li><a href="#stack-%E6%A0%88">stack, 栈</a></li>
<li><a href="#deque-%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97">deque, 双端队列</a></li>
</ul>
<!-- tocstop -->
<h3><span id="sort快排"> sort()快排</span></h3>
<p>函数原型：<code>sort(起始地址, 末尾地址, cmp)</code>,其中cmp是可以自己定义的函数名,默认递增排列</p>
<p>cmp函数示例:</p>
<pre class="highlight"><code class="C++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;a, <span class="hljs-keyword">int</span> &amp;b)</span></span>{
    <span class="hljs-keyword">return</span> a &gt; b;
}
</code></pre>
<h3><span id="reverse逆置"> reverse()逆置</span></h3>
<p>函数原型：<code>reverse(起始地址, 末尾地址)</code></p>
<h3><span id="stoi"> stoi()</span></h3>
<p>函数原型:<code>stoi(string类型)</code><br>
将string类型转换为int类型</p>
<h3><span id="unique去重"> unique()去重</span></h3>
<p>函数原型：<code>unique(起始地址, 末尾地址, fun)</code>;其中fun为自定义的函数名。</p>
<p>注意：unique函数去重并不是真正的去重，它是不断的将后面不重复的元素覆盖前面重复的元素，最后返回最后一个不重复的元素的地址。</p>
<h3><span id="二分查找函数"> 二分查找函数</span></h3>
<p><code>lower_bound(起始地址, 末尾地址, target)</code>：查找第一个大于等于target目标值的位置</p>
<p><code>upper_bound(起始地址, 末尾地址, target)</code>：查找第一个大于target目标值的位置</p>
<p><code>binary_search(起始地址, 末尾地址, target)</code>：查找target是否存在于数组或vector中，找到返回true，否则返回false</p>
<h3><span id="字符串查找函数"> 字符串查找函数</span></h3>
<p><code>s1.find(s2)</code>：在s1字符串中查找s2，查找到返回第一个字符的位置，查找失败返回s1.npos</p>
<p><code>set.count(a)</code>：本来是计算a出现的次数，但是由于集合中是没有重复元素的，于是count函数也就被作为查找函数了，因为a只能出现1次或者0次，查找成功，返回1；查找失败返回0.</p>
<p><code>map.find()</code>：主要用于查找key是否存在map中，不存在返回map.end()，用法和set一样</p>
<h3><span id="vector"> vector</span></h3>
<blockquote>
<p>vector, 变长数组，倍增的思想</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">返回元素个数</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">返回是否为空</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">清空</td>
</tr>
<tr>
<td style="text-align:center">front()/back()</td>
<td style="text-align:center">访问第一个元素/最后一个元素</td>
</tr>
<tr>
<td style="text-align:center">push_back()/pop_back()</td>
<td style="text-align:center">插入/弹出最后一个元素</td>
</tr>
<tr>
<td style="text-align:center">begin()/end()</td>
<td style="text-align:center">开始元素迭代器/结尾元素迭代器</td>
</tr>
</tbody>
</table>
<h3><span id="pairltint-intgt"> pair&lt;int, int&gt;</span></h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">first</td>
<td style="text-align:center">第一个元素</td>
</tr>
<tr>
<td style="text-align:center">second</td>
<td style="text-align:center">第二个元素</td>
</tr>
</tbody>
</table>
<h3><span id="string字符串"> string，字符串</span></h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">size()/length()</td>
<td style="text-align:center">返回字符串长度</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">返回是否为空</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">清空</td>
</tr>
<tr>
<td style="text-align:center">substr(起始下标，(子串长度))</td>
<td style="text-align:center">返回子串</td>
</tr>
<tr>
<td style="text-align:center">c_str()</td>
<td style="text-align:center">返回字符串所在字符数组的起始地址</td>
</tr>
</tbody>
</table>
<h3><span id="queue-队列"> queue, 队列</span></h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">返回队列长度</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">返回是否为空</td>
</tr>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">向队尾插入一个元素</td>
</tr>
<tr>
<td style="text-align:center">front()</td>
<td style="text-align:center">返回队头元素</td>
</tr>
<tr>
<td style="text-align:center">back()</td>
<td style="text-align:center">返回队尾元素</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">弹出队头元素</td>
</tr>
</tbody>
</table>
<h3><span id="priority_queue"> priority_queue</span></h3>
<blockquote>
<p>优先队列，默认是大根堆</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">返回队列长度</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">返回是否为空</td>
</tr>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">插入一个元素</td>
</tr>
<tr>
<td style="text-align:center">top()</td>
<td style="text-align:center">返回堆顶元素</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">弹出堆顶元素</td>
</tr>
</tbody>
</table>
<p>定义成小根堆的方式：</p>
<pre class="highlight"><code class="C++">priority_queue&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;, greater&lt;<span class="hljs-keyword">int</span>&gt;&gt; q;
</code></pre>
<h3><span id="stack-栈"> stack, 栈</span></h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">返回栈长度</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">返回是否为空</td>
</tr>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">向栈顶插入一个元素</td>
</tr>
<tr>
<td style="text-align:center">top()</td>
<td style="text-align:center">返回栈顶元素</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">弹出栈顶元素</td>
</tr>
</tbody>
</table>
<h3><span id="deque-双端队列"> deque, 双端队列</span></h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">返回队列长度</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">返回是否为空</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">清空队列</td>
</tr>
<tr>
<td style="text-align:center">front()/back()</td>
<td style="text-align:center">返回队头元素</td>
</tr>
<tr>
<td style="text-align:center">push_back()/pop_back()</td>
<td style="text-align:center">插入/弹出最后一个元素</td>
</tr>
<tr>
<td style="text-align:center">push_front()/pop_front()</td>
<td style="text-align:center">插入/弹出第一个元素</td>
</tr>
<tr>
<td style="text-align:center">begin()/end()</td>
<td style="text-align:center">开始元素迭代器/结尾元素迭代器</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>STL</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>添加公式渲染功能</title>
    <url>/blog/2022/06c538da4.html</url>
    <content><![CDATA[<blockquote>
<p>主题添加公式渲染功能</p>
</blockquote>
<p>本文以 Hexo 主题 <a href="https://github.com/zheli-design/hexo-theme-one-paper">one-paper</a> (其他博客理论上都可以使用这种方法配置)为例，介绍如何添加对数学公式的显示支持。</p>
<h2><span id="配置过程"> 配置过程</span></h2>
<h3><span id="安装渲染插件"> 安装渲染插件</span></h3>
<p>首先执行以下命令卸载掉hexo默认的渲染插件<code>hexo-renderer-marked</code> ，替换为<code>hexo-renderer-markdown-it-plus</code> 。</p>
<pre class="highlight"><code class="C++">npm un hexo-renderer-marked --save
npm i hexo-renderer-markdown-it-plus --save
</code></pre>
<h3><span id="修改文章模板"> 修改文章模板</span></h3>
<p>修改<code>hexo_root/scaffolds/post.md</code> 文件，在末尾添加一行 <code>math: true</code>。</p>
<p>之后当你执行<code>hexo new title</code>生成一篇新的文章时，文章内部默认配置如下所示：<br>
<img src="https://s2.loli.net/2022/06/16/qt5NvLhundmMoce.png" alt="20220616213508"></p>
<p>这样公式渲染默认是开启的，我们直接编写文章正文即可，如果想关闭数学公式支持，将<code>true</code>修改为<code>false</code>即可。</p>
<h3><span id="修改主题布局模板"> 修改主题布局模板</span></h3>
<p>有以下两种选择：</p>
<ol>
<li>
<p>阅读全文后启用支持<br>
编辑<code>hexo_root/themes/landscape/layout/_partial/article.ejs</code> ，在 <code>&lt;/article&gt;</code> (即article标签结束前)前加入一行代码，添加后效果如下：</p>
<pre class="highlight"><code class="C++">&lt;% <span class="hljs-keyword">if</span> (!index &amp;&amp; post.math){ %&gt;
    &lt;script&gt;
    var assetsString = <span class="hljs-string">'&lt;link href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.10.0/katex.min.css" rel="stylesheet" type="text/css"&gt;'</span>
    var pHead = document.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>];
    pHead.innerHTML = pHead.innerHTML + assetsString;
    &lt;/script&gt;
&lt;% } %&gt;
&lt;/article&gt;
</code></pre>
<p>故需将 <code>&lt;!--more--&gt;</code> 放在公式之前。</p>
</li>
<li>
<p>直接全部启用支持(推荐使用)<br>
编辑 <code>hexo_root/themes/landscape/layout/_partial/head.ejs</code> ，在 <code>&lt;/head&gt;</code> (即head标签结束前)前加入一行代码，添加后效果如下：</p>
<pre class="highlight"><code class="C++">&lt;link href=<span class="hljs-string">"https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.10.0/katex.min.css"</span> rel=<span class="hljs-string">"stylesheet"</span> type=<span class="hljs-string">"text/css"</span>&gt;
&lt;/head&gt;
</code></pre>
</li>
</ol>
<h3><span id="编辑配置文件"> 编辑配置文件</span></h3>
<p>在<code>根目录下</code>配置站点配置文件 <code>_config.yml</code>，在最后面加入如下配置：</p>
<pre class="highlight"><code class="C++">markdown_it_plus:
  highlight: <span class="hljs-literal">true</span>
  html: <span class="hljs-literal">true</span>
  xhtmlOut: <span class="hljs-literal">true</span>
  breaks: <span class="hljs-literal">true</span>
  langPrefix:
  linkify: <span class="hljs-literal">true</span>
  typographer:
  quotes: “”‘’
  pre_class: highlight
</code></pre>
<h2><span id="测试效果"> 测试效果</span></h2>
<h3><span id="整行"> 整行</span></h3>
<pre class="highlight"><code class="Latex">$$sin^2\theta + cos^2\theta = 1$$
</code></pre>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>θ</mi><mo>+</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>θ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">sin^2\theta + cos^2\theta = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<h3><span id="行内"> 行内</span></h3>
<pre class="highlight"><code class="Latex">这是一个行内公式： $sin^2\theta + cos^2\theta = 1$
</code></pre>
<p>效果：<br>
这是一个行内公式： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>θ</mi><mo>+</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>θ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">sin^2\theta + cos^2\theta = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<h3><span id="数学公式测试"> 数学公式测试</span></h3>
<pre class="highlight"><code class="Latex">$$
\begin{aligned}
f_Y(y) &amp; = f_X[h(y)]|h'(y)| \\[2ex]
&amp; = f_X[h(y)]h'(y) \\[2ex]
&amp; = \frac{1}{\theta}e^{-\frac{x}{\theta}}[\frac{dx}{dy}(-\frac{\theta}{ln(1-y)})] \\[2ex]
&amp; = \frac{1}{\theta}e^{-\frac{-\frac{\theta}{ln(1-y)}}{\theta}}\frac{\theta}{1-y} \\[2ex]
&amp; = \frac{1}{\theta}e^{ln(1-y)}\frac{\theta}{1-y} \\[2ex]
&amp; = \frac{1-y}{\theta}\frac{\theta}{1-y} \\[2ex]
&amp; = 1
\end{aligned}
\tag{1}
$$
</code></pre>
<p>效果：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>f</mi><mi>Y</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>f</mi><mi>X</mi></msub><mo stretchy="false">[</mo><mi>h</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><msup><mi>h</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>f</mi><mi>X</mi></msub><mo stretchy="false">[</mo><mi>h</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><msup><mi>h</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>θ</mi></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mi>x</mi><mi>θ</mi></mfrac></mrow></msup><mo stretchy="false">[</mo><mfrac><mrow><mi>d</mi><mi>x</mi></mrow><mrow><mi>d</mi><mi>y</mi></mrow></mfrac><mo stretchy="false">(</mo><mo>−</mo><mfrac><mi>θ</mi><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>θ</mi></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mo>−</mo><mfrac><mi>θ</mi><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><mi>θ</mi></mfrac></mrow></msup><mfrac><mi>θ</mi><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>θ</mi></mfrac><msup><mi>e</mi><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></msup><mfrac><mi>θ</mi><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow><mi>θ</mi></mfrac><mfrac><mi>θ</mi><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
f_Y(y) &amp; = f_X[h(y)]|h'(y)| \\[2ex]
&amp; = f_X[h(y)]h'(y) \\[2ex]
&amp; = \frac{1}{\theta}e^{-\frac{x}{\theta}}[\frac{dx}{dy}(-\frac{\theta}{ln(1-y)})] \\[2ex]
&amp; = \frac{1}{\theta}e^{-\frac{-\frac{\theta}{ln(1-y)}}{\theta}}\frac{\theta}{1-y} \\[2ex]
&amp; = \frac{1}{\theta}e^{ln(1-y)}\frac{\theta}{1-y} \\[2ex]
&amp; = \frac{1-y}{\theta}\frac{\theta}{1-y} \\[2ex]
&amp; = 1
\end{aligned}
\tag{1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:18.01824em;vertical-align:-8.75912em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:9.25912em;"><span style="top:-12.01104em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-9.64904em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:-6.755599999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:-3.641679999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:-0.7482399999999989em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:2.145200000000001em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:4.507199999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.75912em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:9.25912em;"><span style="top:-12.01104em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">∣</span></span></span><span style="top:-9.64904em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-6.755599999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.89708em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mclose">]</span></span></span><span style="top:-3.641679999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.59192em;"><span style="top:-3.59192em;margin-right:0.05em;"><span class="pstrut" style="height:3.1789199999999997em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6841714285714287em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.911714285714286em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size1 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.08144em;"><span style="top:-2.4265em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.387em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8235em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size1 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.7482399999999989em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:2.145200000000001em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:4.507199999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.75912em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:18.01824em;vertical-align:-8.75912em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p>
<pre class="highlight"><code class="Latex">$$
\frac{1}{\sigma} 
\tag{this is a test}
$$
</code></pre>
<p>效果：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mfrac><mn>1</mn><mi>σ</mi></mfrac></mtd><mtd width="50%"></mtd><mtd><mtext>(this&nbsp;is&nbsp;a&nbsp;test)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\frac{1}{\sigma} 
\tag{this is a test}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">t</span><span class="mord">h</span><span class="mord">i</span><span class="mord">s</span><span class="mord">&nbsp;</span><span class="mord">i</span><span class="mord">s</span><span class="mord">&nbsp;</span><span class="mord">a</span><span class="mord">&nbsp;</span><span class="mord">t</span><span class="mord">e</span><span class="mord">s</span><span class="mord">t</span></span><span class="mord">)</span></span></span></span></span></span></p>
<h3><span id="latex语法测试"> Latex语法测试</span></h3>
<pre class="highlight"><code class="Latex">$$\underline{给这条语句加一个下划线}$$
</code></pre>
<p>效果：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder accentunder="true"><mrow><mi mathvariant="normal">给</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">条</mi><mi mathvariant="normal">语</mi><mi mathvariant="normal">句</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">划</mi><mi mathvariant="normal">线</mi></mrow><mo stretchy="true">‾</mo></munder></mrow><annotation encoding="application/x-tex">\underline{给这条语句加一个下划线}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.2em;vertical-align:-0.2em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0em;"><span style="top:-2.84em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">给</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">语</span><span class="mord cjk_fallback">句</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">划</span><span class="mord cjk_fallback">线</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span></p>
<blockquote>
<p>参考：<a href="https://blog.chaos.run/dreams/hexo-enable-math-support/index.html">Hexo 博客启用对数学公式的支持</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>公式渲染测试</title>
    <url>/blog/2022/06784dd132.html</url>
    <content><![CDATA[<blockquote>
<p>主题添加公式渲染功能，测试</p>
</blockquote>
<p>整行：</p>
<pre class="highlight"><code class="Latex">$$sin^2\theta + cos^2\theta = 1$$
</code></pre>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>θ</mi><mo>+</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>θ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">sin^2\theta + cos^2\theta = 1
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p>
<p>行内：</p>
<pre class="highlight"><code class="Latex">这是一个行内公式： $sin^2\theta + cos^2\theta = 1$
</code></pre>
<p>效果：<br>
这是一个行内公式： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mi>i</mi><msup><mi>n</mi><mn>2</mn></msup><mi>θ</mi><mo>+</mo><mi>c</mi><mi>o</mi><msup><mi>s</mi><mn>2</mn></msup><mi>θ</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">sin^2\theta + cos^2\theta = 1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">o</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>数学公式测试：</p>
<pre class="highlight"><code class="Latex">$$
\begin{aligned}
f_Y(y) &amp; = f_X[h(y)]|h'(y)| \\[2ex]
&amp; = f_X[h(y)]h'(y) \\[2ex]
&amp; = \frac{1}{\theta}e^{-\frac{x}{\theta}}[\frac{dx}{dy}(-\frac{\theta}{ln(1-y)})] \\[2ex]
&amp; = \frac{1}{\theta}e^{-\frac{-\frac{\theta}{ln(1-y)}}{\theta}}\frac{\theta}{1-y} \\[2ex]
&amp; = \frac{1}{\theta}e^{ln(1-y)}\frac{\theta}{1-y} \\[2ex]
&amp; = \frac{1-y}{\theta}\frac{\theta}{1-y} \\[2ex]
&amp; = 1
\end{aligned}
\tag{1}
$$
</code></pre>
<p>效果：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mtable rowspacing="0.24999999999999992em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msub><mi>f</mi><mi>Y</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>f</mi><mi>X</mi></msub><mo stretchy="false">[</mo><mi>h</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><msup><mi>h</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mi mathvariant="normal">∣</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>f</mi><mi>X</mi></msub><mo stretchy="false">[</mo><mi>h</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><msup><mi>h</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>θ</mi></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mi>x</mi><mi>θ</mi></mfrac></mrow></msup><mo stretchy="false">[</mo><mfrac><mrow><mi>d</mi><mi>x</mi></mrow><mrow><mi>d</mi><mi>y</mi></mrow></mfrac><mo stretchy="false">(</mo><mo>−</mo><mfrac><mi>θ</mi><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>θ</mi></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mfrac><mrow><mo>−</mo><mfrac><mi>θ</mi><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><mi>θ</mi></mfrac></mrow></msup><mfrac><mi>θ</mi><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mi>θ</mi></mfrac><msup><mi>e</mi><mrow><mi>l</mi><mi>n</mi><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></msup><mfrac><mi>θ</mi><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mfrac><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow><mi>θ</mi></mfrac><mfrac><mi>θ</mi><mrow><mn>1</mn><mo>−</mo><mi>y</mi></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}
f_Y(y) &amp; = f_X[h(y)]|h'(y)| \\[2ex]
&amp; = f_X[h(y)]h'(y) \\[2ex]
&amp; = \frac{1}{\theta}e^{-\frac{x}{\theta}}[\frac{dx}{dy}(-\frac{\theta}{ln(1-y)})] \\[2ex]
&amp; = \frac{1}{\theta}e^{-\frac{-\frac{\theta}{ln(1-y)}}{\theta}}\frac{\theta}{1-y} \\[2ex]
&amp; = \frac{1}{\theta}e^{ln(1-y)}\frac{\theta}{1-y} \\[2ex]
&amp; = \frac{1-y}{\theta}\frac{\theta}{1-y} \\[2ex]
&amp; = 1
\end{aligned}
\tag{1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:18.01824em;vertical-align:-8.75912em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:9.25912em;"><span style="top:-12.01104em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.22222em;">Y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-9.64904em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:-6.755599999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:-3.641679999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:-0.7482399999999989em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:2.145200000000001em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span><span style="top:4.507199999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.75912em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:9.25912em;"><span style="top:-12.01104em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span><span class="mord">∣</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord">∣</span></span></span><span style="top:-9.64904em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.07847em;">X</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault">h</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mclose">]</span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-6.755599999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.89708em;"><span style="top:-3.4130000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">n</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mclose">]</span></span></span><span style="top:-3.641679999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.59192em;"><span style="top:-3.59192em;margin-right:0.05em;"><span class="pstrut" style="height:3.1789199999999997em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6841714285714287em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.911714285714286em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size1 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.08144em;"><span style="top:-2.4265em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.387em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8235em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size1 size6"></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-0.7482399999999989em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.01968em;">l</span><span class="mord mathdefault mtight">n</span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:2.145200000000001em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.37144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:4.507199999999999em;"><span class="pstrut" style="height:3.59192em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:8.75912em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:18.01824em;vertical-align:-8.75912em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p>
<pre class="highlight"><code class="Latex">$$
\frac{1}{\sigma} 
\tag{this is a test}
$$
</code></pre>
<p>效果：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mfrac><mn>1</mn><mi>σ</mi></mfrac></mtd><mtd width="50%"></mtd><mtd><mtext>(this&nbsp;is&nbsp;a&nbsp;test)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\frac{1}{\sigma} 
\tag{this is a test}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">t</span><span class="mord">h</span><span class="mord">i</span><span class="mord">s</span><span class="mord">&nbsp;</span><span class="mord">i</span><span class="mord">s</span><span class="mord">&nbsp;</span><span class="mord">a</span><span class="mord">&nbsp;</span><span class="mord">t</span><span class="mord">e</span><span class="mord">s</span><span class="mord">t</span></span><span class="mord">)</span></span></span></span></span></span></p>
<p>Latex语法测试：</p>
<pre class="highlight"><code class="Latex">$$\underline{给这条语句加一个下划线}$$
</code></pre>
<p>效果：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder accentunder="true"><mrow><mi mathvariant="normal">给</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">条</mi><mi mathvariant="normal">语</mi><mi mathvariant="normal">句</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">划</mi><mi mathvariant="normal">线</mi></mrow><mo stretchy="true">‾</mo></munder></mrow><annotation encoding="application/x-tex">\underline{给这条语句加一个下划线}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.2em;vertical-align:-0.2em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0em;"><span style="top:-2.84em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">给</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">语</span><span class="mord cjk_fallback">句</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">划</span><span class="mord cjk_fallback">线</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span></p>
]]></content>
  </entry>
  <entry>
    <title>LeetCode笔记-栈和队列</title>
    <url>/blog/2022/0638ccdfc.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为个人笔记，内容或有错误。<br>
图片部分源于<a href="https://programmercarl.com/">代码随想录</a>，侵删。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">基础知识</a></li>
<li><a href="#%E7%94%A8%E6%A0%88%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97">用栈模拟实现队列</a></li>
<li><a href="#%E7%94%A8%E9%98%9F%E5%88%97%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E6%A0%88">用队列模拟实现栈</a></li>
<li><a href="#%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E9%97%AE%E9%A2%98">有效括号问题</a></li>
</ul>
<!-- tocstop -->
<blockquote>
<p>栈和队列不为人知的一面</p>
</blockquote>
<p>栈是先进后出，队列是先进先出：</p>
<p><img src="https://s2.loli.net/2022/06/16/7yBoa3h4A81kqxI.png" alt="20220616145417"></p>
<h2><span id="基础知识"> 基础知识</span></h2>
<p>栈先进后出，提供push 和 pop 等等接口，所有元素必须符合先进后出规则，所以栈不提供走访功能，也不提供迭代器(iterator)。 不像是set 或者map 提供迭代器iterator来遍历所有元素。</p>
<p>栈是以底层容器完成其所有的工作，对外提供统一的接口，底层容器是可插拔的（<strong>也就是说我们可以控制使用哪种容器来实现栈的功能</strong>）。</p>
<p>所以STL中栈往往不被归类为容器，而被归类为container adapter（容器适配器）。</p>
<p>那么问题来了，STL 中栈是用什么容器实现的？</p>
<p>从下图中可以看出，栈的内部结构，栈的底层实现可以是vector，deque，list 都是可以的， 主要就是数组和链表的底层实现。<br>
<img src="https://s2.loli.net/2022/06/16/hnMFk4q2geOiDso.png" alt="栈与队列理论3"></p>
<p>常用的SGI STL，如果没有指定底层实现的话，默认是以deque为缺省情况下栈的低层结构。</p>
<p>deque是一个双向队列，只要封住一段，只开通另一端就可以实现栈的逻辑了。</p>
<p>SGI STL中 队列底层实现缺省情况下一样使用deque实现的。</p>
<p>也可以指定vector为栈的底层实现，初始化语句如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &gt; third;  <span class="hljs-comment">// 使用vector为底层容器的栈</span>
</code></pre>
<p>对应的队列的情况是一样的。</p>
<p>队列中先进先出的数据结构，同样不允许有遍历行为，不提供迭代器, SGI STL中队列一样是以deque为缺省情况下的底部结构。</p>
<p>也可以指定list 为起底层实现，初始化queue的语句如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-built_in">std</span>::<span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">list</span>&lt;<span class="hljs-keyword">int</span>&gt;&gt; third; <span class="hljs-comment">// 定义以list为底层容器的队列</span>
</code></pre>
<p>所以STL 队列也不被归类为容器，而被归类为container adapter（ 容器适配器）。</p>
<h2><span id="用栈模拟实现队列"> 用栈模拟实现队列</span></h2>
<pre class="highlight"><code class="C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> {</span>
<span class="hljs-keyword">public</span>:
    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; stIn;
    <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">int</span>&gt; stOut;
    <span class="hljs-comment">/** Initialize your data structure here. */</span>
    MyQueue() {

    }
    <span class="hljs-comment">/** Push element x to the back of queue. */</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{
        stIn.push(x);
    }

    <span class="hljs-comment">/** Removes the element from in front of queue and returns that element. */</span>
    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-comment">// 只有当stOut为空的时候，再从stIn里导入数据（导入stIn全部数据）</span>
        <span class="hljs-keyword">if</span> (stOut.empty()) {
            <span class="hljs-comment">// 从stIn导入数据直到stIn为空</span>
            <span class="hljs-keyword">while</span>(!stIn.empty()) {
                stOut.push(stIn.top());
                stIn.pop();
            }
        }
        <span class="hljs-keyword">int</span> result = stOut.top();
        stOut.pop();
        <span class="hljs-keyword">return</span> result;
    }

    <span class="hljs-comment">/** Get the front element. */</span>
    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">int</span> res = <span class="hljs-keyword">this</span>-&gt;pop(); <span class="hljs-comment">// 直接使用已有的pop函数</span>
        stOut.push(res); <span class="hljs-comment">// 因为pop函数弹出了元素res，所以再添加回去</span>
        <span class="hljs-keyword">return</span> res;
    }

    <span class="hljs-comment">/** Returns whether the queue is empty. */</span>
    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> stIn.empty() &amp;&amp; stOut.empty();
    }
};
</code></pre>
<h2><span id="用队列模拟实现栈"> 用队列模拟实现栈</span></h2>
<pre class="highlight"><code class="C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span> {</span>
<span class="hljs-keyword">public</span>:
    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; que1;
    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-keyword">int</span>&gt; que2;

    MyStack() {

    }
    
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>{
        que1.push(x);
    }
    
    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>-&gt;empty()) {
            <span class="hljs-keyword">while</span> (que1.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) {
                que2.push(que1.front());
                que1.pop();
            }
            
            <span class="hljs-keyword">int</span> result = que1.front();
            que1.pop();

            <span class="hljs-keyword">while</span> (!que2.empty()) {
                que1.push(que2.front());
                que2.pop();
            }
            <span class="hljs-keyword">return</span> result;
        }
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    
    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> que1.back();
    }
    
    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> que1.empty() &amp;&amp; que2.empty();
    }
};

<span class="hljs-comment">/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj-&gt;push(x);
 * int param_2 = obj-&gt;pop();
 * int param_3 = obj-&gt;top();
 * bool param_4 = obj-&gt;empty();
 */</span>
</code></pre>
<h2><span id="有效括号问题"> 有效括号问题</span></h2>
<pre class="highlight"><code class="C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span>
<span class="hljs-keyword">public</span>:
    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-built_in">string</span> s)</span> </span>{
        <span class="hljs-built_in">stack</span>&lt;<span class="hljs-keyword">char</span>&gt; sta;
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) {
            <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">'('</span>) sta.push(<span class="hljs-string">')'</span>);
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">'['</span>) sta.push(<span class="hljs-string">']'</span>);
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">'{'</span>) sta.push(<span class="hljs-string">'}'</span>);
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sta.empty() || sta.top() != s[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
            <span class="hljs-keyword">else</span> sta.pop();
        }
        <span class="hljs-keyword">return</span> sta.empty();
    } 
};
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>LeetCode笔记-双指针大法</title>
    <url>/blog/2022/06c54e8d28.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为个人笔记，内容或有错误。<br>
图片部分源于<a href="https://programmercarl.com/">代码随想录</a>，侵删。</p>
</blockquote>
<!-- toc -->
<!-- tocstop -->
<p>双指针法非常实用，但是他并不隶属于任何一种数据结构。</p>
<p>双指针法在数组原地反转，双重循环降低时间复杂度一般都有很好的效果。</p>
]]></content>
  </entry>
  <entry>
    <title>LeetCode笔记-字符串</title>
    <url>/blog/2022/063572401b.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为个人笔记，内容或有错误。<br>
图片部分源于<a href="https://programmercarl.com/">代码随想录</a>，侵删。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2">什么是字符串</a></li>
<li><a href="#%E5%8F%8C%E6%8C%87%E9%92%88%E6%B3%95">双指针法</a></li>
<li><a href="#kmp">KMP</a></li>
</ul>
<!-- tocstop -->
<h3><span id="什么是字符串"> 什么是字符串</span></h3>
<p>字符串是若干字符组成的有限序列，也可以理解为是一个字符数组，但是很多语言对字符串做了特殊的规定。</p>
<p>在C语言中，把一个字符串存入一个数组时，也把结束符 '\0’存入数组，并以此作为该字符串是否结束的标志。</p>
<p>例如这段代码：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">char</span> a[<span class="hljs-number">5</span>] = <span class="hljs-string">"asd"</span>;
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; a[i] != <span class="hljs-string">'\0'</span>; i++) {
}
</code></pre>
<p>在C++中，提供一个string类，string类会提供 size接口，可以用来判断string类字符串是否结束，就不用’\0’来判断是否结束。</p>
<p>例如这段代码:</p>
<pre class="highlight"><code class="C++"><span class="hljs-built_in">string</span> a = <span class="hljs-string">"asd"</span>;
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>(); i++) {
}
</code></pre>
<p>那么vector&lt; char &gt; 和 string 又有什么区别呢？</p>
<p>其实在基本操作上没有区别，但是 string提供更多的字符串处理的相关接口，例如string 重载了+，而vector却没有。</p>
<p>所以想处理字符串，我们还是会定义一个string类型。</p>
<h3><span id="双指针法"> 双指针法</span></h3>
<p>双指针法在数组，链表和字符串中很常用。其实很多数组填充类的问题，都可以先预先给数组扩容带填充后的大小，然后在从后向前进行操作。</p>
<h3><span id="kmp"> KMP</span></h3>
<p>KMP的主要思想是当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</p>
<p>KMP的精髓所在就是前缀表</p>
<p>前缀表：起始位置到下标i之前（包括i）的子串中，有多大长度的相同前缀后缀。</p>
<p>那么使用KMP可以解决两类经典问题：</p>
<ul>
<li>匹配问题：28. 实现 strStr()</li>
<li>重复子串问题：459.重复的子字符串</li>
</ul>
<p>再一次强调了什么是前缀，什么是后缀，什么又是最长相等前后缀。</p>
<p>前缀：指不包含最后一个字符的所有以第一个字符开头的连续子串。</p>
<p>后缀：指不包含第一个字符的所有以最后一个字符结尾的连续子串。</p>
<p>然后针对前缀表到底要不要减一，这其实是不同KMP实现的方式，在KMP精讲 中针对之前两个问题，分别给出了两个不同版本的的KMP实现。</p>
<p>其中主要理解j=next[x]这一步最为关键！</p>
]]></content>
  </entry>
  <entry>
    <title>LeetCode笔记-KMP</title>
    <url>/blog/2022/063572401b.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为个人笔记，内容或有错误。<br>
图片部分源于<a href="https://programmercarl.com/">代码随想录</a>，侵删。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E5%AE%9E%E7%8E%B0strstr">实现strStr()</a></li>
<li><a href="#%E6%91%98%E8%A6%81">摘要</a>
<ul>
<li><a href="#%E6%9E%84%E9%80%A0next%E6%95%B0%E7%BB%84">构造next数组</a></li>
<li><a href="#%E4%BD%BF%E7%94%A8next%E6%95%B0%E7%BB%84%E6%9D%A5%E5%81%9A%E5%8C%B9%E9%85%8D">使用next数组来做匹配</a></li>
<li><a href="#%E5%89%8D%E7%BC%80%E8%A1%A8%E7%BB%9F%E4%B8%80%E5%87%8F%E4%B8%80-c%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0">前缀表统一减一 C++代码实现</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<p>字符串操作主要考虑格式的转换。</p>
<h2><span id="实现strstr"> 实现strStr()</span></h2>
<p><a href="https://leetcode.cn/problems/implement-strstr/">LeetCode题目链接</a></p>
<p>KMP的经典思想就是:当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。</p>
<p><a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html">KMP精讲文字版</a></p>
<p><a href="https://www.bilibili.com/video/BV1PD4y1o7nd/?spm_id_from=pageDriver&amp;vd_source=0febcf63c24b3fda1cd2c47a2078ae54">KMP精讲视频</a></p>
<h2><span id="摘要"> 摘要</span></h2>
<h3><span id="构造next数组"> 构造next数组</span></h3>
<blockquote>
<p>next数组的本质就是前缀后缀相同的字符位数表<br>
实现方式常见的有减一、右移和保持不变三种，但是本质都是一样的，只在细微地方有区别，本文采用减一方式，其他方式代码详见<a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E5%89%8D%E7%BC%80%E8%A1%A8-%E4%B8%8D%E5%87%8F%E4%B8%80-c-%E5%AE%9E%E7%8E%B0">前缀表（不减一）C++实现</a></p>
</blockquote>
<p>我们定义一个函数getNext来构建next数组，函数参数为指向next数组的指针，和一个字符串。 代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* next, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; s)</span>
</span></code></pre>
<p>构造next数组其实就是计算模式串s，前缀表的过程。 主要有如下三步：</p>
<ol>
<li>初始化</li>
<li>处理前后缀不相同的情况</li>
<li>处理前后缀相同的情况</li>
</ol>
<p>接下来我们详解详解一下。</p>
<p><strong>初始化：</strong><br>
定义两个指针i和j，j指向前缀末尾位置，i指向后缀末尾位置。</p>
<p>然后还要对next数组进行初始化赋值，如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">int</span> j = <span class="hljs-number">-1</span>;
next[<span class="hljs-number">0</span>] = j;
</code></pre>
<p>j 为什么要初始化为 -1呢，因为之前说过 前缀表要统一减一的操作仅仅是其中的一种实现，我们这里选择j初始化为-1，下文我还会给出j不初始化为-1的实现代码。</p>
<p>next[i] 表示 i（包括i）之前最长相等的前后缀长度（其实就是j）</p>
<p>所以初始化next[0] = j 。</p>
<p>处理前后缀不相同的情况<br>
因为j初始化为-1，那么i就从1开始，进行s[i] 与 s[j+1]的比较。</p>
<p>所以遍历模式串s的循环下标i 要从 1开始，代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) {
</code></pre>
<p>如果 s[i] 与 s[j+1]不相同，也就是遇到 前后缀末尾不相同的情况，就要向前回退。</p>
<p>怎么回退呢？</p>
<p>next[j]就是记录着j（包括j）之前的子串的相同前后缀的长度。</p>
<p>那么 s[i] 与 s[j+1] 不相同，就要找 j+1前一个元素在next数组里的值（就是next[j]）。</p>
<p>所以，处理前后缀不相同的情况代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 前后缀不相同了</span>
    j = next[j]; <span class="hljs-comment">// 向前回退</span>
}
</code></pre>
<p>处理前后缀相同的情况<br>
如果 s[i] 与 s[j + 1] 相同，那么就同时向后移动i 和j 说明找到了相同的前后缀，同时还要将j（前缀的长度）赋给next[i], 因为next[i]要记录相同前后缀的长度。</p>
<p>代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">if</span> (s[i] == s[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 找到相同的前后缀</span>
    j++;
}
next[i] = j;
</code></pre>
<p>最后整体构建next数组的函数代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* next, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; s)</span></span>{
    <span class="hljs-keyword">int</span> j = <span class="hljs-number">-1</span>;
    next[<span class="hljs-number">0</span>] = j;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) { <span class="hljs-comment">// 注意i从1开始</span>
        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 前后缀不相同了</span>
            j = next[j]; <span class="hljs-comment">// 向前回退</span>
        }
        <span class="hljs-keyword">if</span> (s[i] == s[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 找到相同的前后缀</span>
            j++;
        }
        next[i] = j; <span class="hljs-comment">// 将j（前缀的长度）赋给next[i]</span>
    }
}
</code></pre>
<p>代码构造next数组的逻辑流程动画如下：</p>
<p>得到了next数组之后，就要用这个来做匹配了。</p>
<p><img src="https://code-thinking.cdn.bcebos.com/gifs/KMP%E7%B2%BE%E8%AE%B23.gif" alt></p>
<h3><span id="使用next数组来做匹配"> 使用next数组来做匹配</span></h3>
<p>在文本串s里 找是否出现过模式串t。</p>
<p>定义两个下标j 指向模式串起始位置，i指向文本串起始位置。</p>
<p>那么j初始值依然为-1，为什么呢？ 依然因为next数组里记录的起始位置为-1。</p>
<p>i就从0开始，遍历文本串，代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) 
</code></pre>
<p>接下来就是 s[i] 与 t[j + 1] （因为j从-1开始的） 进行比较。</p>
<p>如果 s[i] 与 t[j + 1] 不相同，j就要从next数组里寻找下一个匹配的位置。</p>
<p>代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] != t[j + <span class="hljs-number">1</span>]) {
    j = next[j];
}
</code></pre>
<p>如果 s[i] 与 t[j + 1] 相同，那么i 和 j 同时向后移动， 代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">if</span> (s[i] == t[j + <span class="hljs-number">1</span>]) {
    j++; <span class="hljs-comment">// i的增加在for循环里</span>
}
</code></pre>
<p>如何判断在文本串s里出现了模式串t呢，如果j指向了模式串t的末尾，那么就说明模式串t完全匹配文本串s里的某个子串了。</p>
<p>本题要在文本串字符串中找出模式串出现的第一个位置 (从0开始)，所以返回当前在文本串匹配模式串的位置i 减去 模式串的长度，就是文本串字符串中出现模式串的第一个位置。</p>
<p>代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">if</span> (j == (t.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) ) {
    <span class="hljs-keyword">return</span> (i - t.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);
}
</code></pre>
<p>那么使用next数组，用模式串匹配文本串的整体代码如下：</p>
<pre class="highlight"><code class="C++"><span class="hljs-keyword">int</span> j = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 因为next数组里记录的起始位置为-1</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) { <span class="hljs-comment">// 注意i就从0开始</span>
    <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] != t[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 不匹配</span>
        j = next[j]; <span class="hljs-comment">// j 寻找之前匹配的位置</span>
    }
    <span class="hljs-keyword">if</span> (s[i] == t[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 匹配，j和i同时向后移动</span>
        j++; <span class="hljs-comment">// i的增加在for循环里</span>
    }
    <span class="hljs-keyword">if</span> (j == (t.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) ) { <span class="hljs-comment">// 文本串s里出现了模式串t</span>
        <span class="hljs-keyword">return</span> (i - t.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);
    }
}
</code></pre>
<p>此时所有逻辑的代码都已经写出来了，力扣 28.实现strStr 题目的整体代码如下：</p>
<h3><span id="前缀表统一减一-c代码实现"> 前缀表统一减一 C++代码实现</span></h3>
<pre class="highlight"><code class="C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> {</span>
<span class="hljs-keyword">public</span>:
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getNext</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* next, <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; s)</span> </span>{
        <span class="hljs-keyword">int</span> j = <span class="hljs-number">-1</span>;
        next[<span class="hljs-number">0</span>] = j;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) { <span class="hljs-comment">// 注意i从1开始</span>
            <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] != s[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 前后缀不相同了</span>
                j = next[j]; <span class="hljs-comment">// 向前回退</span>
            }
            <span class="hljs-keyword">if</span> (s[i] == s[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 找到相同的前后缀</span>
                j++;
            }
            next[i] = j; <span class="hljs-comment">// 将j（前缀的长度）赋给next[i]</span>
        }
    }
    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">strStr</span><span class="hljs-params">(<span class="hljs-built_in">string</span> haystack, <span class="hljs-built_in">string</span> needle)</span> </span>{
        <span class="hljs-keyword">if</span> (needle.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
        }
        <span class="hljs-keyword">int</span> next[needle.<span class="hljs-built_in">size</span>()];
        getNext(next, needle);
        <span class="hljs-keyword">int</span> j = <span class="hljs-number">-1</span>; <span class="hljs-comment">// // 因为next数组里记录的起始位置为-1</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; haystack.<span class="hljs-built_in">size</span>(); i++) { <span class="hljs-comment">// 注意i就从0开始</span>
            <span class="hljs-keyword">while</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; haystack[i] != needle[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 不匹配</span>
                j = next[j]; <span class="hljs-comment">// j 寻找之前匹配的位置</span>
            }
            <span class="hljs-keyword">if</span> (haystack[i] == needle[j + <span class="hljs-number">1</span>]) { <span class="hljs-comment">// 匹配，j和i同时向后移动</span>
                j++; <span class="hljs-comment">// i的增加在for循环里</span>
            }
            <span class="hljs-keyword">if</span> (j == (needle.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>) ) { <span class="hljs-comment">// 文本串s里出现了模式串t</span>
                <span class="hljs-keyword">return</span> (i - needle.<span class="hljs-built_in">size</span>() + <span class="hljs-number">1</span>);
            }
        }
        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;
    }
};
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>LeetCode笔记-哈希表</title>
    <url>/blog/2022/064cfc9b66.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为个人笔记，内容或有错误。<br>
图片部分源于<a href="https://programmercarl.com/">代码随想录</a>，侵删。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E5%93%88%E5%B8%8C%E8%A1%A8">哈希表</a>
<ul>
<li><a href="#%E5%93%88%E5%B8%8C%E7%A2%B0%E6%92%9E">哈希碰撞</a></li>
<li><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%89%E7%A7%8D%E5%93%88%E5%B8%8C%E7%BB%93%E6%9E%84">常见的三种哈希结构</a></li>
<li><a href="#%E4%B8%89%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E9%80%89%E6%8B%A9">三种数据结构的选择</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="哈希表"> 哈希表</span></h2>
<blockquote>
<p>哈希表是根据关键码的值而直接进行访问的数据结构。<br>
一般哈希表都是用来快速判断一个元素是否出现在集合里。</p>
</blockquote>
<h3><span id="哈希碰撞"> 哈希碰撞</span></h3>
<p>两个元素同时映射到哈希表中同一位置，这一现象叫做哈希碰撞，如下例：<br>
<img src="https://s2.loli.net/2022/06/12/8AsRHUdwTS6kpgv.png" alt="20220612173210"></p>
<p>一般处理方法有两种，拉链法和线性探测法。</p>
<h4><span id="拉链法"> 拉链法</span></h4>
<p><img src="https://s2.loli.net/2022/06/12/6nHRVWyIAxL9XwT.png" alt="20220612173630"><br>
其实拉链法就是要选择合适的哈希表大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间</p>
<h4><span id="线性探测法"> 线性探测法</span></h4>
<p>使用线性探测法，一定要保证tablesize大于datasize，需要依靠哈希表中的空位来解决碰撞问题。</p>
<p><img src="https://s2.loli.net/2022/06/12/2Erl7dHO8IuGxyU.png" alt="20220612174935"></p>
<h3><span id="常见的三种哈希结构"> 常见的三种哈希结构</span></h3>
<p>当我们想使用哈希法来解决问题的时候，我们一般会选择如下三种数据结构。</p>
<ul>
<li>数组</li>
<li>set （集合）</li>
<li>map(映射)</li>
</ul>
<p>在C++中，set 和 map 分别提供以下三种数据结构，其底层实现以及优劣如下表所示：<br>
<img src="https://s2.loli.net/2022/06/12/Wj8mAD2QnyKzukM.png" alt="20220612183010"></p>
<p>std::unordered_set底层实现为哈希表，std::set 和std::multiset 的底层实现是红黑树，红黑树是一种平衡二叉搜索树，所以key值是有序的，但key不可以修改，改动key值会导致整棵树的错乱，所以只能删除和增加。<br>
<img src="https://s2.loli.net/2022/06/12/IJDeZ8yNmncR3SU.png" alt="20220612183049"></p>
<p>std::unordered_map 底层实现为哈希表，std::map 和std::multimap 的底层实现是红黑树。同理，std::map 和std::multimap 的key也是有序的（这个问题也经常作为面试题，考察对语言容器底层的理解）。</p>
<p>当我们要使用集合来解决哈希问题的时候，优先使用unordered_set，因为它的查询和增删效率是最优的，如果需要集合是有序的，那么就用set，如果要求不仅有序还要有重复数据的话，那么就用multiset。</p>
<p>那么再来看一下map ，在map 是一个key value 的数据结构，map中，对key是有限制，对value没有限制的，因为key的存储方式使用红黑树实现的。</p>
<h3><span id="三种数据结构的选择"> 三种数据结构的选择</span></h3>
<ol>
<li>数据量给定而且没有太大需求的可以直接选择数组。</li>
<li>数据量未知而且如果哈希值比较少、特别分散、跨度非常大，使用set，使用数组就造成空间的极大浪费</li>
<li>直接使用set 不仅占用空间比数组大，而且速度要比数组慢，set把数值映射到key上都要做hash计算的，所以可以用数组的优先选择数组</li>
<li>map是采用了key-value的方式，一般可以用来保存一一对应的键值对</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>LeetCode笔记-链表</title>
    <url>/blog/2022/064d5af563.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为个人笔记，内容或有错误。<br>
图片部分源于<a href="https://programmercarl.com/">代码随想录</a>，侵删。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E9%93%BE%E8%A1%A8">链表</a>
<ul>
<li><a href="#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90">性能分析</a></li>
<li><a href="#c%E7%A4%BA%E4%BE%8B">C++示例</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8%E5%92%8C%E5%85%A5%E5%8F%A3%E9%97%AE%E9%A2%98">关于环形链表和入口问题</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="链表"> 链表</span></h2>
<p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），最后一个节点的指针域指向null（空指针的意思）。</p>
<ol>
<li>
<p>链接的入口节点称为链表的头结点也就是head。<br>
<img src="https://s2.loli.net/2022/05/26/YVCzvG73koDOeZw.png" alt="20220526212803"></p>
</li>
<li>
<p>双链表：<br>
<img src="https://s2.loli.net/2022/05/26/HAv7zVF2ZGlDN5q.png" alt="20220526212848"></p>
</li>
<li>
<p>循环链表：<br>
循环链表可用来解决约瑟夫环问题<br>
<img src="https://s2.loli.net/2022/05/26/mQZ5tVT2ScWHdGl.png" alt="20220526212919"></p>
</li>
</ol>
<p>链表中的节点在内存中不是连续分布的 ，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</p>
<pre class="highlight"><code class="C++"><span class="hljs-comment">// 单链表</span>
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">ListNode</span> {</span>
    <span class="hljs-keyword">int</span> val;  <span class="hljs-comment">// 节点上存储的元素</span>
    ListNode *next;  <span class="hljs-comment">// 指向下一个节点的指针</span>
    <span class="hljs-comment">// ListNode *prev;  //指向前一个元素 双链表，记得构造函数初始化</span>
    ListNode(<span class="hljs-keyword">int</span> x) : val(x), next(<span class="hljs-literal">NULL</span>) {}  <span class="hljs-comment">// 节点的构造函数</span>
};
</code></pre>
<h3><span id="性能分析"> 性能分析</span></h3>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">插入/删除</th>
<th style="text-align:center">查询</th>
<th style="text-align:center">适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数组</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">数据量固定，频繁查询，较少增删</td>
</tr>
<tr>
<td style="text-align:center">链表</td>
<td style="text-align:center">O(1)</td>
<td style="text-align:center">O(n)</td>
<td style="text-align:center">数据量不固定，频繁增删，较少查询</td>
</tr>
</tbody>
</table>
<p>单链表的删除操作一般有两类：</p>
<ol>
<li>设置虚拟头，将头节点当作普通节点处理，最后在删除虚拟头</li>
<li>头节点和其他节点分开处理</li>
</ol>
<p>Pyhton、Java等语言可以自动释放内存，C++记得要手动释放内存节约空间。</p>
<h3><span id="c示例"> C++示例</span></h3>
<pre class="highlight"><code class="C++"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyLinkedList</span> {</span>
<span class="hljs-keyword">public</span>:
    <span class="hljs-comment">// 定义链表节点结构体</span>
    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LinkedNode</span> {</span>
        <span class="hljs-keyword">int</span> val;
        LinkedNode* next;
        LinkedNode(<span class="hljs-keyword">int</span> val):val(val), next(<span class="hljs-literal">nullptr</span>){}
    };

    <span class="hljs-comment">// 初始化链表</span>
    MyLinkedList() {
        _dummyHead = <span class="hljs-keyword">new</span> LinkedNode(<span class="hljs-number">0</span>); <span class="hljs-comment">// 这里定义的头结点 是一个虚拟头结点，而不是真正的链表头结点</span>
        _size = <span class="hljs-number">0</span>;
    }

    <span class="hljs-comment">// 获取到第index个节点数值，如果index是非法数值直接返回-1， 注意index是从0开始的，第0个节点就是头结点</span>
    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{
        <span class="hljs-keyword">if</span> (index &gt; (_size - <span class="hljs-number">1</span>) || index &lt; <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;
        }
        LinkedNode* cur = _dummyHead-&gt;next;
        <span class="hljs-keyword">while</span>(index--){ <span class="hljs-comment">// 如果--index 就会陷入死循环</span>
            cur = cur-&gt;next;
        }
        <span class="hljs-keyword">return</span> cur-&gt;val;
    }

    <span class="hljs-comment">// 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtHead</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>{
        LinkedNode* newNode = <span class="hljs-keyword">new</span> LinkedNode(val);
        newNode-&gt;next = _dummyHead-&gt;next;
        _dummyHead-&gt;next = newNode;
        _size++;
    }

    <span class="hljs-comment">// 在链表最后面添加一个节点</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> </span>{
        LinkedNode* newNode = <span class="hljs-keyword">new</span> LinkedNode(val);
        LinkedNode* cur = _dummyHead;
        <span class="hljs-keyword">while</span>(cur-&gt;next != <span class="hljs-literal">nullptr</span>){
            cur = cur-&gt;next;
        }
        cur-&gt;next = newNode;
        _size++;
    }

    <span class="hljs-comment">// 在第index个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。</span>
    <span class="hljs-comment">// 如果index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span>
    <span class="hljs-comment">// 如果index大于链表的长度，则返回空</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addAtIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index, <span class="hljs-keyword">int</span> val)</span> </span>{
        <span class="hljs-keyword">if</span> (index &gt; _size) {
            <span class="hljs-keyword">return</span>;
        }
        LinkedNode* newNode = <span class="hljs-keyword">new</span> LinkedNode(val);
        LinkedNode* cur = _dummyHead;
        <span class="hljs-keyword">while</span>(index--) {
            cur = cur-&gt;next;
        }
        newNode-&gt;next = cur-&gt;next;
        cur-&gt;next = newNode;
        _size++;
    }

    <span class="hljs-comment">// 删除第index个节点，如果index 大于等于链表的长度，直接return，注意index是从0开始的</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteAtIndex</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span> </span>{
        <span class="hljs-keyword">if</span> (index &gt;= _size || index &lt; <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">return</span>;
        }
        LinkedNode* cur = _dummyHead;
        <span class="hljs-keyword">while</span>(index--) {
            cur = cur -&gt;next;
        }
        LinkedNode* tmp = cur-&gt;next;
        cur-&gt;next = cur-&gt;next-&gt;next;
        <span class="hljs-keyword">delete</span> tmp;
        _size--;
    }

    <span class="hljs-comment">// 打印链表</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printLinkedList</span><span class="hljs-params">()</span> </span>{
        LinkedNode* cur = _dummyHead;
        <span class="hljs-keyword">while</span> (cur-&gt;next != <span class="hljs-literal">nullptr</span>) {
            <span class="hljs-built_in">cout</span> &lt;&lt; cur-&gt;next-&gt;val &lt;&lt; <span class="hljs-string">" "</span>;
            cur = cur-&gt;next;
        }
        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    }
<span class="hljs-keyword">private</span>:
    <span class="hljs-keyword">int</span> _size;
    LinkedNode* _dummyHead;

};
</code></pre>
<h3><span id="关于环形链表和入口问题"> 关于环形链表和入口问题</span></h3>
<p>链表是否存在环可以用双指针快速判定，fast每次移动两个节点，slow一个节点，如果相遇（即fast == slow），则必定存在环</p>
<p>环的入口可以这样求：在相遇位置设置tmp1，在链表头结点处设置tmp2，每次走一个节点，相遇位置即为环入口节点</p>
<p>理论比较简单，详细可参见<a href="https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html">链表：环找到了，那入口呢？</a>,dalao写的非常详细</p>
]]></content>
  </entry>
  <entry>
    <title>智能电灯</title>
    <url>/blog/2022/06373cfef8.html</url>
    <content><![CDATA[<ul>
<li><a href="#esp8266%E5%AE%9E%E7%8E%B0%E6%99%BA%E8%83%BD%E7%94%B5%E7%81%AF">ESP8266实现智能电灯</a>
<ul>
<li><a href="#%E5%AE%9E%E9%AA%8C%E5%8E%9F%E7%90%86">实验原理</a></li>
<li><a href="#%E5%AE%9E%E9%AA%8C%E6%AD%A5%E9%AA%A4">实验步骤</a></li>
<li><a href="#%E6%BC%94%E7%A4%BA">演示</a></li>
</ul>
</li>
<li><a href="#esp32%E5%AE%9E%E7%8E%B0%E5%85%89%E7%85%A7%E4%BC%A0%E6%84%9F%E5%99%A8">Esp32实现光照传感器</a>
<ul>
<li><a href="#%E5%8E%9F%E7%90%86">原理</a></li>
<li><a href="#%E5%AE%9E%E9%AA%8C%E6%AD%A5%E9%AA%A4-1">实验步骤</a></li>
<li><a href="#%E9%AA%8C%E8%AF%81%E5%85%89%E7%85%A7%E4%BC%A0%E6%84%9F%E5%99%A8">验证光照传感器</a></li>
</ul>
</li>
<li><a href="#esp32%E7%9A%84%E7%BD%91%E5%85%B3%E5%AE%9E%E7%8E%B0">Esp32的网关实现</a>
<ul>
<li><a href="#%E9%83%A8%E7%BD%B2">部署</a></li>
<li><a href="#%E8%AE%BE%E7%BD%AE%E5%9C%BA%E6%99%AF%E8%81%94%E5%8A%A8">设置场景联动</a></li>
</ul>
</li>
<li><a href="#%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>
<ul>
<li><a href="#%E6%99%BA%E8%83%BD%E7%94%B5%E7%81%AF">智能电灯</a></li>
<li><a href="#%E5%85%89%E7%85%A7%E4%BC%A0%E6%84%9F%E5%99%A8">光照传感器</a></li>
<li><a href="#esp32%E7%9A%84%E7%BD%91%E5%85%B3%E5%AE%9E%E7%8E%B0">esp32的网关实现</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="esp8266实现智能电灯"> ESP8266实现智能电灯</span></h2>
<p>本实验目的是要通过腾讯云服务器和ESP8266芯片实现远程操纵一个LED灯的颜色和亮度</p>
<h3><span id="实验原理"> 实验原理</span></h3>
<p>首先在<a href="https://console.cloud.tencent.com/iotexplorer">腾讯云物联网开发平台</a>注册一个项目，并设置一个电灯产品，采用Wifi通信，然后在芯片上编写代码实现对LED灯的控制以及对信号的接收，然后用腾讯云配套小程序即可实现远程控制。</p>
<h3><span id="实验步骤"> 实验步骤</span></h3>
<ol>
<li>使用一根提供USB数据线将NodeMCU开发板和电脑连接起来，在命令行执行指令<code>pip install esptool</code>,然后执行<code>esptool read_mac·</code>查看开发板信息<br>
<img src="https://s2.loli.net/2022/06/07/WlHSxXRKCFIP4pD.png" alt="20220607190411"><br>
图中红框内即为使用的接口，如果缺少驱动可以通过驱动精灵下载</li>
<li>烧录固件，首先执行<code>esptool --port COM9 erase_flash</code>擦除flash芯片，接口名称要更换为自己的设备名称，然后执行<code>esptool --port COM9 write_flash --flash_size=detect 0 esp8266-20220117-v1.18.bin</code>重新烧录固件,之后重启即可</li>
<li>在<a href="https://console.cloud.tencent.com/iotexplorer">腾讯云物联网开发平台</a>注册一个项目，命名为智能家居<br>
<img src="https://s2.loli.net/2022/06/07/x1y9UAjHKvGMBVu.png" alt="20220607190919"></li>
<li>进入项目创建一个新产品’智能电灯’，设置几个参数
<ul>
<li>产品品类：直接选择“智能生活”–&gt;“电工照明”–&gt;“灯”</li>
<li>认证方式：选择密钥认证，这个比较简单，而且适合我们的开发板 NodeMCU。</li>
<li>通信方式：选择 Wi-Fi。</li>
<li>数据协议：选择物模型来解析数据。</li>
</ul>
</li>
<li>设置完成后其他默认配置就可以，这样即可生成一个新产品，之后再测试设备列表里面可以查看我们的设备信息<br>
<img src="https://s2.loli.net/2022/06/07/u68xodkXEBMLZ7S.png" alt="20220607191329"><br>
记录下设备名称、设备密钥、和产品ID，然后在调试标签页点击下图中二维码<br>
<img src="https://s2.loli.net/2022/06/07/5uzbKpsS7JDcRVZ.png" alt="20220607191456"><br>
然后利用<code>腾讯连连</code>小程序添加该设备即可</li>
<li>代码部分我们需要将产品信息的三元组和利用password生成器生成的Username和Password替换main文件里面对应部分，并完善Button.py和LED.py文件实现NodeMCU开发板引脚和LED灯的绑定</li>
<li>实现远程控制需要在 NodeMCU 开发板上安装一个 MQTT 客户端代码库 umqtt.simple 库。它来自MicroPython 官方维护的非内核标准库 micropython-lib</li>
<li>使用Putty，协议选择<code>Serial</code>，频率设置为<code>115200</code>,流控制选择<code>None</code>即可使用Putty来连接开发板，执行以下指令连接WiFi并安装库<pre class="highlight"><code class="py"> <span class="hljs-keyword">import</span> network
 
 wifi = network.WLAN(network.STA_IF)
 wifi.active(<span class="hljs-literal">True</span>)
 wifi.scan() <span class="hljs-comment">#扫描WIFI列表</span>
 wifi.isconnected() <span class="hljs-comment">#查看当前连接状态，理论上应该是False</span>
 wifi.connect(<span class="hljs-string">'Wi-Fi的SSID'</span>, <span class="hljs-string">'Wi-Fi密码'</span>) <span class="hljs-comment"># 连接对应WiFi</span>
 wifi.isconnected() <span class="hljs-comment">#再次查看状态，应该是True</span>

 <span class="hljs-keyword">import</span> upip
 upip.install(<span class="hljs-string">'micropython-umqtt.simple'</span>)
</code></pre>
</li>
<li>烧写代码，执行<code>ampy --port COM9 --baud 115200 --delay 0.5 put main.py</code>烧写main文件,同样方式烧写其他三个文件，烧写完成之后重启即可实现远程控制</li>
<li>按照下图连接LED灯和开发板<br>
<img src="https://s2.loli.net/2022/06/07/Gy7ZlrDf3OwXM2j.png" alt="20220607193258"><br>
要注意面包板的正负极，连接好如下图所示<br>
<img src="https://s2.loli.net/2022/06/07/o6sxtJjz9YInaD7.jpg" alt="1654601661755"></li>
<li>打开小程序即可操控LED灯</li>
</ol>
<h3><span id="演示"> 演示</span></h3>
<p>见演示视频Esp8266.mp4</p>
<h2><span id="esp32实现光照传感器"> Esp32实现光照传感器</span></h2>
<h3><span id="原理"> 原理</span></h3>
<p>因为光照传感器设备的部署位置比较灵活，不太可能像智能电灯一样连接房间里的电源线，所以我们要用一种比 Wi-Fi 功耗更低的通信技术。这样的话，就算使用电池供电，也可以长时间（一年以上）持续工作。因此选择 BLE 低功耗蓝牙技术。</p>
<p>BLE 设备可以在 4 种模式下工作：</p>
<ol>
<li>广播模式（Broadcaster），这里特指单纯的广播模式。这种模式下设备不可以被连接，只能够以一定的时间间隔把数据广播出来，供其他设备使用，比如手机扫描处理。蓝牙 Beacon 设备就是工作在这种模式。</li>
<li>从机模式（Peripheral），这种模式下设备仍然可以广播数据，同时也可以被连接。建立连接后，双方可以进行双向通信。比如你用手机连接一个具有蓝牙功能的体温计，这时体温计就是从机（Peripheral）。</li>
<li>主机模式（Central），这种模式下设备不进行广播，但是可以扫描周围的蓝牙广播包，发现其他设备，然后主动对这些设备发起连接。还是刚才那个例子，主动连接蓝牙体温计的手机就是主机（Central）角色。</li>
<li>观察者模式（Observer），这种模式下设备像主机模式一样，也不进行广播，而是扫描周围的蓝牙广播包，但是不同的地方是，它不会与从机设备建立连接。一般收集蓝牙设备广播包的网关就是在这种模式下工作的，它会将收集的广播数据通过网线、Wi-Fi 或者 4G 等蜂窝网络上传到云平台。</li>
</ol>
<h3><span id="实验步骤"> 实验步骤</span></h3>
<ol>
<li>
<p>用面包板连接NodeMCU和感光元件，如下图所示：<br>
<img src="https://s2.loli.net/2022/06/07/6b9H5JChOUswyFc.jpg" alt="1654603216377"></p>
</li>
<li>
<p>基于 PT550 环保型光敏二极管的光照传感器元器件，它的灵敏度更高，测量范围是 0Lux～6000Lux。这个元器件通过信号管脚输出模拟量，我们读取 NodeMCU ESP32 的 ADC 模数转换器（ADC0，对应GPIO36）的数值，就可以得到光照强度。这个数值越大，表示光照强度越大。因为 ADC 支持的最大位数是 12bit，所以这个数值范围是 0~4095 之间。这里我们粗略地按照线性关系做一个转换,代码如下：</p>
<pre class="highlight"><code class="python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightSensor</span><span class="hljs-params">()</span>:</span>

 <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, pin)</span>:</span>
     self.light = ADC(Pin(pin))

 <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">value</span><span class="hljs-params">(self)</span>:</span>
     value = self.light.read()
     print(<span class="hljs-string">"Light ADC value:"</span>,value)
     <span class="hljs-keyword">return</span> int(value / <span class="hljs-number">4095</span> * <span class="hljs-number">6000</span>)
</code></pre>
</li>
<li>
<p>和Esp8266一样，擦除固件，然后重装固件，将补充好的代码文件写入开发板</p>
<pre class="highlight"><code class="python">esptool --chip esp32 --port COM9 erase_flash <span class="hljs-comment">#擦除固件</span>
esptool --chip esp32 --port COM9 write_flash -z <span class="hljs-number">0x1000</span> esp32<span class="hljs-number">-20220117</span>-v1<span class="hljs-number">.18</span>.bin <span class="hljs-comment">#烧写固件</span>
</code></pre>
</li>
</ol>
<h3><span id="验证光照传感器"> 验证光照传感器</span></h3>
<p>使用nRF Connect，扫描到开发板如下：<br>
<img src="https://s2.loli.net/2022/06/07/4ADxrkJauIsqP85.jpg" alt="1654603649419"><br>
<img src="https://s2.loli.net/2022/06/07/XaBInrARLp9MySZ.jpg" alt="1654603668287"></p>
<h2><span id="esp32的网关实现"> Esp32的网关实现</span></h2>
<p>NodeMCU ESP32 开发板是蓝牙设备，本身无法直接联网上报数据，因此需要借助网关来实现联网的目的。</p>
<p>网关的主要功能是协议转换，一方面它需要接收低功耗蓝牙技术的光照传感器的广播数据，另一方面，它需要把解析的数据上传到云平台：<br>
<img src="https://s2.loli.net/2022/06/08/8Jy3nYC2ENzUhp4.png" alt="20220608150802"><br>
配置完虚拟机环境之后，虚拟机即充当了树莓派的作用</p>
<p>在<a href="https://console.cloud.tencent.com/iotexplorer">腾讯云物联网开发平台</a>同样按照上述方式配置一个Lightsensor_1部件，把光照值在<code>智能联动配置</code>里面设置为联动值，后面要用到光照值为灯泡提供光照数据，记录下三元组。</p>
<p>接下来补充<code>gateway.py</code>缺失部分代码，把三元组替换为我们的生成的三元组以及username和password,中间光照的loop函数调用bles成员函数读取扫描到的光照强度数值并上传扫描到的光照强度数值，代码如下：<br>
<img src="https://s2.loli.net/2022/06/08/4ITymNwzp87QEZx.png" alt="20220608151535"></p>
<h3><span id="部署"> 部署</span></h3>
<p>接下来就是可以让程序作为后台服务运行，首先打开虚拟机，执行以下几条命令,为虚拟机增添Pi Gateway服务</p>
<pre class="highlight"><code class="C++">$ sudo cp /<span class="hljs-built_in">home</span>/pi/pi-gateway/pi-gateway.service /etc/systemd/system/
$ sudo systemctl daemon-reload
$ sudo systemctl start pi-gateway
$ sudo systemctl status pi-gateway
$ sudo systemctl enable pi-gateway
</code></pre>
<p>执行之后，网关程序就在虚拟机上运行起来了，在腾讯云平台上可以看到，光照传感器变为在线状态。<br>
<img src="https://s2.loli.net/2022/06/08/BN6cl591dCTAwbH.png" alt="1654673109845"><br>
<img src="https://s2.loli.net/2022/06/08/afO8ilYupnDoxKc.jpg" alt="1654672929610"></p>
<h3><span id="设置场景联动"> 设置场景联动</span></h3>
<p>我们希望实现的联动场景是，基于环境的光照强度自动控制电灯的开和关。具体来说，这个目标可以拆解为 3 个自动触发任务：</p>
<ol>
<li>当光照强度大于 1024Lux 时，关闭电灯。</li>
<li>当光照强度小于 1024Lux 时，打开电灯。</li>
<li>至于光照强度等于 1024Lux 时，也打开电灯。</li>
</ol>
<p>在腾讯连连小程序上面添加上述三个场景<br>
<img src="https://s2.loli.net/2022/06/08/vMQ89oRFUXLNe5J.jpg" alt="1a43aac93a87fd3ab3fbc6785c875e0"></p>
<h2><span id="源代码"> 源代码</span></h2>
<h3><span id="智能电灯"> 智能电灯</span></h3>
<pre class="highlight"><code class="python"><span class="hljs-comment"># main.py</span>
<span class="hljs-keyword">from</span> LED <span class="hljs-keyword">import</span> Led
<span class="hljs-keyword">from</span> Button <span class="hljs-keyword">import</span> Button
<span class="hljs-keyword">from</span> Relay <span class="hljs-keyword">import</span> Relay

<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> uasyncio
<span class="hljs-keyword">import</span> network
<span class="hljs-keyword">import</span> ujson
<span class="hljs-keyword">from</span> umqtt.simple <span class="hljs-keyword">import</span> MQTTClient

<span class="hljs-string">"""
Wi-Fi Gateway : SSID and Password
"""</span>
WIFI_AP_SSID = <span class="hljs-string">"Xiaomi_301"</span>
WIFI_AP_PSW = <span class="hljs-string">"76780211"</span>

<span class="hljs-string">"""
QCloud Device Info
"""</span>
DEVICE_NAME = <span class="hljs-string">"Led_1"</span>
PRODUCT_ID = <span class="hljs-string">"XICW4V8C51"</span>
DEVICE_KEY = <span class="hljs-string">"sBgj/K/mb+/F01FYk5IJcw=="</span>

<span class="hljs-string">"""
MQTT topic
"""</span>
MQTT_CONTROL_TOPIC = <span class="hljs-string">"$thing/down/property/"</span>+PRODUCT_ID+<span class="hljs-string">"/"</span>+DEVICE_NAME
MQTT_CONTROL_REPLY_TOPIC = <span class="hljs-string">"$thing/up/property/"</span>+PRODUCT_ID+<span class="hljs-string">"/"</span>+DEVICE_NAME

led = Led(<span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>)
relay = Relay(<span class="hljs-number">16</span>)
button = Button(<span class="hljs-number">14</span>)

mqtt_client = <span class="hljs-literal">None</span>
color = <span class="hljs-number">0</span>   <span class="hljs-comment">#enum 0=red, 1=green, 2=blue</span>
name= <span class="hljs-string">""</span>    <span class="hljs-comment">#light name. it is optional</span>
brightness = <span class="hljs-number">100</span>  <span class="hljs-comment"># 0%~100%</span>
light_changed = <span class="hljs-literal">False</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wifi_connect</span><span class="hljs-params">(ssid, pwd)</span>:</span>
    sta = network.WLAN(network.STA_IF)
    sta.active(<span class="hljs-literal">True</span>)
    sta.connect(ssid, pwd)

    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> sta.isconnected():
        print(<span class="hljs-string">"Wi-Fi Connecting..."</span>)
        time.sleep_ms(<span class="hljs-number">500</span>)

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mqtt_callback</span><span class="hljs-params">(topic, msg)</span>:</span>
    <span class="hljs-keyword">global</span> led, relay, button
    <span class="hljs-keyword">global</span> color, name, brightness, light_changed

    print((topic, msg))
    msg_json = ujson.loads(msg)
    <span class="hljs-keyword">if</span> msg_json[<span class="hljs-string">'method'</span>] == <span class="hljs-string">'control'</span>:
        params = msg_json[<span class="hljs-string">'params'</span>]

        power_switch_tmp = params.get(<span class="hljs-string">'power_switch'</span>)
        <span class="hljs-keyword">if</span> power_switch_tmp <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
            power_switch = power_switch_tmp
            relay.set_state(power_switch)

        brightness_tmp = params.get(<span class="hljs-string">'brightness'</span>)
        <span class="hljs-keyword">if</span> brightness_tmp <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
            brightness = brightness_tmp

        color_tmp = params.get(<span class="hljs-string">'color'</span>)
        <span class="hljs-keyword">if</span> color_tmp <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
            color = color_tmp

        name_tmp = params.get(<span class="hljs-string">'name'</span>)
        <span class="hljs-keyword">if</span> name_tmp <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
            name = name_tmp

        <span class="hljs-keyword">if</span> brightness_tmp <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> color_tmp <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
            light_changed = <span class="hljs-literal">True</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mqtt_connect</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">global</span> mqtt_client

    MQTT_SERVER = PRODUCT_ID + <span class="hljs-string">".iotcloud.tencentdevices.com"</span>
    MQTT_PORT = <span class="hljs-number">1883</span>
    MQTT_CLIENT_ID = PRODUCT_ID+DEVICE_NAME
    MQTT_USER_NAME = <span class="hljs-string">"XICW4V8C51Led_1;12010126;DUQ2I;1655185098"</span>
    MQTTT_PASSWORD = <span class="hljs-string">"c8e0d3a2c3b568091747e5eba7de4a6edb6280dd20d1dade64efa6debd3492cd;hmacsha256"</span>

    mqtt_client = MQTTClient(MQTT_CLIENT_ID, MQTT_SERVER, MQTT_PORT,MQTT_USER_NAME, MQTTT_PASSWORD, <span class="hljs-number">60</span>)
    mqtt_client.set_callback(mqtt_callback)
    mqtt_client.connect()

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mqtt_report</span><span class="hljs-params">(client, color, name, switch, brightness)</span>:</span>

    msg = {
        <span class="hljs-string">"method"</span>: <span class="hljs-string">"report"</span>,
        <span class="hljs-string">"clientToken"</span>: <span class="hljs-string">"clientToken-2444532211"</span>,
        <span class="hljs-string">"params"</span>: {
            <span class="hljs-string">"color"</span>: color,
            <span class="hljs-string">"color_temp"</span>: <span class="hljs-number">0</span>,
            <span class="hljs-string">"name"</span>: name,
            <span class="hljs-string">"power_switch"</span>: switch,
            <span class="hljs-string">"brightness"</span>: brightness
        }
    }

    client.publish(MQTT_CONTROL_REPLY_TOPIC.encode(), ujson.dumps(msg).encode())

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">light_loop</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">global</span> led, relay, button
    <span class="hljs-keyword">global</span> color, name, brightness, light_changed

    switch_status_last = <span class="hljs-number">1</span>
    LED_status = <span class="hljs-number">0</span>

    color = <span class="hljs-number">2</span>   <span class="hljs-comment">#blue</span>
    brightness = <span class="hljs-number">100</span>    <span class="hljs-comment">#here 100% == 1</span>
    led.rgb_light(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, brightness/<span class="hljs-number">100.0</span>)

    <span class="hljs-comment"># 该循环为测试LED等的开闭循环</span>
    <span class="hljs-comment"># while True:</span>
    <span class="hljs-comment">#     relay.set_on()</span>
    <span class="hljs-comment">#     await uasyncio.sleep_ms(2000)</span>
    <span class="hljs-comment">#     relay.set_off()</span>
    <span class="hljs-comment">#     await uasyncio.sleep_ms(2000)</span>

    time_cnt = <span class="hljs-number">0</span>

    mqtt_client.subscribe(MQTT_CONTROL_TOPIC.encode())

    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        mqtt_client.check_msg()

        switch_status = button.state()
        LED_status = relay.state()
        <span class="hljs-keyword">if</span> switch_status != switch_status_last:
            <span class="hljs-keyword">if</span> switch_status == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> switch_status_last == <span class="hljs-number">1</span>:
                LED_status = <span class="hljs-number">0</span> <span class="hljs-keyword">if</span> LED_status <span class="hljs-keyword">else</span> <span class="hljs-number">1</span>
            relay.set_state(LED_status)
            switch_status_last = switch_status

        <span class="hljs-keyword">if</span> light_changed:
            light_changed = <span class="hljs-literal">False</span>
            led.rgb_light(<span class="hljs-number">255</span> <span class="hljs-keyword">if</span> color==<span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>, <span class="hljs-number">255</span> <span class="hljs-keyword">if</span> color==<span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>, <span class="hljs-number">255</span> <span class="hljs-keyword">if</span> color==<span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span>, brightness/<span class="hljs-number">100.0</span>)

        <span class="hljs-comment"># 调整为0.02*100=2秒上报一次</span>
        <span class="hljs-keyword">if</span> time_cnt &gt;= <span class="hljs-number">100</span>:
            mqtt_report(mqtt_client, color, name, LED_status, brightness)
            time_cnt = <span class="hljs-number">0</span>
        time_cnt = time_cnt+<span class="hljs-number">1</span>
        <span class="hljs-keyword">await</span> uasyncio.sleep_ms(<span class="hljs-number">20</span>)<span class="hljs-comment"># 时间间隔最好别超过50ms，否则按钮按下时间在休眠期间的话会无效，导致按钮很不好操作</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-keyword">global</span> mqtt_client

    <span class="hljs-comment"># Wi-Fi connection</span>
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">await</span> uasyncio.wait_for(wifi_connect(WIFI_AP_SSID, WIFI_AP_PSW), <span class="hljs-number">20</span>)
    <span class="hljs-keyword">except</span> uasyncio.TimeoutError:
        print(<span class="hljs-string">"wifi connected timeout!"</span>)

    <span class="hljs-comment"># MQTT connection</span>
    <span class="hljs-keyword">try</span>:
        <span class="hljs-keyword">await</span> uasyncio.wait_for(mqtt_connect(), <span class="hljs-number">20</span>)
    <span class="hljs-keyword">except</span> uasyncio.TimeoutError:
        print(<span class="hljs-string">"mqtt connected timeout!"</span>)

    <span class="hljs-keyword">await</span> uasyncio.gather(light_loop())

uasyncio.run(main())
</code></pre>
<pre class="highlight"><code class="python"><span class="hljs-comment"># Relay.py</span>

<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> ADC
<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Pin, Signal

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Relay</span><span class="hljs-params">()</span>:</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, pin)</span>:</span>
        self.relaypin = Pin(pin, Pin.OUT)
        self.relayled = Signal(self.relaypin, invert=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 将信号置反, 实现开与关和输入信号对应</span>
        <span class="hljs-comment">#self.last_status = 1</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_state</span><span class="hljs-params">(self, state)</span>:</span>
        self.relayled.value(state)
        <span class="hljs-comment">#self.relaypin.value(state)</span>
        <span class="hljs-comment">#self.last_status = state</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_on</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment">#self.relaypin.on() value: 1 but light is off</span>
        self.relayled.value(<span class="hljs-number">1</span>)
        print(<span class="hljs-string">'Relay on value: '</span> + str(self.relayled.value()))
    
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_off</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-comment"># self.relaypin.off() value: 0 but light is on</span>
        self.relayled.value(<span class="hljs-number">0</span>)
        print(<span class="hljs-string">'Relay off value: '</span> + str(self.relayled.value()))
    
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">state</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.relayled.value()
</code></pre>
<pre class="highlight"><code class="python"><span class="hljs-comment">#LED.py</span>

<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> PWM
<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Pin

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Led</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-string">"""
    创建LED类
    """</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, rpin, gpin, bpin, sfreq=<span class="hljs-number">1000</span>)</span>:</span>
        <span class="hljs-string">"""
        构造函数
        :param pin: 接LED的管脚，必须支持PWM
        :param freq: PWM的默认频率是1000
        """</span>
        <span class="hljs-comment">#以rpin, gpin, bpin为参数，使用Pin和PWM来绑定三个引脚来控制led灯的红黄蓝的三个PWM信号</span>
        self.led_red = PWM(Pin(rpin), freq = sfreq)
        self.led_green = PWM(Pin(gpin), freq = sfreq)
        self.led_blue = PWM(Pin(bpin), freq = sfreq)
		

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rgb_light</span><span class="hljs-params">(self, red, green, blue, brightness)</span>:</span>
		<span class="hljs-comment">#red green blue的范围在range(256)内，brightness的范围在[0,1]内，如果取值不在正确范围内，什么也不做</span>
        <span class="hljs-comment">#调用duty成员函数来设置三种颜色的占空比</span>
        <span class="hljs-keyword">if</span> brightness &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> brightness &lt;= <span class="hljs-number">1</span>:
            <span class="hljs-keyword">if</span> red <span class="hljs-keyword">in</span> range(<span class="hljs-number">256</span>):
                self.led_red.duty(int(red/<span class="hljs-number">255</span>*brightness*<span class="hljs-number">1023</span>))
            <span class="hljs-keyword">if</span> green <span class="hljs-keyword">in</span> range(<span class="hljs-number">256</span>):
                self.led_green.duty(int(green/<span class="hljs-number">255</span>*brightness*<span class="hljs-number">1023</span>))
            <span class="hljs-keyword">if</span> blue <span class="hljs-keyword">in</span> range(<span class="hljs-number">256</span>):
                self.led_blue.duty(int(blue/<span class="hljs-number">255</span>*brightness*<span class="hljs-number">1023</span>))
		

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deinit</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""
        析构函数
        """</span>
        self.led_red.deinit()
        self.led_green.deinit()
        self.led_blue.deinit()
</code></pre>
<pre class="highlight"><code class="python"><span class="hljs-comment"># Button.py</span>
<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> ADC 
<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Pin

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span><span class="hljs-params">()</span>:</span>
    
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, pin)</span>:</span>
        self.button = Pin(pin, Pin.IN)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">state</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self.button.value()

</code></pre>
<h3><span id="光照传感器"> 光照传感器</span></h3>
<pre class="highlight"><code class="python"><span class="hljs-comment"># main.py</span>
<span class="hljs-keyword">from</span> ble_lightsensor <span class="hljs-keyword">import</span> BLELightSensor
<span class="hljs-keyword">from</span> lightsensor <span class="hljs-keyword">import</span> LightSensor
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">import</span> bluetooth

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    ble = bluetooth.BLE()
    ble.active(<span class="hljs-literal">True</span>)
    ble_light = BLELightSensor(ble)

    light = LightSensor(<span class="hljs-number">36</span>)
    light_density = light.value()
    i = <span class="hljs-number">0</span>

    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        <span class="hljs-comment"># Write every second, notify every 10 seconds.</span>
        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">10</span>
        ble_light.set_light(light_density, notify=i == <span class="hljs-number">0</span>)
        print(<span class="hljs-string">"Light Lux:"</span>, light_density)

        light_density = light.value()
        time.sleep_ms(<span class="hljs-number">1000</span>)

<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:
    main()
</code></pre>
<pre class="highlight"><code class="python"><span class="hljs-comment"># ble_advertising.py</span>
<span class="hljs-comment"># Helpers for generating BLE advertising payloads.</span>

<span class="hljs-keyword">from</span> micropython <span class="hljs-keyword">import</span> const
<span class="hljs-keyword">import</span> struct
<span class="hljs-keyword">import</span> bluetooth

<span class="hljs-comment"># Advertising payloads are repeated packets of the following form:</span>
<span class="hljs-comment">#   1 byte data length (N + 1)</span>
<span class="hljs-comment">#   1 byte type (see constants below)</span>
<span class="hljs-comment">#   N bytes type-specific data</span>

_ADV_TYPE_FLAGS = const(<span class="hljs-number">0x01</span>)
_ADV_TYPE_NAME = const(<span class="hljs-number">0x09</span>)
_ADV_TYPE_UUID16_COMPLETE = const(<span class="hljs-number">0x3</span>)
_ADV_TYPE_UUID32_COMPLETE = const(<span class="hljs-number">0x5</span>)
_ADV_TYPE_UUID128_COMPLETE = const(<span class="hljs-number">0x7</span>)
_ADV_TYPE_UUID16_MORE = const(<span class="hljs-number">0x2</span>)
_ADV_TYPE_UUID32_MORE = const(<span class="hljs-number">0x4</span>)
_ADV_TYPE_UUID128_MORE = const(<span class="hljs-number">0x6</span>)
_ADV_TYPE_APPEARANCE = const(<span class="hljs-number">0x19</span>)
_ADV_TYPE_SERVICE_DATA = const(<span class="hljs-number">0x16</span>)


<span class="hljs-comment"># Generate a payload to be passed to gap_advertise(adv_data=...).</span>
<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">advertising_payload</span><span class="hljs-params">(limited_disc=False, br_edr=False, name=None, services=None, appearance=<span class="hljs-number">0</span>, service_data = None)</span>:</span>
    payload = bytearray()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_append</span><span class="hljs-params">(adv_type, value)</span>:</span>
        <span class="hljs-keyword">nonlocal</span> payload
        payload += struct.pack(<span class="hljs-string">"BB"</span>, len(value) + <span class="hljs-number">1</span>, adv_type) + value

    _append(
        _ADV_TYPE_FLAGS,
        struct.pack(<span class="hljs-string">"B"</span>, (<span class="hljs-number">0x01</span> <span class="hljs-keyword">if</span> limited_disc <span class="hljs-keyword">else</span> <span class="hljs-number">0x02</span>) + (<span class="hljs-number">0x18</span> <span class="hljs-keyword">if</span> br_edr <span class="hljs-keyword">else</span> <span class="hljs-number">0x04</span>)),
    )

    <span class="hljs-keyword">if</span> name:
        _append(_ADV_TYPE_NAME, name)

    <span class="hljs-keyword">if</span> services:
        <span class="hljs-keyword">for</span> uuid <span class="hljs-keyword">in</span> services:
            b = bytes(uuid)
            <span class="hljs-keyword">if</span> len(b) == <span class="hljs-number">2</span>:
                _append(_ADV_TYPE_UUID16_COMPLETE, b)
            <span class="hljs-keyword">elif</span> len(b) == <span class="hljs-number">4</span>:
                _append(_ADV_TYPE_UUID32_COMPLETE, b)
            <span class="hljs-keyword">elif</span> len(b) == <span class="hljs-number">16</span>:
                _append(_ADV_TYPE_UUID128_COMPLETE, b)

    <span class="hljs-comment"># See org.bluetooth.characteristic.gap.appearance.xml</span>
    <span class="hljs-keyword">if</span> appearance:
        _append(_ADV_TYPE_APPEARANCE, struct.pack(<span class="hljs-string">"&lt;h"</span>, appearance))

    <span class="hljs-keyword">if</span> service_data:
        _append(_ADV_TYPE_SERVICE_DATA, service_data)

    <span class="hljs-keyword">return</span> payload


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode_field</span><span class="hljs-params">(payload, adv_type)</span>:</span>
    i = <span class="hljs-number">0</span>
    result = []
    <span class="hljs-keyword">while</span> i + <span class="hljs-number">1</span> &lt; len(payload):
        <span class="hljs-keyword">if</span> payload[i + <span class="hljs-number">1</span>] == adv_type:
            result.append(payload[i + <span class="hljs-number">2</span> : i + payload[i] + <span class="hljs-number">1</span>])
        i += <span class="hljs-number">1</span> + payload[i]
    <span class="hljs-keyword">return</span> result


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode_name</span><span class="hljs-params">(payload)</span>:</span>
    n = decode_field(payload, _ADV_TYPE_NAME)
    <span class="hljs-keyword">return</span> str(n[<span class="hljs-number">0</span>], <span class="hljs-string">"utf-8"</span>) <span class="hljs-keyword">if</span> n <span class="hljs-keyword">else</span> <span class="hljs-string">""</span>


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode_services</span><span class="hljs-params">(payload)</span>:</span>
    services = []
    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> decode_field(payload, _ADV_TYPE_UUID16_COMPLETE):
        services.append(bluetooth.UUID(struct.unpack(<span class="hljs-string">"&lt;h"</span>, u)[<span class="hljs-number">0</span>]))
    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> decode_field(payload, _ADV_TYPE_UUID32_COMPLETE):
        services.append(bluetooth.UUID(struct.unpack(<span class="hljs-string">"&lt;d"</span>, u)[<span class="hljs-number">0</span>]))
    <span class="hljs-keyword">for</span> u <span class="hljs-keyword">in</span> decode_field(payload, _ADV_TYPE_UUID128_COMPLETE):
        services.append(bluetooth.UUID(u))
    <span class="hljs-keyword">return</span> services


<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">demo</span><span class="hljs-params">()</span>:</span>
    payload = advertising_payload(
        name=<span class="hljs-string">"micropython"</span>,
        services=[bluetooth.UUID(<span class="hljs-number">0x181A</span>), bluetooth.UUID(<span class="hljs-string">"6E400001-B5A3-F393-E0A9-E50E24DCCA9E"</span>)],
    )
    print(payload)
    print(decode_name(payload))
    print(decode_services(payload))


<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:
    demo()
</code></pre>
<pre class="highlight"><code class="python"><span class="hljs-comment"># ble_lightsensor.py</span>
<span class="hljs-keyword">import</span> bluetooth
<span class="hljs-keyword">import</span> struct
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">from</span> ble_advertising <span class="hljs-keyword">import</span> advertising_payload

<span class="hljs-keyword">from</span> micropython <span class="hljs-keyword">import</span> const

_IRQ_CENTRAL_CONNECT = const(<span class="hljs-number">1</span>)
_IRQ_CENTRAL_DISCONNECT = const(<span class="hljs-number">2</span>)
_IRQ_GATTS_INDICATE_DONE = const(<span class="hljs-number">20</span>)

_FLAG_READ = const(<span class="hljs-number">0x0002</span>)
_FLAG_NOTIFY = const(<span class="hljs-number">0x0010</span>)

_ADV_SERVICE_DATA_UUID = <span class="hljs-number">0xFE95</span>
_SERVICE_UUID_ENV_SENSE = <span class="hljs-number">0x181A</span>
_CHAR_UUID_AMBIENT_LIGHT = <span class="hljs-string">'FEC66B35-937E-4938-9F8D-6E44BBD533EE'</span>

<span class="hljs-comment"># Service environmental sensing</span>
_ENV_SENSE_UUID = bluetooth.UUID(_SERVICE_UUID_ENV_SENSE)
<span class="hljs-comment"># Characteristic ambient light density</span>
_AMBIENT_LIGHT_CHAR = (
    bluetooth.UUID(_CHAR_UUID_AMBIENT_LIGHT),
    _FLAG_READ | _FLAG_NOTIFY ,
)
_ENV_SENSE_SERVICE = (
    _ENV_SENSE_UUID,
    (_AMBIENT_LIGHT_CHAR,),
)

<span class="hljs-comment"># https://specificationrefs.bluetooth.com/assigned-values/Appearance%20Values.pdf</span>
_ADV_APPEARANCE_GENERIC_AMBIENT_LIGHT = const(<span class="hljs-number">1344</span>)

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BLELightSensor</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, ble, name=<span class="hljs-string">'Nodemcu'</span>)</span>:</span>
        self._ble = ble
        self._ble.active(<span class="hljs-literal">True</span>)
        self._ble.irq(self._irq)
        ((self._handle,),) = self._ble.gatts_register_services((_ENV_SENSE_SERVICE,))
        self._connections = set()
        time.sleep_ms(<span class="hljs-number">500</span>)
        self._payload = advertising_payload(
            name=name, services=[_ENV_SENSE_UUID], appearance=_ADV_APPEARANCE_GENERIC_AMBIENT_LIGHT
        )
        self._sd_adv = <span class="hljs-literal">None</span>
        self._advertise()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_irq</span><span class="hljs-params">(self, event, data)</span>:</span>
        <span class="hljs-comment"># Track connections so we can send notifications.</span>
        <span class="hljs-keyword">if</span> event == _IRQ_CENTRAL_CONNECT:
            conn_handle, _, _ = data
            self._connections.add(conn_handle)
        <span class="hljs-keyword">elif</span> event == _IRQ_CENTRAL_DISCONNECT:
            conn_handle, _, _ = data
            self._connections.remove(conn_handle)
            <span class="hljs-comment"># Start advertising again to allow a new connection.</span>
            self._advertise()
        <span class="hljs-keyword">elif</span> event == _IRQ_GATTS_INDICATE_DONE:
            conn_handle, value_handle, status = data

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_light</span><span class="hljs-params">(self, light_den, notify=False)</span>:</span>
        self._ble.gatts_write(self._handle, struct.pack(<span class="hljs-string">"!h"</span>, int(light_den)))
        self._sd_adv = self.build_mi_sdadv(light_den)
        self._advertise()
        <span class="hljs-keyword">if</span> notify:
            <span class="hljs-keyword">for</span> conn_handle <span class="hljs-keyword">in</span> self._connections:
                <span class="hljs-keyword">if</span> notify:
                    <span class="hljs-comment"># Notify connected centrals.</span>
                    self._ble.gatts_notify(conn_handle, self._handle)

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_mi_sdadv</span><span class="hljs-params">(self, density)</span>:</span>
        
        uuid = <span class="hljs-number">0xFE95</span>
        fc = <span class="hljs-number">0x0010</span>
        pid = <span class="hljs-number">0x0002</span>
        fcnt = <span class="hljs-number">0x01</span>
        mac = self._ble.config(<span class="hljs-string">'mac'</span>)
        objid = <span class="hljs-number">0x1007</span>
        objlen = <span class="hljs-number">0x03</span>
        objval = density

        <span class="hljs-comment">#service_data = struct.pack("&lt;3HB",uuid,fc,pid,fcnt)+mac+struct.pack("&lt;H2BH",objid,objlen,0,objval)</span>
        <span class="hljs-comment">#mac获取得到的是一个tuple对象 ex: (0, b'4\\x86]\\xb6\\xeb\\x0e'), 取第二个</span>
        service_data = struct.pack(<span class="hljs-string">"&lt;3HB"</span>,uuid,fc,pid,fcnt)+mac[<span class="hljs-number">1</span>]+struct.pack(<span class="hljs-string">"&lt;H2BH"</span>,objid,objlen,<span class="hljs-number">0</span>,objval)

        print(<span class="hljs-string">"Service Data:"</span>,service_data)
        
        <span class="hljs-keyword">return</span> advertising_payload(service_data=service_data)
        
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_advertise</span><span class="hljs-params">(self, interval_us=<span class="hljs-number">500000</span>)</span>:</span>
        self._ble.gap_advertise(interval_us, adv_data=self._payload)
        time.sleep_ms(<span class="hljs-number">100</span>)

        print(<span class="hljs-string">"sd_adv"</span>,self._sd_adv)
        <span class="hljs-keyword">if</span> self._sd_adv <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
            print(<span class="hljs-string">"sdddd_adv"</span>,self._sd_adv)
            self._ble.gap_advertise(interval_us, adv_data=self._sd_adv)
</code></pre>
<pre class="highlight"><code class="python"><span class="hljs-comment"># lightsensor.py</span>

<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> ADC
<span class="hljs-keyword">from</span> machine <span class="hljs-keyword">import</span> Pin

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightSensor</span><span class="hljs-params">()</span>:</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, pin)</span>:</span>
        self.light = ADC(Pin(pin))

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">value</span><span class="hljs-params">(self)</span>:</span>
        value = self.light.read()
        print(<span class="hljs-string">"Light ADC value:"</span>,value)
        <span class="hljs-keyword">return</span> int(value / <span class="hljs-number">4095</span> * <span class="hljs-number">6000</span>)
</code></pre>
<h3><span id="esp32的网关实现"> esp32的网关实现</span></h3>
<pre class="highlight"><code class="py"><span class="hljs-comment"># blescan.py</span>
<span class="hljs-keyword">import</span> time
<span class="hljs-keyword">from</span> threading <span class="hljs-keyword">import</span> Thread
<span class="hljs-keyword">from</span> interruptingcow <span class="hljs-keyword">import</span> timeout

<span class="hljs-keyword">from</span> bluepy.btle <span class="hljs-keyword">import</span> DefaultDelegate, Peripheral, Scanner, UUID, capitaliseName, BTLEInternalError
<span class="hljs-keyword">from</span> bluepy.btle <span class="hljs-keyword">import</span> BTLEDisconnectError, BTLEManagementError, BTLEGattError

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LightScanner</span><span class="hljs-params">()</span>:</span>
    SCAN_TIMEOUT = <span class="hljs-number">5</span>

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name)</span>:</span>
        self._name = name
    
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">status_update</span><span class="hljs-params">(self)</span>:</span>
        results = self._get_data()

        <span class="hljs-comment"># messages = [</span>
        <span class="hljs-comment">#     MqttMessage(</span>
        <span class="hljs-comment">#         topic=self.format_topic("property/light"),</span>
        <span class="hljs-comment">#         payload=results.lightlevel,</span>
        <span class="hljs-comment">#     )</span>
        <span class="hljs-comment"># ]</span>

        <span class="hljs-keyword">return</span> results

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_data</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-string">"""
        获取光照强度数据，并对超时异常进行处理
        """</span>
        scan_processor = ScanProcessor(self._name)
        scanner = Scanner().withDelegate(scan_processor)
        scanner.scan(self.SCAN_TIMEOUT, passive=<span class="hljs-literal">True</span>)

        <span class="hljs-keyword">with</span> timeout(
            self.SCAN_TIMEOUT,
            exception=Exception(
                <span class="hljs-string">"Retrieving data from {} device {} timed out after {} seconds"</span>.format(
                    repr(self), self._name, self.SCAN_TIMEOUT
                )
            ),
        ):
            <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> scan_processor.ready:
                time.sleep(<span class="hljs-number">1</span>)
            <span class="hljs-keyword">return</span> scan_processor.results

        <span class="hljs-keyword">return</span> scan_processor.results

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ScanProcessor</span>:</span>

    ADV_TYPE_SERVICE_DATA = <span class="hljs-number">0x16</span> <span class="hljs-comment">#设置数据格式为十六进制</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, name)</span>:</span>
        self._ready = <span class="hljs-literal">False</span>
        self._name = name
        self._results = MiBeaconData()

    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handleDiscovery</span><span class="hljs-params">(self, dev, isNewDev, _)</span>:</span>
        is_nodemcu = <span class="hljs-literal">False</span>
        <span class="hljs-keyword">if</span> isNewDev:
            <span class="hljs-keyword">for</span> (adtype, desc, value) <span class="hljs-keyword">in</span> dev.getScanData():
                <span class="hljs-comment">#Service Data UUID == 0xFE95 according to MiBeacon</span>
                <span class="hljs-keyword">if</span> adtype == self.ADV_TYPE_SERVICE_DATA <span class="hljs-keyword">and</span> value.startswith(<span class="hljs-string">"95fe"</span>):
                    print(<span class="hljs-string">"FOUND service Data:"</span>,adtype, desc, value)
                    <span class="hljs-comment">#Object ID == 0x1007 according to MiBeacon</span>
                    <span class="hljs-keyword">if</span> len(value) == <span class="hljs-number">38</span> <span class="hljs-keyword">and</span> value[<span class="hljs-number">26</span>:<span class="hljs-number">30</span>] == <span class="hljs-string">'0710'</span>:
                        light_den = int((value[<span class="hljs-number">-2</span>:] + value[<span class="hljs-number">-4</span>:<span class="hljs-number">-2</span>]), <span class="hljs-number">16</span>)
                        mac = value[<span class="hljs-number">14</span>:<span class="hljs-number">26</span>]

                        self._results.lightlevel = light_den
                        self._results.mac = mac

                        self.ready = <span class="hljs-literal">True</span>

<span class="hljs-meta">    @property</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mac</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self._mac

<span class="hljs-meta">    @property</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ready</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self._ready

<span class="hljs-meta">    @ready.setter</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ready</span><span class="hljs-params">(self, var)</span>:</span>
        self._ready = var

<span class="hljs-meta">    @property</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">results</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self._results

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MiBeaconData</span>:</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span>
        self._lightlevel = <span class="hljs-literal">None</span>
        self._mac = <span class="hljs-literal">None</span>

<span class="hljs-meta">    @property</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lightlevel</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self._lightlevel

<span class="hljs-meta">    @lightlevel.setter</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lightlevel</span><span class="hljs-params">(self, var)</span>:</span>
        self._lightlevel = var

<span class="hljs-meta">    @property</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mac</span><span class="hljs-params">(self)</span>:</span>
        <span class="hljs-keyword">return</span> self._mac

<span class="hljs-meta">    @mac.setter</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mac</span><span class="hljs-params">(self, var)</span>:</span>
        self._mac = var
</code></pre>
<pre class="highlight"><code class="py"><span class="hljs-comment"># gateway.py</span>
<span class="hljs-keyword">from</span> blescan <span class="hljs-keyword">import</span> LightScanner, MiBeaconData

<span class="hljs-keyword">import</span> time 
<span class="hljs-keyword">import</span> asyncio
<span class="hljs-keyword">import</span> json
<span class="hljs-keyword">import</span> uuid
<span class="hljs-keyword">import</span> paho.mqtt.client <span class="hljs-keyword">as</span> MQTTClient

<span class="hljs-string">"""
QCloud Device Info
"""</span>
DEVICE_NAME = <span class="hljs-string">"Lightsensor_1"</span>
PRODUCT_ID = <span class="hljs-string">"X2OQT7NRTP"</span>
DEVICE_KEY = <span class="hljs-string">"h0ftJ153maTi6jJWg9KCQA=="</span>

<span class="hljs-string">"""
MQTT topic
"""</span>
MQTT_CONTROL_TOPIC = <span class="hljs-string">"$thing/down/property/"</span>+PRODUCT_ID+<span class="hljs-string">"/"</span>+DEVICE_NAME
MQTT_CONTROL_REPLY_TOPIC = <span class="hljs-string">"$thing/up/property/"</span>+PRODUCT_ID+<span class="hljs-string">"/"</span>+DEVICE_NAME

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mqtt_callback</span><span class="hljs-params">(client, userdata, msg)</span>:</span>
    <span class="hljs-comment"># Callback</span>
    <span class="hljs-comment"># print(f"Received `{msg.payload.decode()}` from `{msg.topic}` topic")</span>
    <span class="hljs-keyword">return</span>

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mqtt_connect</span><span class="hljs-params">()</span>:</span>
    <span class="hljs-comment">#connect callback</span>
    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">on_connect</span><span class="hljs-params">(client, userdata, flags, rc)</span>:</span>
        <span class="hljs-keyword">if</span> rc == <span class="hljs-number">0</span>:
            print(<span class="hljs-string">"Connected to MQTT Broker!"</span>)
        <span class="hljs-keyword">else</span>:
            print(<span class="hljs-string">"Failed to connect, return code %d\n"</span>, rc)

    mqtt_client = <span class="hljs-literal">None</span>
    MQTT_SERVER = PRODUCT_ID + <span class="hljs-string">".iotcloud.tencentdevices.com"</span>
    MQTT_PORT = <span class="hljs-number">1883</span>
    MQTT_CLIENT_ID = PRODUCT_ID+DEVICE_NAME
    MQTT_USER_NAME = <span class="hljs-string">"X2OQT7NRTPLightsensor_1;12010126;DTXFZ;1655263739"</span>
    MQTTT_PASSWORD = <span class="hljs-string">"c02c6980d125f3846de11e1ab1d256f864e78f7377d2d4f94d992c5703a056c1;hmacsha256"</span>

    mqtt_client = MQTTClient.Client(MQTT_CLIENT_ID)
    mqtt_client.username_pw_set(MQTT_USER_NAME, MQTTT_PASSWORD)
    mqtt_client.on_connect = on_connect
    
    mqtt_client.connect(MQTT_SERVER, MQTT_PORT, <span class="hljs-number">60</span>)

    <span class="hljs-keyword">return</span> mqtt_client

<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mqtt_report</span><span class="hljs-params">(client, light_level)</span>:</span>
    client_token = <span class="hljs-string">"clientToken-"</span> + str(uuid.uuid4())

    msg = {
        <span class="hljs-string">"method"</span>: <span class="hljs-string">"report"</span>,
        <span class="hljs-string">"clientToken"</span>: client_token,
        <span class="hljs-string">"params"</span>: {
            <span class="hljs-string">"Illuminance"</span>: light_level
        }
    }

    client.publish(MQTT_CONTROL_REPLY_TOPIC, json.dumps(msg))

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">light_loop</span><span class="hljs-params">(mclient)</span>:</span>

    bles = LightScanner(<span class="hljs-string">'Nodemcu'</span>)

    mclient.subscribe(MQTT_CONTROL_TOPIC)
    mclient.on_message = mqtt_callback

    mclient.loop_start()

    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:
        <span class="hljs-keyword">try</span>:
            <span class="hljs-comment">#调用bles成员函数读取扫描到的光照强度数值</span>
            data = bles._get_data()
        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:
            print(<span class="hljs-string">"BLE SCAN error:"</span>, e)
            <span class="hljs-keyword">continue</span>
		<span class="hljs-comment">#上传扫描到的光照强度数值</span>
        mqtt_report(mclient, data)
        
        <span class="hljs-keyword">await</span> time.sleep(<span class="hljs-number">0.3</span>)

<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span>
    mqtt_client = <span class="hljs-literal">None</span>
    <span class="hljs-comment"># MQTT connection</span>
    <span class="hljs-keyword">try</span>:
        mqtt_client = <span class="hljs-keyword">await</span> asyncio.wait_for(mqtt_connect(), <span class="hljs-number">20</span>)
    <span class="hljs-keyword">except</span> asyncio.TimeoutError:
        print(<span class="hljs-string">"mqtt connected timeout!"</span>)

    <span class="hljs-keyword">if</span> mqtt_client <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:
        <span class="hljs-keyword">await</span> asyncio.gather(light_loop(mqtt_client))

asyncio.get_event_loop().run_until_complete(main())
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>C++中string、char *、char[]、const char*的转换</title>
    <url>/blog/2022/066dcc5737.html</url>
    <content><![CDATA[<blockquote>
<p>在C++中string、const char*、 char* 、char[]四者类型经常会需要转化。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E8%BD%AC%E5%8C%96%E6%96%B9%E6%B3%95">转化方法</a></li>
<li><a href="#c%E5%92%8Cc%E4%B8%ADchar%E5%92%8Cstring%E5%8C%BA%E5%88%AB">C和C++中char和string区别</a></li>
</ul>
<!-- tocstop -->
<h2><span id="转化方法"> 转化方法</span></h2>
<blockquote>
<ol>
<li>char*转string：可以直接赋值。</li>
<li>char[]转string：可以直接赋值。</li>
<li>char*转char[]：不能直接赋值，可以循环char*字符串逐个字符赋值,也可以使用strcpy_s等函数。</li>
<li>string转char[]:不能直接赋值，可以循环char*字符串逐个字符赋值,也可以使用strcpy_s等函数</li>
<li>string转char*:调用string对象的c_str函数或data函数或copy函数。</li>
<li>char[]转char*:直接赋值即可。<br>
使用时，要对源格式和目标格式进行初始化。源格式赋值为具体的内容，目标格式赋值为空。</li>
</ol>
</blockquote>
<p><img src="https://s2.loli.net/2022/06/08/75fiJavz1NIknOC.png" alt="20220608193144"></p>
<p>总结如下：<br>
A. 变成string,直接赋值。<br>
B. char[]变成别的，直接赋值。<br>
C. char*变const char*容易，const char*变char*麻烦。&lt;const_cast&gt;&lt;char*&gt;(const char*);<br>
D. string变char*要通过const char*中转。<br>
E. 变成char[]。string逐个赋值，char* const char* strncpy_s()</p>
<h2><span id="c和c中char和string区别"> C和C++中char和string区别</span></h2>
<p>在C语言中，string 是定义一个字符串，存储的是一段如“abcd”的数据，而且最后还有一个结束符’\0’;</p>
<p>char 是定义一个字符，存储一个字符，占一个字节。</p>
<p>在C++中，string有两种，一种是字符串char[]，另外一种是封装好的字符串类，要区别理解。例如’a’是char, "a"是char string，这两者都是普通的字符和字符串，和C语言中没什么不同值得注意的是后者包含两个字符，末尾有一个隐身的’\0’</p>
<p>而 string str = “a” 是C++ 封装好的string。C<ins>中的char string和string不是一回事。当用到了"string"这个关键词，就不是普通的字符串，而是用到了封装后的类。<br>
在C</ins>中，char仍然是一个primitive type（原始类型），而string已经经过封装，成为了一个class（类）用到它时，我们需要 #include <string>，它是C++ Standard Library （C++标准库）的一部分。</string></p>
<blockquote>
<p>参考：<br>
<a href="https://blog.csdn.net/yejinxiong001/article/details/78436310">c/c<ins>中string与char的区别</ins></a><br>
<a href="https://blog.csdn.net/hebbely/article/details/79577880">C中string、char *、char[]、const char*的转换</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>VS Code集成终端字体修改 &amp; 字体颜色、大小修改方法</title>
    <url>/blog/2022/068a4c5ed0.html</url>
    <content><![CDATA[<p>打开VScode，<code>Ctrl + ,</code>或者<code>设置 -&gt; 设置</code>搜索<code>workbenck</code>，如下图：<br>
<img src="https://s2.loli.net/2022/06/02/nsmiWrDHCwZ8GzQ.png" alt><br>
点击<code>Edit in settings.json</code>在配置文件最后加上以下参数：</p>
<pre class="highlight"><code class="json"><span class="hljs-comment">//终端颜色配置</span>
<span class="hljs-string">"workbench.colorCustomizations"</span> : {
    <span class="hljs-comment">//可以将鼠标放到下面的色号上根据自己的偏好进行选择</span>
	<span class="hljs-attr">"terminal.foreground"</span> : <span class="hljs-string">"#37FF13"</span>,<span class="hljs-comment">//字体颜色</span>
 	<span class="hljs-attr">"terminal.background"</span> : <span class="hljs-string">"#2b2424"</span><span class="hljs-comment">//背景颜色</span>
},

<span class="hljs-string">"terminal.integrated.cursorBlinking"</span>: <span class="hljs-literal">true</span>,
<span class="hljs-string">"terminal.integrated.lineHeight"</span>: <span class="hljs-number">1.2</span>,
<span class="hljs-string">"terminal.integrated.letterSpacing"</span>: <span class="hljs-number">0.1</span>,
<span class="hljs-string">"terminal.integrated.fontSize"</span>: <span class="hljs-number">14</span>, <span class="hljs-comment">//字体大小设置</span>
<span class="hljs-string">"terminal.integrated.fontFamily"</span>: <span class="hljs-string">"Lucida Console"</span>, <span class="hljs-comment">//字体设置</span>
</code></pre>
<p>保存即可</p>
<p>具体颜色可根据个人喜好配置，如果想恢复默认颜色或者背景，删除该行代码即可</p>
<p>配置之后效果如下：<br>
<img src="https://s2.loli.net/2022/06/02/Fky9ocazPMngN3Q.png" alt></p>
]]></content>
      <tags>
        <tag>VSCode</tag>
      </tags>
  </entry>
  <entry>
    <title>利用RSA加密算法和MD5哈希算法实现加密通信（C++）</title>
    <url>/blog/2022/052824aa7.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为作者个人作业，仅供参考，转载请注明出处</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E5%AE%9E%E9%AA%8C%E7%9B%AE%E7%9A%84">实验目的</a></li>
<li><a href="#%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82">实验要求</a></li>
<li><a href="#%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF">设计思路</a></li>
<li><a href="#%E5%AE%9E%E9%AA%8C%E8%AE%BE%E8%AE%A1%E6%B5%81%E7%A8%8B%E5%9B%BE">实验设计流程图</a></li>
<li><a href="#md5%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">MD5算法实现身份验证</a></li>
<li><a href="#rsa%E5%AE%9E%E7%8E%B0%E4%BF%A1%E6%81%AF%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86">RSA实现信息加密解密</a>
<ul>
<li><a href="#rsa%E5%8E%9F%E7%90%86">RSA原理</a></li>
<li><a href="#%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B">实现过程</a></li>
</ul>
</li>
<li><a href="#%E4%B8%BB%E7%A8%8B%E5%BA%8F">主程序</a></li>
<li><a href="#%E5%AE%9E%E9%AA%8C%E6%BC%94%E7%A4%BA%E6%88%AA%E5%9B%BE">实验演示截图</a></li>
<li><a href="#%E6%BA%90%E4%BB%A3%E7%A0%81">源代码</a>
<ul>
<li><a href="#%E6%96%87%E4%BB%B6%E6%A0%91">文件树</a></li>
<li><a href="#md5h">MD5.h</a></li>
<li><a href="#generatekeycpp">generateKey.cpp</a></li>
<li><a href="#serverh">Server.h</a></li>
<li><a href="#servercpp">Server.cpp</a></li>
<li><a href="#clienth">Client.h</a></li>
<li><a href="#clientcpp">Client.cpp</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="实验目的"> 实验目的</span></h2>
<p>在保密通信过程中，对消息完整性的检验和对消息来源的认证，是一个非常重要的问题，本次大作业的内容为：</p>
<p>设计一个协议，利用rsa公钥加密算法和MD5哈希算法，实现对消息的完整性检验和发送者身份验证的功能，并编程实现这个协议。程序的要求是假设通讯双方为A和B，并假设发方拥有自己的RSA公钥PKA和私钥SKA ，同时收方B已经通过某种方式知道了发方的公钥PKA  。协议要求对发方A发来的消息，收方B通过检验，能够确定：</p>
<ol>
<li>B收到的消息是完整的，即消息在传送过程中没有遭到非法修改；</li>
<li>B收到的消息来源是真实的，即该消息的确是由A发来的，而不是由其他人伪造的。</li>
</ol>
<h2><span id="实验要求"> 实验要求</span></h2>
<ol>
<li>分别编写两个程序，一个为发方程序，一个为收方程序，写清楚两个程序分别要完成的功能，并能够在两个程序间进行通讯。</li>
<li>大作业的提交方式同实验报告的提交，也就是说既要提交程序实现的说明文档，也要提交源代码和可执行程序。</li>
</ol>
<h2><span id="设计思路"> 设计思路</span></h2>
<p>RSA公钥加密算法可以实现对消息的加密和解密，而MD5仅可对消息进行加密处理，且在之前的实验中经过测试均满足雪崩效应，因此初步思路是：</p>
<ol>
<li>利用MD5算法实现对发送方和接收方的身份确认
<ul>
<li>双方均知道对方身份，因此可以发送方对自己的ID使用MD5算法进行加密，并把加密后的密文ID发送给接收方</li>
<li>接收方接收到发送方的密文ID之后，利用自己已知的发送方ID（ID双方均已知，攻击者未知）同样对发送方原始ID进行MD5加密，并与发送方发送的密文ID进行比较，
<ul>
<li>如果一致，由于MD5算法具有雪崩效应，因此可认为发送方即为本人</li>
<li>如果不一致，则立即中止对话，保证信息的安全性</li>
</ul>
</li>
<li>身份确认之后即可进行消息发送接收</li>
</ul>
</li>
<li>身份确认之后利用RSA公钥体系对双方发送消息进行加密和解密
<ul>
<li>双方输入消息，利用RSA对消息进行加密，并把加密后消息使用TCP协议进行发送，这样即便消息被截获没有密钥也无法破译</li>
<li>接收方接收到密文后，利用密钥对其进行解密即可获取消息内容，同样也可发送消息<br>
利用TCP协议进行消息的收发，这里仅用来实现发送消息，TCP协议的安全性暂不考虑</li>
</ul>
</li>
</ol>
<h2><span id="实验设计流程图"> 实验设计流程图</span></h2>
<p>实验流程图如下：<br>
<img src="https://s2.loli.net/2022/06/02/HJvAI4Raqdk1nxi.png" alt="1654167804"></p>
<p>RSA算法流程图如下：</p>
<p><img src="https://s2.loli.net/2022/06/02/oHS6y7IKfLsnj2D.png" alt="20220602191118"></p>
<p>MD5算法流程图如下：</p>
<p><img src="https://s2.loli.net/2022/05/23/Uj4DuPtrp7wq82v.png" alt="result4"></p>
<h2><span id="md5算法实现身份验证"> MD5算法实现身份验证</span></h2>
<ol>
<li>
<p>获取输入，该模块用于获取一段明文字符，不定长</p>
</li>
<li>
<p>对获取的不定长字符串进行填充,使其字节长度满足n*512 + 448, 填充规则是第一位填充1，后续填充0，直至满足上述条件，最后再用一个64为二进制字符串表示明文长度，这样填充之后长度为(n + 1)*512</p>
<pre class="highlight"><code class="C++"><span class="hljs-comment">// 填充字符串</span>
<span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; <span class="hljs-title">padding</span><span class="hljs-params">(<span class="hljs-built_in">string</span> src)</span> </span>{
    <span class="hljs-comment">// 以512位,64个字节为一组</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num = ((src.length() + <span class="hljs-number">8</span>) / <span class="hljs-number">64</span>) + <span class="hljs-number">1</span>;
    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; <span class="hljs-title">rec</span><span class="hljs-params">(num*<span class="hljs-number">16</span>)</span></span>;
    strlength = num*<span class="hljs-number">16</span>;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; src.length(); i++){
        <span class="hljs-comment">// 一个unsigned int对应4个字节，保存4个字符信息</span>
        rec[i&gt;&gt;<span class="hljs-number">2</span>] |= (<span class="hljs-keyword">int</span>)(src[i]) &lt;&lt; ((i % <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);
    }
    <span class="hljs-comment">// 补充1000...000</span>
    rec[src.length() &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> &lt;&lt; ((src.length() % <span class="hljs-number">4</span>)*<span class="hljs-number">8</span>));
    <span class="hljs-comment">// 填充原文长度</span>
    rec[rec.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>] = (src.length() &lt;&lt; <span class="hljs-number">3</span>);
    <span class="hljs-keyword">return</span> rec;
}
</code></pre>
</li>
<li>
<p>字符串分块函数，将上述填充之后的字符串分割为L个512字节长度的字符串</p>
</li>
<li>
<p>循环压缩函数：对每个512-bit分组进行64轮迭代运算</p>
<ol>
<li>
<p>对分组（A, B, C, D）中的A进行迭代运算<br>
公式为：A &lt;= B + ((A + f(B,C,D) + X[k] + T[i])) &lt;&lt; S[i]<br>
其中：</p>
<ul>
<li>A,B,C,D代表MD5缓冲区当前的数值</li>
<li>f为轮函数，1-16轮迭代使用F函数，17-32轮迭代使用G函数，33-48轮迭 代使用H函数，49-64轮迭代使用I函数</li>
</ul>
<pre class="highlight"><code class="C++"><span class="hljs-comment">// F函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
    <span class="hljs-keyword">return</span> (b &amp; c) | ((~b) &amp; d);
}
<span class="hljs-comment">// G函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">G</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
    <span class="hljs-keyword">return</span> (b &amp; d) | (c &amp; (~d));
}
<span class="hljs-comment">// H函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">H</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
    <span class="hljs-keyword">return</span> b ^ c ^ d;
}
<span class="hljs-comment">// I函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">I</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
    <span class="hljs-keyword">return</span> c ^ (b | (~d));
}
<span class="hljs-comment">// 移位操作函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">shift</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n)</span> </span>{
    <span class="hljs-keyword">return</span> (a &lt;&lt; n) | (a &gt;&gt; (<span class="hljs-number">32</span> - n));
}
</code></pre>
<ul>
<li>X[k]代表当前处理消息分组的第k个32位字，X[k]由第n轮迭代对应的顺序表决定</li>
<li>T[i]代表T表的第i项的值，T[i] = int(2^32 * |sin(i)|)</li>
<li>S[i]对应第i轮的左循环移位的s值</li>
</ul>
</li>
<li>
<p>对分组（A,B,C,D）作循环轮换<br>
公式为：（B,C,D,A）&lt;=（A,B,C,D）</p>
</li>
<li>
<p>按照1， 2步骤进行四轮循环压缩</p>
</li>
</ol>
<pre class="highlight"><code class="C++">    <span class="hljs-comment">// 循环压缩</span>
 <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">iterateFunc</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* X, <span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span> = <span class="hljs-number">16</span>)</span> </span>{
     <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a = tempA,
                  b = tempB,
                  c = tempC,
                  d = tempD,
                  rec = <span class="hljs-number">0</span>,
                  g, k;
     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++) {
         <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">16</span>) {
             <span class="hljs-comment">// F迭代</span>
             g = F(b, c, d);
             k = i;
         }
         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">32</span>) {
             <span class="hljs-comment">// G迭代</span>
             g = G(b, c, d);
             k = (<span class="hljs-number">1</span> + <span class="hljs-number">5</span>*i) % <span class="hljs-number">16</span>;
         }
         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">48</span>) {
             <span class="hljs-comment">// H迭代</span>
             g = H(b, c, d);
             k = (<span class="hljs-number">5</span> + <span class="hljs-number">3</span>*i) % <span class="hljs-number">16</span>;
         }
         <span class="hljs-keyword">else</span> {
             <span class="hljs-comment">// I迭代</span>
             g = I(b, c, d);
             k = (<span class="hljs-number">7</span>*i) % <span class="hljs-number">16</span>;
         }
         rec = d;
         d = c;
         c = b;
         b = b + shift(a + g + X[k] + T[i], s[i]);
         a = rec;
     }
     tempA += a;
     tempB += b;
     tempC += c;
     tempD += d;
 }
</code></pre>
</li>
<li>
<p>MD5编码主函数：用于调用前面的功能函数对明文字符串进行MD5编码</p>
<ol>
<li>输入待加密的明文字符串</li>
<li>对明文字符串进行填充</li>
<li>对填充后的明文字符串进行分块（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Y</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">Y_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>）</li>
<li>使用预设的初始值初始化MD5缓冲区间（IV）</li>
<li>对各个分块字符串利用公式HMD5(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><msub><mi>V</mi><mo stretchy="false">(</mo></msub><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">CV_(i-1), Y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mopen mtight">(</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)进行循环压缩，运算结果作为下一块的输入（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">CV_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）</li>
<li>当所有的分块迭代完成后，输出结果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><msub><mi>V</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">CV_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，L表示最后一个分块的序号</li>
</ol>
<pre class="highlight"><code class="C++"><span class="hljs-comment">// MD5加密函数</span>
 <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">encode</span><span class="hljs-params">(<span class="hljs-built_in">string</span> src)</span> </span>{
     <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; rec = padding(src);
     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; strlength/<span class="hljs-number">16</span>; i++) {
         <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num[<span class="hljs-number">16</span>];
         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++) {
             num[j] = rec[i*<span class="hljs-number">16</span>+j];
         }
         iterateFunc(num, <span class="hljs-number">16</span>);
     }
     <span class="hljs-keyword">return</span> format(tempA) + format(tempB) + format(tempC) + format(tempD);
 }
</code></pre>
</li>
</ol>
<h2><span id="rsa实现信息加密解密"> RSA实现信息加密解密</span></h2>
<h3><span id="rsa原理"> RSA原理</span></h3>
<ol>
<li>公钥<br>
选择两个不同的大素数p和q，n是二者的乘积，即$ n=pq <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">，</mi><mi mathvariant="normal">使</mi></mrow><annotation encoding="application/x-tex">，
 使</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">使</span></span></span></span>$ \varphi (n)=(p-1)(q-1) $$为欧拉函数。<br>
随机选取正整数e，使其满足$ gcd(e,\varphi (n))=1 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">，</mi><mi mathvariant="normal">即</mi><mi>e</mi><mi mathvariant="normal">和</mi></mrow><annotation encoding="application/x-tex">，即e和</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">即</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">和</span></span></span></span>\phi (n)$互素，则将(e,n)作为公钥。</li>
<li>私钥<br>
求出正数d，使其满足$ e \times d \equiv 1mod\varphi (n) $，则将(d,n)作为私钥。</li>
<li>加密算法<br>
对于明文m，由$ c \equiv m^emodn $，得到密文c，这里需要注意明文的分组方法。</li>
<li>解密算法<br>
对于密文c，由$ m \equiv c^dmodn $，得到明文m。</li>
</ol>
<h3><span id="实现过程"> 实现过程</span></h3>
<p>C++中大数需要用到gmp库,简单说下怎么安装</p>
<ul>
<li>
<p>Linux一行命令的事情</p>
<pre class="highlight"><code class="C++">sudo apt-<span class="hljs-built_in">get</span> install libgmp-dev
</code></pre>
</li>
<li>
<p>Windows下需要MinGW,打开<code>MinGW Installation Manager</code>,左侧<code>All Packages</code>选中，然后找到<code>MinGW-gmp</code>，版本的话选择<code>dev</code>，右键<code>Mark for Installation</code>，然后菜单栏<code>Installation</code>选择<code>Apply Changes</code>即可，等待安装即可。<br>
<img src="https://s2.loli.net/2022/06/02/WMX1Tlh4Q2aUpLb.png" alt="20220602224307"></p>
</li>
</ul>
<ol>
<li>首先定义一个密钥对结构体：</li>
</ol>
<pre class="highlight"><code class="C++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key_pair</span> {</span>
    <span class="hljs-built_in">string</span> n;
    <span class="hljs-built_in">string</span> d;
    <span class="hljs-keyword">int</span> e;
};
</code></pre>
<ol start="2">
<li>利用GMP的素性测试和数据生成完成两个大素数p，q的生成</li>
</ol>
<pre class="highlight"><code class="C++"><span class="hljs-comment">//生成两个大素数</span>
<span class="hljs-function"><span class="hljs-keyword">mpz_t</span> * <span class="hljs-title">gen_primes</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">gmp_randstate_t</span> grt;
    gmp_randinit_default(grt);
    gmp_randseed_ui(grt, time(<span class="hljs-literal">NULL</span>));
    
    <span class="hljs-keyword">mpz_t</span> key_p, key_q;
    mpz_init(key_p);
    mpz_init(key_q);
 
    mpz_urandomb(key_p, grt, KEY_LENGTH / <span class="hljs-number">2</span>);
    mpz_urandomb(key_q, grt, KEY_LENGTH / <span class="hljs-number">2</span>); <span class="hljs-comment">//随机生成两个大整数</span>
 
    <span class="hljs-keyword">mpz_t</span> * result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">mpz_t</span>[<span class="hljs-number">2</span>];
    mpz_init(result[<span class="hljs-number">0</span>]);
    mpz_init(result[<span class="hljs-number">1</span>]);
 
    mpz_nextprime(result[<span class="hljs-number">0</span>], key_p);  <span class="hljs-comment">//使用GMP自带的素数生成函数</span>
    mpz_nextprime(result[<span class="hljs-number">1</span>], key_q);
 
    mpz_clear(key_p);
    mpz_clear(key_q);
 
    <span class="hljs-keyword">return</span> result;    
}
</code></pre>
<ol start="3">
<li>根据RSA原理生成密钥对</li>
</ol>
<pre class="highlight"><code class="C++"><span class="hljs-comment">//生成密钥对</span>
<span class="hljs-function">key_pair * <span class="hljs-title">gen_key_pair</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">mpz_t</span> * primes = gen_primes();
 
    <span class="hljs-keyword">mpz_t</span> key_n, key_e, key_f;
    mpz_init(key_n);
    mpz_init(key_f);
    mpz_init_set_ui(key_e, <span class="hljs-number">65537</span>);    <span class="hljs-comment">//设置e为65537</span>
 
    mpz_mul(key_n, primes[<span class="hljs-number">0</span>], primes[<span class="hljs-number">1</span>]);        <span class="hljs-comment">//计算n=p*q</span>
    mpz_sub_ui(primes[<span class="hljs-number">0</span>], primes[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>);        <span class="hljs-comment">//p=p-1</span>
    mpz_sub_ui(primes[<span class="hljs-number">1</span>], primes[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>);        <span class="hljs-comment">//q=q-1</span>
    mpz_mul(key_f, primes[<span class="hljs-number">0</span>], primes[<span class="hljs-number">1</span>]);        <span class="hljs-comment">//计算欧拉函数φ(n)=(p-1)*(q-1)</span>
 
    <span class="hljs-keyword">mpz_t</span> key_d;    
    mpz_init(key_d);
    mpz_invert(key_d, key_e, key_f);   <span class="hljs-comment">//计算数论倒数</span>
 
    key_pair * result = <span class="hljs-keyword">new</span> key_pair;
 
    <span class="hljs-keyword">char</span> * buf_n = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
    <span class="hljs-keyword">char</span> * buf_d = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
 
    mpz_get_str(buf_n, BASE, key_n);
    result-&gt;n = buf_n;
    mpz_get_str(buf_d, BASE, key_d);
    result-&gt;d = buf_d;
    result-&gt;e = <span class="hljs-number">65537</span>;
 
    mpz_clear(primes[<span class="hljs-number">0</span>]);   <span class="hljs-comment">//释放内存</span>
    mpz_clear(primes[<span class="hljs-number">1</span>]);
    mpz_clear(key_n);
    mpz_clear(key_d);
    mpz_clear(key_e);
    mpz_clear(key_f);
    <span class="hljs-keyword">delete</span> []primes;

    <span class="hljs-keyword">return</span> result;
}
</code></pre>
<ol start="4">
<li>加密函数</li>
</ol>
<pre class="highlight"><code class="C++"><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">encrypt</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * plain_text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_n, <span class="hljs-keyword">int</span> key_e)</span>  </span>{
    <span class="hljs-keyword">mpz_t</span> M, C1, n;
    mpz_init_set_str(M, plain_text, BASE); 
    mpz_init_set_str(n, key_n, BASE);
    mpz_init_set_ui(C1, <span class="hljs-number">0</span>);
 
    mpz_powm_ui(C1, M, key_e, n);    <span class="hljs-comment">//使用GMP中模幂计算函数</span>
 
    <span class="hljs-keyword">char</span> * result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
    mpz_get_str(result, BASE, C1);
 
    <span class="hljs-keyword">return</span> result;
}
</code></pre>
<ol start="5">
<li>解密函数</li>
</ol>
<pre class="highlight"><code class="C++"><span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * cipher_text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_n, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_d)</span>  </span>{
    <span class="hljs-keyword">mpz_t</span> M, C1, n, d;
    mpz_init_set_str(C1, cipher_text, BASE); 
    mpz_init_set_str(n, key_n, BASE);
    mpz_init_set_str(d, key_d, BASE);
    mpz_init(M);
 
    mpz_powm(M, C1, d, n);   <span class="hljs-comment">//使用GMP中的模幂计算函数</span>
 
    <span class="hljs-keyword">char</span> * result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
    mpz_get_str(result, BASE, M);
 
    <span class="hljs-keyword">return</span> result;
}
</code></pre>
<h2><span id="主程序"> 主程序</span></h2>
<ol>
<li>对A,B双方分别创建套接字，采用TCP，IPv4协议，输入自己的昵称之后经过TCP的三次握手即可连接成功</li>
<li>接下来进入身份确认环节，对AB双方发送的身份信息进行确认，利用对方昵称生成MD5密文，对比发送密文即可判断</li>
</ol>
<pre class="highlight"><code class="C++">    MD5 tmp_name;
    <span class="hljs-built_in">string</span> tmp_s = tmp_name.encode(client_name_tmp);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tmp_s.length(); i++) {
        client_name[i] = tmp_s[i];
    }

    send_len = send(client, client_name, <span class="hljs-keyword">sizeof</span>(client_name), <span class="hljs-number">0</span>);
    receive_len = recv(client, server_name, <span class="hljs-keyword">sizeof</span>(server_name), <span class="hljs-number">0</span>);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY|FOREGROUND_RED);
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">if</span> (IdConfirm(server_name, <span class="hljs-string">"lkp1"</span>)) {
        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"ID Confirm success, Let's chatting..."</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"ID Confirm failed, Conversation aborted..."</span>;
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
</code></pre>
<ol start="3">
<li>身份确认成功之后即可进入发送环节，双方回合制发送信息
<ul>
<li>如果输入12582则表示当前回合结束，对方可发送信息</li>
<li>如果输入12581则表示想要退出聊天，则发送双方结束本次聊天</li>
<li>如果是其他信息，则相对信息进行加密然后发送，为了演示加密过程，在发送信息下方打印出密文和明文详情</li>
</ul>
</li>
</ol>
<h2><span id="实验演示截图"> 实验演示截图</span></h2>
<p>为了演示清晰，程序对文字进行了颜色处理，采用最原始聊天的蓝绿风格，并对身份确认环节进行红色处理。</p>
<p>默认双方昵称为lkp1和lkp2。</p>
<p>双方正常对话发送消息<br>
<img src="https://s2.loli.net/2022/06/02/XO8BGUYbve3xVuC.png" alt="20220602193209"></p>
<p>client结束本轮对话，由server发送消息<br>
<img src="https://s2.loli.net/2022/06/02/JeGg7Fcfu6vq8CE.png" alt="20220602193357"></p>
<p>server发送完消息之后输入12581结束本次对话<br>
<img src="https://s2.loli.net/2022/06/02/QT1hBk8ixKj7pGv.png" alt="20220602193553"></p>
<p>接下来演示身份错误环节<br>
<img src="https://s2.loli.net/2022/06/02/3DixqSKjXVzYZ9M.png" alt="20220602194244"></p>
<p>实验实现了目标里面的功能并且能够双向通信。</p>
<h2><span id="源代码"> 源代码</span></h2>
<h3><span id="文件树"> 文件树</span></h3>
<p>├───Client<br>
│——|——client.cpp<br>
│——|——client.exe<br>
│——|——client.h<br>
│——|——MD5.h<br>
├───Server<br>
│——|——generateKey.cpp<br>
│——|——generateKey.exe<br>
│——|——MD5.h<br>
│——|——server.cpp<br>
│——|——server.exe<br>
│——|——server.h</p>
<h3><span id="md5h"> MD5.h</span></h3>
<pre class="highlight"><code class="C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> A 0x67452301</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> B 0xefcdab89</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> C 0x98badcfe</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> D 0x10325476</span>

<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> str16[] = <span class="hljs-string">"0123456789abcdef"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> T[] = {
    <span class="hljs-number">0xd76aa478</span>,<span class="hljs-number">0xe8c7b756</span>,<span class="hljs-number">0x242070db</span>,<span class="hljs-number">0xc1bdceee</span>,
    <span class="hljs-number">0xf57c0faf</span>,<span class="hljs-number">0x4787c62a</span>,<span class="hljs-number">0xa8304613</span>,<span class="hljs-number">0xfd469501</span>,
    <span class="hljs-number">0x698098d8</span>,<span class="hljs-number">0x8b44f7af</span>,<span class="hljs-number">0xffff5bb1</span>,<span class="hljs-number">0x895cd7be</span>,
    <span class="hljs-number">0x6b901122</span>,<span class="hljs-number">0xfd987193</span>,<span class="hljs-number">0xa679438e</span>,<span class="hljs-number">0x49b40821</span>,
    <span class="hljs-number">0xf61e2562</span>,<span class="hljs-number">0xc040b340</span>,<span class="hljs-number">0x265e5a51</span>,<span class="hljs-number">0xe9b6c7aa</span>,
    <span class="hljs-number">0xd62f105d</span>,<span class="hljs-number">0x02441453</span>,<span class="hljs-number">0xd8a1e681</span>,<span class="hljs-number">0xe7d3fbc8</span>,
    <span class="hljs-number">0x21e1cde6</span>,<span class="hljs-number">0xc33707d6</span>,<span class="hljs-number">0xf4d50d87</span>,<span class="hljs-number">0x455a14ed</span>,
    <span class="hljs-number">0xa9e3e905</span>,<span class="hljs-number">0xfcefa3f8</span>,<span class="hljs-number">0x676f02d9</span>,<span class="hljs-number">0x8d2a4c8a</span>,
    <span class="hljs-number">0xfffa3942</span>,<span class="hljs-number">0x8771f681</span>,<span class="hljs-number">0x6d9d6122</span>,<span class="hljs-number">0xfde5380c</span>,
    <span class="hljs-number">0xa4beea44</span>,<span class="hljs-number">0x4bdecfa9</span>,<span class="hljs-number">0xf6bb4b60</span>,<span class="hljs-number">0xbebfbc70</span>,
    <span class="hljs-number">0x289b7ec6</span>,<span class="hljs-number">0xeaa127fa</span>,<span class="hljs-number">0xd4ef3085</span>,<span class="hljs-number">0x04881d05</span>,
    <span class="hljs-number">0xd9d4d039</span>,<span class="hljs-number">0xe6db99e5</span>,<span class="hljs-number">0x1fa27cf8</span>,<span class="hljs-number">0xc4ac5665</span>,
    <span class="hljs-number">0xf4292244</span>,<span class="hljs-number">0x432aff97</span>,<span class="hljs-number">0xab9423a7</span>,<span class="hljs-number">0xfc93a039</span>,
    <span class="hljs-number">0x655b59c3</span>,<span class="hljs-number">0x8f0ccc92</span>,<span class="hljs-number">0xffeff47d</span>,<span class="hljs-number">0x85845dd1</span>,
    <span class="hljs-number">0x6fa87e4f</span>,<span class="hljs-number">0xfe2ce6e0</span>,<span class="hljs-number">0xa3014314</span>,<span class="hljs-number">0x4e0811a1</span>,
    <span class="hljs-number">0xf7537e82</span>,<span class="hljs-number">0xbd3af235</span>,<span class="hljs-number">0x2ad7d2bb</span>,<span class="hljs-number">0xeb86d391</span> };

<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> s[] = { <span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,
                           <span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,
                           <span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">23</span>,
                           <span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>};

<span class="hljs-comment">// 第一部分是要进行 HASH 运算的原始明文，第二部分则是其对应的 HASH 值</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data</span>{</span>
    <span class="hljs-built_in">string</span> msg;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> hash[<span class="hljs-number">16</span>];
}tests[] = {
    { <span class="hljs-string">""</span>,
      { <span class="hljs-number">0xd4</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x04</span>, 
        <span class="hljs-number">0xe9</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7e</span> } },
    { <span class="hljs-string">"a"</span>,
      {<span class="hljs-number">0x0c</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xa8</span>, 
       <span class="hljs-number">0x31</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x61</span> } },
    { <span class="hljs-string">"abc"</span>,
      { <span class="hljs-number">0x90</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xb0</span>, 
        <span class="hljs-number">0xd6</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x72</span> } },
    { <span class="hljs-string">"message digest"</span>, 
      { <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x8d</span>, 
        <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xd0</span> } }, 
    { <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>,
      { <span class="hljs-number">0xc3</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x00</span>, 
        <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x3b</span> } },
    { <span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>,
      { <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0xf5</span>, 
        <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x9f</span> } },
    { <span class="hljs-string">"12345678901234567890123456789012345678901234567890123456789012345678901234567890"</span>,
      { <span class="hljs-number">0x57</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x55</span>, 
        <span class="hljs-number">0xac</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0x7a</span> } },

};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5</span> {</span>
<span class="hljs-keyword">private</span>:
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> tempA, tempB, tempC, tempD, strlength;
<span class="hljs-keyword">public</span>:
    MD5() {
        tempA = A;
        tempB = B;
        tempC = C;
        tempD = D;
        strlength = <span class="hljs-number">0</span>;
    }
    <span class="hljs-comment">// 填充字符串</span>
    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; <span class="hljs-title">padding</span><span class="hljs-params">(<span class="hljs-built_in">string</span> src)</span> </span>{
        <span class="hljs-comment">// 以512位,64个字节为一组</span>
        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num = ((src.length() + <span class="hljs-number">8</span>) / <span class="hljs-number">64</span>) + <span class="hljs-number">1</span>;
        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; <span class="hljs-title">rec</span><span class="hljs-params">(num*<span class="hljs-number">16</span>)</span></span>;
        strlength = num*<span class="hljs-number">16</span>;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; src.length(); i++){
            <span class="hljs-comment">// 一个unsigned int对应4个字节，保存4个字符信息</span>
            rec[i&gt;&gt;<span class="hljs-number">2</span>] |= (<span class="hljs-keyword">int</span>)(src[i]) &lt;&lt; ((i % <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);
        }
        <span class="hljs-comment">// 补充1000...000</span>
        rec[src.length() &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> &lt;&lt; ((src.length() % <span class="hljs-number">4</span>)*<span class="hljs-number">8</span>));
        <span class="hljs-comment">// 填充原文长度</span>
        rec[rec.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>] = (src.length() &lt;&lt; <span class="hljs-number">3</span>);
        <span class="hljs-keyword">return</span> rec;
    }
    <span class="hljs-comment">// F函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
        <span class="hljs-keyword">return</span> (b &amp; c) | ((~b) &amp; d);
    }
    <span class="hljs-comment">// G函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">G</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
        <span class="hljs-keyword">return</span> (b &amp; d) | (c &amp; (~d));
    }
    <span class="hljs-comment">// H函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">H</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
        <span class="hljs-keyword">return</span> b ^ c ^ d;
    }
    <span class="hljs-comment">// I函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">I</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
        <span class="hljs-keyword">return</span> c ^ (b | (~d));
    }
    <span class="hljs-comment">// 移位操作函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">shift</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n)</span> </span>{
        <span class="hljs-keyword">return</span> (a &lt;&lt; n) | (a &gt;&gt; (<span class="hljs-number">32</span> - n));
    }
    <span class="hljs-comment">// 循环压缩</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">iterateFunc</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* X, <span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span> = <span class="hljs-number">16</span>)</span> </span>{
        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a = tempA,
                     b = tempB,
                     c = tempC,
                     d = tempD,
                     rec = <span class="hljs-number">0</span>,
                     g, k;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++) {
            <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">16</span>) {
                <span class="hljs-comment">// F迭代</span>
                g = F(b, c, d);
                k = i;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">32</span>) {
                <span class="hljs-comment">// G迭代</span>
                g = G(b, c, d);
                k = (<span class="hljs-number">1</span> + <span class="hljs-number">5</span>*i) % <span class="hljs-number">16</span>;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">48</span>) {
                <span class="hljs-comment">// H迭代</span>
                g = H(b, c, d);
                k = (<span class="hljs-number">5</span> + <span class="hljs-number">3</span>*i) % <span class="hljs-number">16</span>;
            }
            <span class="hljs-keyword">else</span> {
                <span class="hljs-comment">// I迭代</span>
                g = I(b, c, d);
                k = (<span class="hljs-number">7</span>*i) % <span class="hljs-number">16</span>;
            }
            rec = d;
            d = c;
            c = b;
            b = b + shift(a + g + X[k] + T[i], s[i]);
            a = rec;
        }
        tempA += a;
        tempB += b;
        tempC += c;
        tempD += d;
    }
    <span class="hljs-comment">// 整理输出</span>
    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">format</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num)</span> </span>{
        <span class="hljs-built_in">string</span> res = <span class="hljs-string">""</span>;
        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> base = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) {
            <span class="hljs-built_in">string</span> tmp = <span class="hljs-string">""</span>;
            <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b = (num &gt;&gt; (i * <span class="hljs-number">8</span>)) % base &amp; <span class="hljs-number">0xff</span>;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) {
                tmp = str16[b%<span class="hljs-number">16</span>] + tmp;
                b /= <span class="hljs-number">16</span>;
            }
            res += tmp;
        }
        <span class="hljs-keyword">return</span> res;
    }
    <span class="hljs-comment">// 编码函数</span>
    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">encode</span><span class="hljs-params">(<span class="hljs-built_in">string</span> src)</span> </span>{
        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; rec = padding(src);
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; strlength/<span class="hljs-number">16</span>; i++) {
            <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num[<span class="hljs-number">16</span>];
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++) {
                num[j] = rec[i*<span class="hljs-number">16</span>+j];
            }
            iterateFunc(num, <span class="hljs-number">16</span>);
        }
        <span class="hljs-keyword">return</span> format(tempA) + format(tempB) + format(tempC) + format(tempD);
    }
};
</code></pre>
<h3><span id="generatekeycpp"> generateKey.cpp</span></h3>
<pre class="highlight"><code class="C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;gmp.h&gt;</span></span>
 
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_LENGTH 2048  <span class="hljs-comment">//公钥的长度</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BASE 16    <span class="hljs-comment">//输入输出的数字进制</span></span>
 
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
 
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key_pair</span> {</span>
    <span class="hljs-built_in">string</span> n;
    <span class="hljs-built_in">string</span> d;
    <span class="hljs-keyword">int</span> e;
};
 
<span class="hljs-comment">//生成两个大素数</span>
<span class="hljs-function"><span class="hljs-keyword">mpz_t</span> * <span class="hljs-title">gen_primes</span><span class="hljs-params">()</span>
</span>{                                        
    <span class="hljs-keyword">gmp_randstate_t</span> grt;                
    gmp_randinit_default(grt);    
    gmp_randseed_ui(grt, time(<span class="hljs-literal">NULL</span>));    
    
    <span class="hljs-keyword">mpz_t</span> key_p, key_q;
    mpz_init(key_p);
    mpz_init(key_q);
 
    mpz_urandomb(key_p, grt, KEY_LENGTH / <span class="hljs-number">2</span>);        
    mpz_urandomb(key_q, grt, KEY_LENGTH / <span class="hljs-number">2</span>);    <span class="hljs-comment">//随机生成两个大整数</span>
 
    <span class="hljs-keyword">mpz_t</span> * result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">mpz_t</span>[<span class="hljs-number">2</span>];
    mpz_init(result[<span class="hljs-number">0</span>]);
    mpz_init(result[<span class="hljs-number">1</span>]);
 
    mpz_nextprime(result[<span class="hljs-number">0</span>], key_p);  <span class="hljs-comment">//使用GMP自带的素数生成函数</span>
    mpz_nextprime(result[<span class="hljs-number">1</span>], key_q);
 
    mpz_clear(key_p);
    mpz_clear(key_q);
 
    <span class="hljs-keyword">return</span> result;    
}
 
<span class="hljs-comment">//生成密钥对</span>
<span class="hljs-function">key_pair * <span class="hljs-title">gen_key_pair</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">mpz_t</span> * primes = gen_primes();
 
    <span class="hljs-keyword">mpz_t</span> key_n, key_e, key_f;
    mpz_init(key_n);
    mpz_init(key_f);
    mpz_init_set_ui(key_e, <span class="hljs-number">65537</span>);    <span class="hljs-comment">//设置e为65537</span>
 
    mpz_mul(key_n, primes[<span class="hljs-number">0</span>], primes[<span class="hljs-number">1</span>]);        <span class="hljs-comment">//计算n=p*q</span>
    mpz_sub_ui(primes[<span class="hljs-number">0</span>], primes[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>);        <span class="hljs-comment">//p=p-1</span>
    mpz_sub_ui(primes[<span class="hljs-number">1</span>], primes[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>);        <span class="hljs-comment">//q=q-1</span>
    mpz_mul(key_f, primes[<span class="hljs-number">0</span>], primes[<span class="hljs-number">1</span>]);        <span class="hljs-comment">//计算欧拉函数φ(n)=(p-1)*(q-1)</span>
 
    <span class="hljs-keyword">mpz_t</span> key_d;    
    mpz_init(key_d);
    mpz_invert(key_d, key_e, key_f);   <span class="hljs-comment">//计算数论倒数</span>
 
    key_pair * result = <span class="hljs-keyword">new</span> key_pair;
 
    <span class="hljs-keyword">char</span> * buf_n = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
    <span class="hljs-keyword">char</span> * buf_d = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
 
    mpz_get_str(buf_n, BASE, key_n);
    result-&gt;n = buf_n;
    mpz_get_str(buf_d, BASE, key_d);
    result-&gt;d = buf_d;
    result-&gt;e = <span class="hljs-number">65537</span>;
 
    mpz_clear(primes[<span class="hljs-number">0</span>]);   <span class="hljs-comment">//释放内存</span>
    mpz_clear(primes[<span class="hljs-number">1</span>]);
    mpz_clear(key_n);
    mpz_clear(key_d);
    mpz_clear(key_e);
    mpz_clear(key_f);
    <span class="hljs-keyword">delete</span> []primes;

    <span class="hljs-keyword">return</span> result;
}

<span class="hljs-function">key_pair* <span class="hljs-title">getKey</span> <span class="hljs-params">(<span class="hljs-keyword">char</span> name)</span> </span>{
    key_pair * p = gen_key_pair();
 
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"n = "</span> &lt;&lt; p-&gt;n &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"d = "</span> &lt;&lt; p-&gt;d &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"e = "</span> &lt;&lt; p-&gt;e &lt;&lt; <span class="hljs-built_in">endl</span>;

    <span class="hljs-built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">"s public key is:("</span> &lt;&lt; p-&gt;n &lt;&lt; <span class="hljs-string">", "</span> &lt;&lt; p-&gt;e &lt;&lt; <span class="hljs-string">")"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//输出公钥(n, e)</span>
    <span class="hljs-built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="hljs-string">"s private key is:("</span> &lt;&lt; p-&gt;n &lt;&lt; <span class="hljs-string">", "</span> &lt;&lt; p-&gt;d &lt;&lt; <span class="hljs-string">")"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">//输出私钥(n, d)</span>
    <span class="hljs-keyword">return</span> p;
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">generateABKey</span><span class="hljs-params">()</span> </span>{
    key_pair * A = <span class="hljs-built_in">getKey</span>(<span class="hljs-string">'A'</span>);
    key_pair * B = <span class="hljs-built_in">getKey</span>(<span class="hljs-string">'B'</span>);
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{        
    generateABKey();
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre>
<h3><span id="serverh"> Server.h</span></h3>
<pre class="highlight"><code class="C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;gmp.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"MD5.h"</span></span>
 
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_LENGTH 2048  <span class="hljs-comment">//公钥的长度</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BASE 16    <span class="hljs-comment">//输入输出的数字进制</span></span>
 
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
 
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key_pair</span>
{</span>
    <span class="hljs-built_in">string</span> n;
    <span class="hljs-built_in">string</span> d;
    <span class="hljs-keyword">int</span> e;
    <span class="hljs-built_in">string</span> k;
};

key_pair* key = <span class="hljs-keyword">new</span> key_pair;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">keyInit</span><span class="hljs-params">()</span> </span>{
    key-&gt;n = <span class="hljs-string">"42ed95a8c26d10e856d7ac17e9451037457d5f6e66b824471229ac1422d28f868d6699492c7c31b6d10ed32ee6ad3cbb00bbefe2e76de75b924342781f3f67fd09a3d67c639363c97af569fb52863901f1b6b5e7901c00c989dd7847fc7f55989bf4775969254c2dc0d8e9f7e7dbb5e158c97f5d7d18de47766ee1efb2a3d7e899d019240701e2dec5ca8473a34cea6b6dcb62cff25d40858df7b37e3c14bac390d26926cf30c977b7417130bced9fcce5b7ff6923ab21652a2bf73c3dd0c40a3398f02261e9bd75a24134264412b3371c03daa715e2ad74c20d0ab895ab7025b0bec1eea316146127a5a6d97aa4f09c82624d7f897ef93a7d114cc0757d4253"</span>;
    key-&gt;d = <span class="hljs-string">"1f3c797be0fa3c48e3b716e7b60478b40327a77184596efd089a1068f973a26edef1c29ae73b338caa77abd298f0c38657aa5f245c74ebe4ce17bc1f0a1e72af235fa70c3901223277c3b06a0eb2fc4a4f00c25747e7f9ea16011a5126a45b53b57ddc720b63cff10eaf6e4b38984f83d4077efd281482318231f01b0a19f3fb58f835baa189bd387e4ba9d7da4b597d84fdcffc22e707be41adb6ca20f05787cf7e6d1ef27fb8e18ecb4d7ba9f544488e0d109cad4e7befa47020b8e568cf509543fc972b79aa1a8fb49149b517384b5b458f7a8052c299e3605fe12c786cd80f3fd8a2dc7f0ae67ecf1c3b2212d2b21fe5b7588a2d977af636cc461ec78c99"</span>;
    key-&gt;e = <span class="hljs-number">65537</span>;
    key-&gt;k = <span class="hljs-string">"77232546f0b2983adb0ab839b04b81278bcbdc2d34f06a248333cd33e3c139fb578ca19b389e0253fa6f3b3b41e2fd0f6f1fa7e94499fa212afa7f0b2a89f8681dd00e3207c09586c7c6f923016455b652e93ae4bf3b905d7e955fb3102286d9947247f1e75921aaa35840ad3359091e701c167f28be312116c43a13946d0c8d5da8fa21938be40c1f60821d45ef8530d6e24adfd5ab2a1a6ad34545d83c5fcca02a7f29541d6d4cf29778593958957c9b4ad9693289db7743a05bf88480473dc028e4f8e32ff6bdd206910b971ae00c649038aa59baebe8b7af542e9a9b65f69e7efcc17d6a88244cc9520d4b009371c268058e62d707561825ad5a98a81d11"</span>;
}

<span class="hljs-comment">//加密函数</span>
<span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">encrypt</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * plain_text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_n, <span class="hljs-keyword">int</span> key_e)</span>  
</span>{
    <span class="hljs-keyword">mpz_t</span> M, C1, n;
    mpz_init_set_str(M, plain_text, BASE); 
    mpz_init_set_str(n, key_n, BASE);
    mpz_init_set_ui(C1, <span class="hljs-number">0</span>);
 
    mpz_powm_ui(C1, M, key_e, n);    <span class="hljs-comment">//使用GMP中模幂计算函数</span>
 
    <span class="hljs-keyword">char</span> * result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
    mpz_get_str(result, BASE, C1);
 
    <span class="hljs-keyword">return</span> result;
}
 
<span class="hljs-comment">//解密函数</span>
<span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * cipher_text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_n, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_d)</span>  
</span>{
    <span class="hljs-keyword">mpz_t</span> M, C1, n, d;
    mpz_init_set_str(C1, cipher_text, BASE); 
    mpz_init_set_str(n, key_n, BASE);
    mpz_init_set_str(d, key_d, BASE);
    mpz_init(M);
 
    mpz_powm(M, C1, d, n);   <span class="hljs-comment">//使用GMP中的模幂计算函数</span>
 
    <span class="hljs-keyword">char</span> * result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
    mpz_get_str(result, BASE, M);
 
    <span class="hljs-keyword">return</span> result;
}

<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">getTime</span><span class="hljs-params">()</span> </span>{<span class="hljs-comment">//时间函数，返回一个时间戳</span>
    <span class="hljs-keyword">time_t</span> timep;
    time(&amp;timep);
    <span class="hljs-keyword">char</span> tmp[<span class="hljs-number">64</span>];
    strftime(tmp, <span class="hljs-keyword">sizeof</span>(tmp), <span class="hljs-string">"%Y-%m-%d %H:%M:%S"</span>, localtime(&amp;timep));
    <span class="hljs-keyword">return</span> tmp;
}

<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IdConfirm</span> <span class="hljs-params">(<span class="hljs-built_in">string</span> ID, <span class="hljs-built_in">string</span> name)</span> </span>{
    MD5 tmp;
    <span class="hljs-built_in">string</span> hash = tmp.encode(name);
    <span class="hljs-keyword">if</span> (ID.compare(hash)) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
}
</code></pre>
<h3><span id="servercpp"> Server.cpp</span></h3>
<pre class="highlight"><code class="C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;winsock.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">"windows.h"</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"server.h"</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">"ws2_32.lib"</span>)<span class="hljs-comment">//加载ws2_32.dll</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUF_SIZE 4096   <span class="hljs-comment">//指定聊天信息缓冲区大小</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{
    WSADATA wsaData;
    WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);

    SOCKET server = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<span class="hljs-comment">//创建server套接字，采用ipv4地址，默认TCP协议</span>

    sockaddr_in server_addr;
    <span class="hljs-built_in">memset</span>(&amp;server_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server_addr));
    server_addr.sin_family = AF_INET;<span class="hljs-comment">//套接字地址也采用IPv4地址</span>
    server_addr.sin_addr.S_un.S_addr = inet_addr(<span class="hljs-string">"127.0.0.1"</span>);<span class="hljs-comment">//本机地址</span>
    server_addr.sin_port = htons(<span class="hljs-number">1234</span>);<span class="hljs-comment">//端口号</span>
    bind(server, (SOCKADDR*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));<span class="hljs-comment">//将套接字和地址绑定</span>

    <span class="hljs-keyword">char</span> server_name[<span class="hljs-number">2048</span>] = { <span class="hljs-number">0</span> };<span class="hljs-comment">//申请一个2048字节的缓冲区，用于储存服务器的名称</span>
    <span class="hljs-keyword">char</span> server_name_tmp[<span class="hljs-number">2048</span>] = { <span class="hljs-number">0</span> };
    <span class="hljs-built_in">cout</span> &lt;&lt; getTime() &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; <span class="hljs-string">"Please enter your nickname:"</span>;
    <span class="hljs-built_in">cin</span>.getline(server_name_tmp, <span class="hljs-number">2048</span>);  <span class="hljs-comment">//gets()  </span>
    <span class="hljs-built_in">cout</span> &lt;&lt; getTime() &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; <span class="hljs-string">"Waiting for connection...\n"</span>;

    <span class="hljs-built_in">listen</span>(server, <span class="hljs-number">1</span>);<span class="hljs-comment">//进入监听状态，数字1表示队列中只能存在一个请求</span>

    <span class="hljs-comment">/*服务器已经初始化完毕，等待客户机连接*/</span>

    <span class="hljs-keyword">char</span> client_name[<span class="hljs-number">2048</span>] = { <span class="hljs-number">0</span> };
    SOCKET client;
    SOCKADDR_IN client_addr;
    <span class="hljs-keyword">int</span> client_addr_len = <span class="hljs-keyword">sizeof</span>(client_addr);

    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
        client = accept(server, (SOCKADDR*)&amp;client_addr, &amp;client_addr_len);
        <span class="hljs-keyword">if</span> (client == INVALID_SOCKET) {
            <span class="hljs-built_in">cout</span> &lt;&lt; getTime() &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; <span class="hljs-string">"Connection failed.\n"</span> &lt;&lt; WSAGetLastError();
        }
        <span class="hljs-keyword">else</span> {
            <span class="hljs-built_in">cout</span> &lt;&lt; getTime() &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; <span class="hljs-string">"Connection succeeded!!!\n"</span>;
            <span class="hljs-keyword">break</span>;
        }
    }
    
    <span class="hljs-keyword">char</span> <span class="hljs-built_in">buffer</span>[BUF_SIZE] = { <span class="hljs-number">0</span> };
    <span class="hljs-keyword">char</span> buffer_send[BUF_SIZE + <span class="hljs-number">100</span>] = { <span class="hljs-number">0</span> };
    <span class="hljs-keyword">char</span> buffer_receive[BUF_SIZE + <span class="hljs-number">100</span>] = { <span class="hljs-number">0</span> };
    <span class="hljs-keyword">int</span> receive_len = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">int</span> send_len = <span class="hljs-number">0</span>;
    <span class="hljs-comment">/*通过建立的连接进行通信*/</span>
    <span class="hljs-comment">//发送和接受客户端与服务端的名字  </span>

    MD5 tmp_name;
    <span class="hljs-built_in">string</span> tmp_s = tmp_name.encode(server_name_tmp);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tmp_s.length(); i++) {
        server_name[i] = tmp_s[i];
    }
    send_len = send(client, server_name, <span class="hljs-keyword">sizeof</span>(server_name), <span class="hljs-number">0</span>);
    receive_len = recv(client, client_name, <span class="hljs-keyword">sizeof</span>(client_name), <span class="hljs-number">0</span>);
    
    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY|FOREGROUND_RED);
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">if</span> (IdConfirm(client_name, <span class="hljs-string">"lkp2"</span>)) {
        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"ID Confirm success, Let's chatting..."</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"ID Confirm failed, Conversation aborted..."</span>;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE);
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }

    keyInit();

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE);
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Please enter the message(just number) you want to send, or enter \"12582\" to abort this conversation, or enter \"12581\" to abort this chat"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;

    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<span class="hljs-comment">//接收消息</span>
            <span class="hljs-built_in">memset</span>(buffer_receive, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buffer_receive));<span class="hljs-comment">//初始化缓冲区  </span>
            receive_len = recv(client, buffer_receive, <span class="hljs-keyword">sizeof</span>(buffer_receive), <span class="hljs-number">0</span>);
            <span class="hljs-comment">//string tmp(buffer_receive);</span>
            <span class="hljs-built_in">string</span> tmp = decrypt(buffer_receive, key-&gt;n.data(), key-&gt;d.data());
            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buffer_receive, <span class="hljs-string">"12581"</span>) == <span class="hljs-number">0</span>) {<span class="hljs-comment">//如果聊天内容中含有12581，则退出聊天，关闭socket</span>
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 3 seconds..."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
                Sleep(<span class="hljs-number">1000</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 2 seconds..."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
                Sleep(<span class="hljs-number">1000</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 1 seconds..."</span>;
                Sleep(<span class="hljs-number">1000</span>);
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE);<span class="hljs-comment">//恢复原来的颜色</span>
                closesocket(server);
                closesocket(client);
                WSACleanup();
                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buffer_receive, <span class="hljs-string">"12582"</span>) == <span class="hljs-number">0</span>)<span class="hljs-comment">//如果聊天内容中含有12582，则本回合聊天结束，不然可以继续发送信息</span>
                <span class="hljs-keyword">break</span>;
            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE);<span class="hljs-comment">//设置蓝色</span>
            <span class="hljs-keyword">if</span> (tmp.<span class="hljs-built_in">find</span>(<span class="hljs-string">"0"</span>) != <span class="hljs-built_in">string</span>::npos) {
                <span class="hljs-keyword">continue</span>;
            }
            <span class="hljs-built_in">cout</span> &lt;&lt; tmp &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"----------------------Detail--------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"Message:"</span> &lt;&lt; tmp &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Ciphertext:"</span> &lt;&lt; buffer_receive &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"----------------------Detail--------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
        }
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {<span class="hljs-comment">//发送消息</span>
            <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">buffer</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">buffer</span>));<span class="hljs-comment">//清空缓冲区</span>
            <span class="hljs-built_in">memset</span>(buffer_send, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buffer_send));
            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN);<span class="hljs-comment">//设置绿色</span>
            <span class="hljs-built_in">string</span> tmp_time = getTime();
            <span class="hljs-built_in">cout</span> &lt;&lt; tmp_time &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; server_name_tmp &lt;&lt; <span class="hljs-string">":"</span>;
            <span class="hljs-built_in">cin</span>.getline(<span class="hljs-built_in">buffer</span>, BUF_SIZE);
            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-built_in">buffer</span>, <span class="hljs-string">"12582"</span>) == <span class="hljs-number">0</span>) {
                send_len = send(client, <span class="hljs-built_in">buffer</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">buffer</span>), <span class="hljs-number">0</span>);
                <span class="hljs-keyword">break</span>;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-built_in">buffer</span>, <span class="hljs-string">"12581"</span>) == <span class="hljs-number">0</span>) {
                send_len = send(client, <span class="hljs-built_in">buffer</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">buffer</span>), <span class="hljs-number">0</span>);
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 3 seconds..."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
                Sleep(<span class="hljs-number">1000</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 2 seconds..."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
                Sleep(<span class="hljs-number">1000</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 1 seconds..."</span>;
                Sleep(<span class="hljs-number">1000</span>);
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE);<span class="hljs-comment">//恢复原来的颜色</span>
                closesocket(server);
                closesocket(client);
                WSACleanup();
                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
            }
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"----------------------Detail--------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"Message:"</span> &lt;&lt; <span class="hljs-built_in">buffer</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-keyword">char</span>* tmp = encrypt(<span class="hljs-built_in">buffer</span>, key-&gt;k.data(), key-&gt;e);
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Ciphertext:"</span> &lt;&lt; tmp &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"----------------------Detail--------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-keyword">char</span> tmp1[<span class="hljs-number">10240</span>];
            <span class="hljs-built_in">strncpy</span>(tmp1, tmp, <span class="hljs-built_in">strlen</span>(tmp) + <span class="hljs-number">1</span>);
            send_len = send(client, tmp1, <span class="hljs-keyword">sizeof</span>(tmp1), <span class="hljs-number">0</span>);
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre>
<h3><span id="clienth"> Client.h</span></h3>
<pre class="highlight"><code class="C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdio&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;ctime&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstring&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;gmp.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"MD5.h"</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEY_LENGTH 2048  <span class="hljs-comment">//公钥的长度</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BASE 16    <span class="hljs-comment">//输入输出的数字进制</span></span>
 
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;
 
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key_pair</span>
{</span>
    <span class="hljs-built_in">string</span> n;
    <span class="hljs-built_in">string</span> d;
    <span class="hljs-keyword">int</span> e;
    <span class="hljs-built_in">string</span> k;
};

key_pair* key = <span class="hljs-keyword">new</span> key_pair;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">keyInit</span><span class="hljs-params">()</span> </span>{
    key-&gt;n = <span class="hljs-string">"77232546f0b2983adb0ab839b04b81278bcbdc2d34f06a248333cd33e3c139fb578ca19b389e0253fa6f3b3b41e2fd0f6f1fa7e94499fa212afa7f0b2a89f8681dd00e3207c09586c7c6f923016455b652e93ae4bf3b905d7e955fb3102286d9947247f1e75921aaa35840ad3359091e701c167f28be312116c43a13946d0c8d5da8fa21938be40c1f60821d45ef8530d6e24adfd5ab2a1a6ad34545d83c5fcca02a7f29541d6d4cf29778593958957c9b4ad9693289db7743a05bf88480473dc028e4f8e32ff6bdd206910b971ae00c649038aa59baebe8b7af542e9a9b65f69e7efcc17d6a88244cc9520d4b009371c268058e62d707561825ad5a98a81d11"</span>;
    key-&gt;d = <span class="hljs-string">"369979d5082ca14d9fe34ac8cd7ddd0415b26906a2d367a1b22b8468ba816ca43edc6997ec9ba5af7cff8b22be305c0fbdbac1464bb55187efdd7b69cfa6099d15c4ab2ccc96bb3058d05c8f696ce54738ba40ce62c1d688b2a19c8940e4c1ee6774f479edafd099166134caebd46b3472e6bc7cac5c75c1976078c94e65a7b164a983dc15d98ed7d95041fa52adb643f87d7590bc1f476264caad4ea47adc7ec6aaedb5afe341a68afc6b8ee32a8eacf17b0d372afcf14258e87901395349a797443e50ee8bddf2fbf121799ba40a3e3b22e76341f07606dc7a810fb000dcbed3fc05a15223b04ff5f9610e9febae25a27a2871a2b75eacaba745e63bbc295d"</span>;
    key-&gt;e = <span class="hljs-number">65537</span>;
    key-&gt;k = <span class="hljs-string">"42ed95a8c26d10e856d7ac17e9451037457d5f6e66b824471229ac1422d28f868d6699492c7c31b6d10ed32ee6ad3cbb00bbefe2e76de75b924342781f3f67fd09a3d67c639363c97af569fb52863901f1b6b5e7901c00c989dd7847fc7f55989bf4775969254c2dc0d8e9f7e7dbb5e158c97f5d7d18de47766ee1efb2a3d7e899d019240701e2dec5ca8473a34cea6b6dcb62cff25d40858df7b37e3c14bac390d26926cf30c977b7417130bced9fcce5b7ff6923ab21652a2bf73c3dd0c40a3398f02261e9bd75a24134264412b3371c03daa715e2ad74c20d0ab895ab7025b0bec1eea316146127a5a6d97aa4f09c82624d7f897ef93a7d114cc0757d4253"</span>;
}

<span class="hljs-comment">//加密函数</span>
<span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">encrypt</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * plain_text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_n, <span class="hljs-keyword">int</span> key_e)</span>  
</span>{
    <span class="hljs-keyword">mpz_t</span> M, C1, n;
    mpz_init_set_str(M, plain_text, BASE); 
    mpz_init_set_str(n, key_n, BASE);
    mpz_init_set_ui(C1, <span class="hljs-number">0</span>);
 
    mpz_powm_ui(C1, M, key_e, n);    <span class="hljs-comment">//使用GMP中模幂计算函数</span>
 
    <span class="hljs-keyword">char</span> * result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
    mpz_get_str(result, BASE, C1);
 
    <span class="hljs-keyword">return</span> result;
}
 
<span class="hljs-comment">//解密函数</span>
<span class="hljs-function"><span class="hljs-keyword">char</span> * <span class="hljs-title">decrypt</span><span class="hljs-params">(<span class="hljs-keyword">char</span> * cipher_text, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_n, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * key_d)</span>  
</span>{
    <span class="hljs-keyword">mpz_t</span> M, C1, n, d;
    mpz_init_set_str(C1, cipher_text, BASE); 
    mpz_init_set_str(n, key_n, BASE);
    mpz_init_set_str(d, key_d, BASE);
    mpz_init(M);
 
    mpz_powm(M, C1, d, n);   <span class="hljs-comment">//使用GMP中的模幂计算函数</span>
 
    <span class="hljs-keyword">char</span> * result = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[KEY_LENGTH + <span class="hljs-number">10</span>];
    mpz_get_str(result, BASE, M);
 
    <span class="hljs-keyword">return</span> result;
}

<span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">getTime</span><span class="hljs-params">()</span> </span>{
    <span class="hljs-keyword">time_t</span> timep;
    time(&amp;timep);
    <span class="hljs-keyword">char</span> tmp[<span class="hljs-number">64</span>];
    strftime(tmp, <span class="hljs-keyword">sizeof</span>(tmp), <span class="hljs-string">"%Y-%m-%d %H:%M:%S"</span>, localtime(&amp;timep));
    <span class="hljs-keyword">return</span> tmp;
}

<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">IdConfirm</span> <span class="hljs-params">(<span class="hljs-built_in">string</span> ID, <span class="hljs-built_in">string</span> name)</span> </span>{
    MD5 tmp;
    <span class="hljs-built_in">string</span> hash = tmp.encode(name);
    <span class="hljs-keyword">if</span> (ID.compare(hash)) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
}
</code></pre>
<h3><span id="clientcpp"> Client.cpp</span></h3>
<pre class="highlight"><code class="C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;winsock.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">"windows.h"</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"client.h"</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> comment(lib,<span class="hljs-meta-string">"ws2_32.lib"</span>)<span class="hljs-comment">//加载ws2_32.dll</span></span>

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BUF_SIZE 4096   <span class="hljs-comment">//指定聊天信息缓冲区大小</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{
    WSADATA wsaData;
    WSAStartup(MAKEWORD(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), &amp;wsaData);

    SOCKET client = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);

    sockaddr_in server_addr;
    <span class="hljs-built_in">memset</span>(&amp;server_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.S_un.S_addr = inet_addr(<span class="hljs-string">"127.0.0.1"</span>);
    server_addr.sin_port = htons(<span class="hljs-number">1234</span>);

    <span class="hljs-keyword">char</span> client_name[<span class="hljs-number">2048</span>] = { <span class="hljs-number">0</span> };
    <span class="hljs-keyword">char</span> client_name_tmp[<span class="hljs-number">2048</span>] = { <span class="hljs-number">0</span> };
    <span class="hljs-built_in">cout</span> &lt;&lt; getTime() &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; <span class="hljs-string">"Please enter your nickname:"</span>;
    <span class="hljs-built_in">cin</span>.getline(client_name_tmp, <span class="hljs-number">2048</span>);
    <span class="hljs-built_in">connect</span>(client, (SOCKADDR*)&amp;server_addr, <span class="hljs-keyword">sizeof</span>(server_addr));
    <span class="hljs-built_in">cout</span> &lt;&lt; getTime() &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; <span class="hljs-string">"Connection ready.\n"</span>;


    <span class="hljs-keyword">char</span> server_name[<span class="hljs-number">2048</span>] = { <span class="hljs-number">0</span> };
    <span class="hljs-keyword">char</span> <span class="hljs-built_in">buffer</span>[BUF_SIZE] = { <span class="hljs-number">0</span> };
    <span class="hljs-keyword">char</span> buffer_send[BUF_SIZE + <span class="hljs-number">100</span>] = { <span class="hljs-number">0</span> };
    <span class="hljs-keyword">char</span> buffer_receive[BUF_SIZE + <span class="hljs-number">100</span>] = { <span class="hljs-number">0</span> };
    <span class="hljs-keyword">int</span> receive_len = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">int</span> send_len = <span class="hljs-number">0</span>;

    MD5 tmp_name;
    <span class="hljs-built_in">string</span> tmp_s = tmp_name.encode(client_name_tmp);
    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; tmp_s.length(); i++) {
        client_name[i] = tmp_s[i];
    }

    send_len = send(client, client_name, <span class="hljs-keyword">sizeof</span>(client_name), <span class="hljs-number">0</span>);
    receive_len = recv(client, server_name, <span class="hljs-keyword">sizeof</span>(server_name), <span class="hljs-number">0</span>);

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY|FOREGROUND_RED);
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">if</span> (IdConfirm(server_name, <span class="hljs-string">"lkp1"</span>)) {
        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"ID Confirm success, Let's chatting..."</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"ID Confirm failed, Conversation aborted..."</span>;
        SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE);
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }

    keyInit();

    SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE);
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Please enter the message(just number) you want to send, or enter \"12582\" to abort this conversation, or enter \"12581\" to abort this chat"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;

    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
            <span class="hljs-built_in">memset</span>(<span class="hljs-built_in">buffer</span>, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">buffer</span>));
            <span class="hljs-built_in">memset</span>(buffer_send, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buffer_send));
            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN);<span class="hljs-comment">//设置绿色</span>
            <span class="hljs-built_in">string</span> tmp_time = getTime();
            <span class="hljs-built_in">cout</span> &lt;&lt; tmp_time &lt;&lt; <span class="hljs-string">" "</span> &lt;&lt; client_name_tmp &lt;&lt; <span class="hljs-string">":"</span>;
            <span class="hljs-built_in">cin</span>.getline(<span class="hljs-built_in">buffer</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">buffer</span>));
            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-built_in">buffer</span>, <span class="hljs-string">"12581"</span>) == <span class="hljs-number">0</span>) {
                send_len = send(client, <span class="hljs-built_in">buffer</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">buffer</span>), <span class="hljs-number">0</span>);
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 3 seconds..."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
                Sleep(<span class="hljs-number">1000</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 2 seconds..."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
                Sleep(<span class="hljs-number">1000</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 1 seconds..."</span>;
                Sleep(<span class="hljs-number">1000</span>);
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE);<span class="hljs-comment">//恢复原来的颜色</span>
                closesocket(client);
                WSACleanup();
                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-built_in">buffer</span>, <span class="hljs-string">"12582"</span>) == <span class="hljs-number">0</span>) {
                send_len = send(client, <span class="hljs-built_in">buffer</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">buffer</span>), <span class="hljs-number">0</span>);
                <span class="hljs-keyword">break</span>;
            }
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"----------------------Detail--------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"Message:"</span> &lt;&lt; <span class="hljs-built_in">buffer</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-keyword">char</span> * tmp = encrypt(<span class="hljs-built_in">buffer</span>, key-&gt;k.data(), key-&gt;e);
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Ciphertext:"</span> &lt;&lt; tmp &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"----------------------Detail--------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-keyword">char</span> tmp1[<span class="hljs-number">10240</span>];
            <span class="hljs-built_in">strncpy</span>(tmp1, tmp, <span class="hljs-built_in">strlen</span>(tmp) + <span class="hljs-number">1</span>);
            send_len = send(client, tmp1, <span class="hljs-keyword">sizeof</span>(tmp1), <span class="hljs-number">0</span>);
        }
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
            <span class="hljs-built_in">memset</span>(buffer_receive, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buffer_receive));
            receive_len = recv(client, buffer_receive, <span class="hljs-keyword">sizeof</span>(buffer_receive), <span class="hljs-number">0</span>);
            <span class="hljs-built_in">string</span> tmp = decrypt(buffer_receive, key-&gt;n.data(), key-&gt;d.data());
            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buffer_receive, <span class="hljs-string">"12581"</span>) == <span class="hljs-number">0</span>) {
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 3 seconds..."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
                Sleep(<span class="hljs-number">1000</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 2 seconds..."</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
                Sleep(<span class="hljs-number">1000</span>);
                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"The program will exit in 1 seconds..."</span>;
                Sleep(<span class="hljs-number">1000</span>);
                SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE),FOREGROUND_INTENSITY|FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_BLUE);<span class="hljs-comment">//恢复原来的颜色</span>
                closesocket(client);
                WSACleanup();
                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(buffer_receive, <span class="hljs-string">"12582"</span>) == <span class="hljs-number">0</span>)
                <span class="hljs-keyword">break</span>;
            SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_BLUE);<span class="hljs-comment">//设置蓝色</span>
            <span class="hljs-keyword">if</span> (tmp.<span class="hljs-built_in">find</span>(<span class="hljs-string">"0"</span>) != <span class="hljs-built_in">string</span>::npos) {
                <span class="hljs-keyword">continue</span>;
            }
            <span class="hljs-built_in">cout</span> &lt;&lt; tmp &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"----------------------Detail--------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span> &lt;&lt; <span class="hljs-string">"Message:"</span> &lt;&lt; tmp &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Ciphertext:"</span> &lt;&lt; buffer_receive &lt;&lt; <span class="hljs-built_in">endl</span>;
            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"----------------------Detail--------------------"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>数字签名算法DSA</title>
    <url>/blog/2022/059d9eab6e.html</url>
    <content><![CDATA[<blockquote>
<p>本文为作者个人作业，仅供参考</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E5%AE%9E%E9%AA%8C%E8%A6%81%E6%B1%82">实验要求</a></li>
</ul>
<!-- tocstop -->
<h3><span id="实验要求"> 实验要求</span></h3>
<p>通过对数字签字算法DSA的实际操作，理解DSS的基本工作原理。</p>
<h4><span id="实验内容"> 实验内容</span></h4>
<ol>
<li>参照教材，熟悉数字签名算法DSA；</li>
<li>参照教材，熟悉杂凑函数算法SHA；</li>
<li>这里给出一个可运行的DSA数字签字演示程序，运行这个程序，对一段文字进行签字和验证，了解DSA算法的签字和验证过程。</li>
</ol>
<h4><span id="杂凑函数sha-1"> 杂凑函数SHA-1</span></h4>
<p>安全哈希算法(SHA)是基于MD4算法，其结构与MD4非常类似，用于数字签名的标准算法DSS中。</p>
<h5><span id="算法实现步骤"> 算法实现步骤</span></h5>
<ol>
<li>
<p>将消息摘要转换成位字符串<br>
因为在SHA-算法中，它的输入必须为位，所以首先要将其转化为位字符串，以“abc”字符串来说明问题，因为’a’=97, ‘b’=98, ‘c’=99，所以将其转换为位串后为：</p>
<blockquote>
<p>01100001 01100010 01100011</p>
</blockquote>
</li>
<li>
<p>对转换后的位字符串进行补位操作<br>
SHA-算法标准规定，必须对消息摘要进行补位操作，即将输入的数据进行填充，使得数据长度对512求余的结果为448，填充比特位的最高位补一个1，其余的位补0，如果在补位之前已经满足对512取模余数为448，也要进行补位，在其后补一位1即可。总之，补位是至少补一位，最多补512位，依然以“abc”为例，其补位过程如下：</p>
<ul>
<li>初始的信息摘要：01100001 01100010 01100011</li>
<li>第一步补位：01100001 01100010 01100011 1…  …</li>
<li>补位最后一位：01100001 01100010 01100011 10…0(后面补了423个0)</li>
</ul>
<p>而后将补位操作后的信息摘要转换为十六进制，如下所示：<br>
61626380 00000000 00000000 00000000<br>
00000000 00000000 00000000 00000000<br>
00000000 00000000 00000000 00000000<br>
00000000 00000000</p>
</li>
<li>
<p>附加长度值<br>
在信息摘要后面附加64bit的信息，用来表示原始信息摘要的长度，在这步操作之后，信息报文便是512bit的倍数。通常来说用一个64位的数据表示原始消息的长度，如果消息长度不大于2^64，那么前32bit就为0，在进行附加长度值操作后，其“abc”数据报文即变成如下形式：<br>
61626380 00000000 00000000 00000000<br>
00000000 00000000 00000000 00000000<br>
00000000 00000000 00000000 00000000<br>
00000000 00000000 00000000 00000018<br>
因为“abc”占3个字节，即24位 ，换算为十六进制即为0x18。</p>
</li>
<li>
<p>初始化缓存<br>
一个160位MD缓冲区用以保存中间和最终散列函数的结果。它可以表示为5个32位的寄存器(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">H_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">H_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">H_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">H_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)。初始化为：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0x67452301<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">H_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0xEFCDAB89<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">H_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0x98BADCFE<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">H_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0x10325476<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">H_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0xC3D2E1F0<br>
前四个与上周的MD-5一样，但不同之处为存储为大端序</p>
</li>
<li>
<p>计算消息摘要<br>
在计算报文之前还要做一些基本的工作，就是在计算过程中要用到的方法。</p>
<ol>
<li>循环左移操作符Sn(x),x是一个字，也就是32bit大小的变量，n是一个整数且0&lt;=n&lt;=32。Sn(X) = (X&lt;&lt;n)OR(X&gt;&gt;32-n)</li>
<li>在程序中所要用到的常量，这一系列常量字k(0)、k(1)、…k(79)，将其以十六进制表示如下：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">K_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0x5A827999  (0 &lt;= t &lt;= 19)<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">K_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0x6ED9EBA1 (20 &lt;= t &lt;= 39)<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">K_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0x8F1BBCDC (40 &lt;= t &lt;= 59)<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">K_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = 0xCA62C1D6 (60 &lt;= t &lt;= 79)</li>
<li>所要用到的一系列函数<br>
Ft(b,c,d)  ((b&amp;c)|((~b)&amp;d))    (0 &lt;= t &lt;= 19)<br>
Ft(b,c,d) (b<sup>c</sup>d)             (20 &lt;= t &lt;= 39)<br>
Ft(b,c,d) ((b&amp;c)|(b&amp;d)|(c&amp;d))  (40 &lt;= t &lt;= 59)<br>
Ft(b,c,d) (b<sup>c</sup>d)               (60 &lt;= t &lt;= 79)</li>
<li>计算<br>
计算需要一个缓冲区，由5个32位的字组成，还需要一个80个32位字的缓冲区。第一个5个字的缓冲区被标识为A，B，C，D，E。80个字的缓冲区被标识为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>W</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>W</mi><mn>79</mn></msub></mrow><annotation encoding="application/x-tex">W_0, W_1,..., W_{79}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">7</span><span class="mord mtight">9</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><br>
另外还需要一个一个字的TEMP缓冲区。<br>
为了产生消息摘要，在第4部分中定义的16个字的数据块<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>M</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>M</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">M_1, M_2,..., M_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>会依次进行处理，处理每个数据块<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">M_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 包含80个步骤。</li>
</ol>
<p>现在开始处理<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>M</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>M</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">M_1, M_2, ... , M_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。为了处理 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>M</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">M_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,需要进行下面的步骤</p>
<ul>
<li>将 Mi 分成 16 个字 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>W</mi><mn>1</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>W</mi><mn>15</mn></msub><mo separator="true">,</mo><msub><mi>W</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">W_0, W_1, ... , W_{15},  W_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 是最左边的字</li>
<li>对于 t = 16 到 79 令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>W</mi><mi>t</mi></msub><mo>=</mo><msub><mi>S</mi><mn>1</mn></msub><mo stretchy="false">(</mo><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>3</mn></mrow></msub><mi>X</mi><mi>O</mi><mi>R</mi><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>8</mn></mrow></msub><mi>X</mi><mi>O</mi><mi>R</mi><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>14</mn></mrow></msub><mi>X</mi><mi>O</mi><mi>R</mi><msub><mi>W</mi><mrow><mi>t</mi><mo>−</mo><mn>16</mn></mrow></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">W_t = S_1(W_{t-3} XOR W_{t-8} XOR W_{t- 14} XOR W_{t-16})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">8</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">4</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mord mtight">6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>.</li>
<li>令 A = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, B = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">H_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, C = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">H_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, D = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">H_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, E = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">H_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</li>
<li>对于 t = 0 到 79，执行下面的循环<br>
TEMP = S5(A) + ft(B,C,D) + E + Wt + <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>K</mi><mi>t</mi></msub></mrow><annotation encoding="application/x-tex">K_t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>;<br>
E = D; D = C; C = S30(B); B = A; A = TEMP;</li>
</ul>
<ol start="5">
<li>令 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> + A, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">H_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">H_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> + B, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">H_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">H_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> + C, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">H_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">H_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> + D, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">H_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">H_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> + E.<br>
在处理完所有的 Mn, 后，消息摘要是一个160位的字符串，以下面的顺序标识<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">H_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">H_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">H_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">H_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>H</mi><mn>4</mn></msub></mrow><annotation encoding="application/x-tex">H_4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>.</li>
</ol>
</li>
</ol>
<h5><span id="sha-1在dss中的应用"> SHA-1在DSS中的应用</span></h5>
<p>在DSS（数字签名标准）中，使用数字签名算法DSA和哈希函数SHA-1结合完成数字签名。</p>
<h4><span id="数字签名算法dsa"> 数字签名算法DSA</span></h4>
<p>DSA是在ElGamal和Schnorr两个签名方案的基础上设计的，其安全性基于求离散对数的困难性。</p>
<h5><span id="算法描述"> 算法描述</span></h5>
<ol>
<li>
<p>全局变量</p>
<ul>
<li>p：满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>L</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><msup><mn>2</mn><mi>L</mi></msup></mrow><annotation encoding="application/x-tex">2^{L-1}&lt;p&lt;2^L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.880431em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">L</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8413309999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span></span></span></span></span></span></span></span>的大素数，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>512</mn><mo>≤</mo><mi>L</mi><mo>≤</mo><mn>1024</mn></mrow><annotation encoding="application/x-tex">512\leq L\leq 1024</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">5</span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8193em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">L</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">2</span><span class="mord">4</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi></mrow><annotation encoding="application/x-tex">L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span></span></span></span>是64的倍数。</li>
<li>q：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的素因子，满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mn>159</mn></msup><mo>&lt;</mo><mi>p</mi><mo>&lt;</mo><mn>2160</mn></mrow><annotation encoding="application/x-tex">2^{159}&lt;p&lt;2{160}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.853208em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">5</span><span class="mord mtight">9</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord"><span class="mord">1</span><span class="mord">6</span><span class="mord">0</span></span></span></span></span>，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>长为160比特。</li>
<li>g：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>g</mi><mo>≡</mo><msup><mi>h</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>q</mi></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">g\equiv h^{(p-1)/q}modp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi></mrow><annotation encoding="application/x-tex">h</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span></span></span></span>是满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>&lt;</mo><mi>h</mi><mo>&lt;</mo><mi>p</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">1&lt;h&lt;p-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>且使得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>h</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi>q</mi></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo>&gt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">h^{(p-1)/q}modp&gt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mord mtight">/</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的任一整数。</li>
</ul>
</li>
<li>
<p>密钥x</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>是满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>x</mi><mo>&lt;</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">0&lt;x&lt;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>的随机数或伪随机数。</li>
</ul>
</li>
<li>
<p>公钥y</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>≡</mo><msup><mi>g</mi><mi>x</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">y\equiv g^xmodp</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span></span></span></span></li>
</ul>
</li>
<li>
<p>用户的随机数选择k</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>是满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>0</mn><mo>&lt;</mo><mi>k</mi><mo>&lt;</mo><mi>q</mi></mrow><annotation encoding="application/x-tex">0&lt;k&lt;q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68354em;vertical-align:-0.0391em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73354em;vertical-align:-0.0391em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>的随机数或伪随机数。</li>
</ul>
</li>
<li>
<p>签名过程<br>
用户对消息<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>的签名为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><mi>r</mi><mo separator="true">,</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r,s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>g</mi><mi>k</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">r\equiv (g^kmodp)modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>≡</mo><mo stretchy="false">[</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mi>r</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">s\equiv [k^{-1}(H(M)+xr)]modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose">]</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(M)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span></span></span></span>是由SHA求出的哈希值。</p>
</li>
<li>
<p>验证过程<br>
设接收方接收到的消息为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>M</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">M'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，签名为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi>s</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(r',s')</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>。计算</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal">′</mo></msup><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">\omega \equiv (s')^{-1}modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mn>1</mn></msub><mo>≡</mo><mo stretchy="false">[</mo><mi>H</mi><mo stretchy="false">(</mo><msup><mi>M</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mi>ω</mi><mo stretchy="false">]</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">u_1\equiv [H(M')\omega ]modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61375em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mclose">]</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>u</mi><mn>2</mn></msub><mo>≡</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><mi>ω</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">u_2\equiv r'\omega modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61375em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.946332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>≡</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><msup><mi>g</mi><msub><mi>u</mi><mn>1</mn></msub></msup><msup><mi>y</mi><msub><mi>u</mi><mn>2</mn></msub></msup><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">]</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">v\equiv [(g^{u_1}y^{u_2})modp]modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">u</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span>。</li>
</ul>
<p>检查<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi></mrow><annotation encoding="application/x-tex">v</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span></span></span>是否等于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup></mrow><annotation encoding="application/x-tex">r'</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>，若相等，则证明签名有效，这是因为<br>
若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msup><mi>M</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi>s</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>M</mi><mo separator="true">,</mo><mi>r</mi><mo separator="true">,</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(M',r',s')=(M,r,s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span>，<br>
则<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>≡</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><msup><mi>g</mi><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mi>ω</mi></mrow></msup><msup><mi>g</mi><mrow><mi>x</mi><mi>r</mi><mi>ω</mi></mrow></msup><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">]</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi><mo>≡</mo><mo stretchy="false">[</mo><msup><mi>g</mi><mrow><mo stretchy="false">(</mo><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mi>r</mi><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">]</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>g</mi><mi>k</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi><mo>≡</mo><mi>r</mi></mrow><annotation encoding="application/x-tex">v\equiv [(g^{H(M)\omega }g^{xr\omega })modp]modq\equiv [g^{(H(M)+xr)^{-1}}modp]modq\equiv (g^kmodp)modq\equiv r</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2369199999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9869199999999998em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mclose mtight">)</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">x</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mclose mtight"><span class="mclose mtight">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span></span></p>
</li>
</ol>
<p>算法的其中的4个函数分别为：</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>s</mi><mo>≡</mo><msub><mi>f</mi><mn>1</mn></msub><mo stretchy="false">[</mo><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>k</mi><mo separator="true">,</mo><mi>x</mi><mo separator="true">,</mo><mi>r</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">]</mo><mo>≡</mo><mo stretchy="false">[</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>H</mi><mo stretchy="false">(</mo><mi>M</mi><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mi>r</mi><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">s\equiv f_1[H(M),k,x,r,q]\equiv [k^{-1}(H(M)+xr)]modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">[</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span><span class="mclose">]</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mo>=</mo><msub><mi>f</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>k</mi><mo separator="true">,</mo><mi>q</mi><mo separator="true">,</mo><mi>p</mi><mo separator="true">,</mo><mi>g</mi><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>g</mi><mi>k</mi></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">r=f_2(k,q,p,g)\equiv (g^kmodp)modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.099108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>ω</mi><mo>=</mo><msub><mi>f</mi><mn>3</mn></msub><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">(</mo><msup><mi>s</mi><mo mathvariant="normal">′</mo></msup><msup><mo stretchy="false">)</mo><mrow><mo>−</mo><mn>1</mn></mrow></msup><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">\omega =f_3(s',q)\equiv (s')^{-1}modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">s</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>v</mi><mo>≡</mo><msub><mi>f</mi><mn>4</mn></msub><mo stretchy="false">(</mo><mi>y</mi><mo separator="true">,</mo><mi>q</mi><mo separator="true">,</mo><mi>g</mi><mo separator="true">,</mo><mi>H</mi><mo stretchy="false">(</mo><msup><mi>M</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>ω</mi><mo separator="true">,</mo><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mo>≡</mo><mo stretchy="false">[</mo><mo stretchy="false">(</mo><msup><mi>g</mi><mrow><mo stretchy="false">(</mo><mi>H</mi><mo stretchy="false">(</mo><msup><mi>M</mi><mo mathvariant="normal">′</mo></msup><mo stretchy="false">)</mo><mi>ω</mi><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow></msup><msup><mi>y</mi><mrow><msup><mi>r</mi><mo mathvariant="normal">′</mo></msup><mi>ω</mi><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow></msup><mo stretchy="false">)</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">]</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>q</mi></mrow><annotation encoding="application/x-tex">v\equiv f_4(y,q,g,H(M'),\omega ,r')\equiv [(g^{(H(M')\omega )modq}y^{r'\omega modq})modp]modq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">ω</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.19248em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose mtight">)</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mclose mtight">)</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">ω</span><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight">d</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">]</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span></li>
</ul>
<h5><span id="dsa实例"> DSA实例</span></h5>
<p>实验将对消息“i love you，china”进行签名。</p>
<ol>
<li>
<p>在DSATool.exe程序中，选择大素数P的位数为512，数据呈现格式为10进制，生成如下所示的大素数P、素因子Q、G以及用户秘密钥X和用户公开钥Y。<br>
<img src="https://s2.loli.net/2022/05/27/pw6t42NP7fxJc8u.png" alt="20220527172547"></p>
</li>
<li>
<p>为待签消息选取如下所示的随机秘密数K，并产生签名(r,s)。K=2553DD1A0EEEABFC7781E5444DCD517932AB269E<br>
<img src="https://s2.loli.net/2022/05/27/MAbkWnjx2v5XS7p.png" alt="20220527172705"></p>
<p>对该签名进行验证，计算能成功通过。<br>
<img src="https://s2.loli.net/2022/05/27/NKkyctCQ3T5EBLm.png" alt="20220527172737"><br>
当修改签名中的某一位时（如将第一位7改为8），则验证将无法通过。<br>
<img src="https://s2.loli.net/2022/05/27/pjOqMy64mBC5fFx.png" alt="end{center}"></p>
<p>通过上述检测可以验证DSA的有效性和雪崩效应。</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>一些方便好用的常用命令</title>
    <url>/blog/2022/056ac63caa.html</url>
    <content><![CDATA[<blockquote>
<p>本文记录一些平时遇到的没必要记忆却又需要的指令</p>
</blockquote>
<!-- toc -->
<!-- tocstop -->
<h4><span id="vscode终端编码方式修改"> VSCode终端编码方式修改</span></h4>
<p>VScode的默认编码方式为UTF-8，中国地区下cmd的编码方式GBK，所以会导致在终端运行程序打印中文出乱码的情况，修改编码方式即可</p>
<p>在终端运行以下指令即可修改cmd编码方式：</p>
<pre class="highlight"><code class="C++">chcp <span class="hljs-number">65001</span> <span class="hljs-comment">//UTF-8编码</span>
chcp <span class="hljs-number">936</span> <span class="hljs-comment">//GBK编码</span>
</code></pre>
<h4><span id="国内快速访问github"> 国内快速访问Github</span></h4>
<ol>
<li>
<p>打开IPAddress.com网站,查询下列三个地址的ip</p>
<blockquote>
<p><a href="http://github.com">github.com</a><br>
<a href="http://assets-cnd.github.com">assets-cnd.github.com</a><br>
<a href="http://gibhut.global.ssl.fastly.net">gibhut.global.ssl.fastly.net</a></p>
</blockquote>
</li>
<li>
<p>修改本地hosts文件(window系统)</p>
<p>在C:\Windows\System32\drivers\etc 找到hosts文件，然后添加下列数据，注意把下面的ip改成你自己查询到ip地址。</p>
<blockquote>
<p>140.82.114.3 <a href="http://github.com">github.com</a><br>
185.199.108.153 <a href="http://assets-cdn.github.com">assets-cdn.github.com</a><br>
199.232.69.194 <a href="http://github.global.ssl.fastly.net">github.global.ssl.fastly.net</a></p>
</blockquote>
</li>
<li>
<p>刷新本地dns缓存<br>
Win+R打开cmd，输入命令 ipconfig/flushdns<br>
此时就配置成功了，然后就可以去访问啦</p>
</li>
</ol>
<blockquote>
<p>当然科学上网也是可以的</p>
</blockquote>
<h4><span id="windows查看文件命令"> windows查看文件命令</span></h4>
<pre class="highlight"><code class="C++">dir        <span class="hljs-comment">//查看当前文件下文件夹详细信息 </span>
dir /b     <span class="hljs-comment">//查看当前文件夹下文件夹</span>
dir /b /s  <span class="hljs-comment">//查看当前文件夹下文件夹及文件信息</span>
</code></pre>
]]></content>
      <tags>
        <tag>command</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown常用语法</title>
    <url>/blog/2022/05d18ae5e4.html</url>
    <content><![CDATA[<blockquote>
<p>一些常用基本语法不过多介绍，详细可以参看<a href="https://markdown.com.cn/cheat-sheet.html">MarkDown官方教程</a><br>
这里只介绍一些实用但是容易被忽视的一些语法</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E7%BB%99%E5%87%BA%E4%B8%80%E4%BA%9B%E4%BE%8B%E5%AD%90%E4%BB%A3%E7%A0%81">给出一些例子代码：</a></li>
</ul>
<!-- tocstop -->
<h4><span id="markdown引用"> MarkDown引用</span></h4>
<p>使用标记符 &gt; 对内容进行引用：</p>
<ol>
<li>引用一段内容
<blockquote>
<p>引用一段内容</p>
</blockquote>
</li>
<li>引用的多层嵌套：只要根据层次加上不同数量的 &gt; 符号</li>
</ol>
<p>示例：</p>
<pre class="highlight"><code class="C++">&gt;  请问  Markdwon  怎么用？  -  小白
&gt;&gt;  自己看教程！  -  愤青
&gt;&gt;&gt;  教程在哪？  -  小白
&gt;&gt;&gt;&gt;  我也不知道在哪！  -  愤青
&gt;&gt;&gt;&gt;&gt;  那你回答个屁。  -  小白
</code></pre>
<p>显示效果：</p>
<blockquote>
<p>请问  Markdwon  怎么用？  -  小白</p>
<blockquote>
<p>自己看教程！  -  愤青</p>
<blockquote>
<p>教程在哪？  -  小白</p>
<blockquote>
<p>我也不知道在哪！  -  愤青</p>
<blockquote>
<p>那你回答个屁。  -  小白</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<p>引用其它要素：<br>
引用的区块内也可以使用其他的语法，包括标题、列表、代码区块等。</p>
<p>示例：</p>
<pre class="highlight"><code class="C++">&gt; <span class="hljs-number">1.1</span> 这是第一行列表项。
&gt;&gt; <span class="hljs-number">2.1</span> 这是第二行列表项。
&gt;&gt;&gt; - 这是第三行列表项。
&gt; ### 给出一些例子代码：
</code></pre>
<p>显示效果：</p>
<blockquote>
<p>1.1 这是第一行列表项。</p>
<blockquote>
<p>2.1 这是第二行列表项。</p>
<blockquote>
<ul>
<li>这是第三行列表项。</li>
</ul>
</blockquote>
</blockquote>
<h3><span id="给出一些例子代码"> 给出一些例子代码：</span></h3>
</blockquote>
<p>引用中内容换行：<br>
有时候引用的内容太长，需要分段落层次，可以使用 &lt; br &gt; 实现换行。</p>
<p>举例：</p>
<pre class="highlight"><code class="C++">&gt; $\underline{幽默小故事，笑死人不偿命}$&lt;br&gt;
我：“老板，你这清炒油麦菜是荤菜还是素菜？
老板：“当然是素菜了”&lt;br&gt;
我：“那这条虫是怎么回事”
老板：“呃……它也是来吃饭的。”&lt;br&gt;
我：“它吃饭凭什么我付钱？我又不认识它！”
老板哭着说：“它为了这顿饭，把命都丢了，你还能要求它AA制吗？”
</code></pre>
<p>显示效果：</p>
<p><img src="https://s2.loli.net/2022/05/27/nIWKcB4P9GOlXSg.png" alt="20220527001606"></p>
<h4><span id="下划线"> 下划线</span></h4>
<p>示例：</p>
<pre class="highlight"><code class="C++">$\underline{给这条语句加一个下划线}$
</code></pre>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder accentunder="true"><mrow><mi mathvariant="normal">给</mi><mi mathvariant="normal">这</mi><mi mathvariant="normal">条</mi><mi mathvariant="normal">语</mi><mi mathvariant="normal">句</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">一</mi><mi mathvariant="normal">个</mi><mi mathvariant="normal">下</mi><mi mathvariant="normal">划</mi><mi mathvariant="normal">线</mi></mrow><mo stretchy="true">‾</mo></munder></mrow><annotation encoding="application/x-tex">\underline{给这条语句加一个下划线}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.2em;vertical-align:-0.2em;"></span><span class="mord underline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0em;"><span style="top:-2.84em;"><span class="pstrut" style="height:3em;"></span><span class="underline-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">给</span><span class="mord cjk_fallback">这</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">语</span><span class="mord cjk_fallback">句</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">划</span><span class="mord cjk_fallback">线</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span></span></span></span></span></p>
<p>效果：</p>
<p><img src="https://s2.loli.net/2022/05/27/4swLn8ib3XdOQ1f.png" alt="20220527001632"></p>
]]></content>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode笔记-数组</title>
    <url>/blog/2022/05fcf9ff47.html</url>
    <content><![CDATA[<blockquote>
<p>本篇为个人笔记，内容或有错误。<br>
图片部分源于<a href="https://programmercarl.com/">代码随想录</a>，侵删。</p>
</blockquote>
<!-- toc -->
<ul>
<li><a href="#%E6%95%B0%E7%BB%84">数组</a>
<ul>
<li><a href="#%E4%BA%8C%E5%88%86">二分</a></li>
<li><a href="#%E5%8F%8C%E6%8C%87%E9%92%88">双指针</a></li>
<li><a href="#%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5">螺旋矩阵</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->
<h2><span id="数组"> 数组</span></h2>
<p>需要两点注意的是：</p>
<ul>
<li>数组下标都是从0开始的</li>
<li>数组内存空间的地址是连续的</li>
</ul>
<p>正是因为数组的在内存空间的地址是连续的，所以我们在删除或者增添元素的时候，就难免要移动其他元素的地址，而且数组不能<strong>增删，只能覆盖</strong>。<br>
在C++中二维数组在地址空间上是连续的。但是Java是没有指针的，同时也不对程序员暴露其元素的地址，寻址操作完全交给虚拟机。所以看不到每个元素的地址情况。</p>
<h3><span id="二分"> 二分</span></h3>
<p>使用二分的前提是：</p>
<ul>
<li>有序数组</li>
<li>无重复元素</li>
</ul>
<p>使用二分时一般需要注意边界条件的处理，一般包括以下两种情况：</p>
<ol>
<li>左闭右闭</li>
<li>左闭右开</li>
</ol>
<p>二分法经常写乱，主要是因为对区间的定义没有想清楚，区间的定义就是不变量。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是<strong>循环不变量规则</strong>。</p>
<h3><span id="双指针"> 双指针</span></h3>
<p>使用双指针可以实现滑动窗口等操作，避免了循环嵌套，大大降低了时间复杂度</p>
<h3><span id="螺旋矩阵"> 螺旋矩阵</span></h3>
<p>要注意四个方向临界条件以及区间类型都要一致</p>
]]></content>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5加密算法C++实现</title>
    <url>/blog/2022/05d90a8c79.html</url>
    <content><![CDATA[<h2><span id="实验目的"> 实验目的</span></h2>
<p>本次实验通过C++编程实现MD5加密算法，通过了解MD5算法加深对Hash函数的认识</p>
<h2><span id="实验原理"> 实验原理</span></h2>
<p>Hash 函数是将任意长的数字串转换成一个较短的定长输出数字串的函数，输出的结果称为 Hash 值。Hash 函数具有如下特点：</p>
<ol>
<li>快速性：对于任意一个输入值 x，由 Hash 函数H(x) ，计算 Hash值 y，即H(x) = y是非常容易的</li>
<li>单向性：对于任意一个输出值 y，希望反向推出输入值 x，使得H(x) = y，是非常困难的。</li>
<li>无碰撞性：包括强无碰撞性和弱无碰撞性，一个好的 Hash 函数应该满足强无碰撞性，即找到两个不同的数字串 x 和 y，满足H(x) = H(y)，在计算上是不可能的。</li>
</ol>
<p>MD5算法满足Hash特性，然而需要说明的是,2004年8月，在Crypto2004国际密码学会议上，山东大学王小云教授发现了一种找到MD5散列函数的碰撞的方法，即可以找到两个不同的输入x和y，得到相同的Hash结果。这一发现意味着采用MD5算法的数字签名、完整性检验等信息安全应用系统将不在安全了，这就促使信息安全系统的设计者尽快去寻找和探索新的Hash算法。</p>
<h2><span id="md5算法模块拆解"> MD5算法模块拆解</span></h2>
<ol>
<li>
<p>获取输入，该模块用于获取一段明文字符，不定长</p>
</li>
<li>
<p>对获取的不定长字符串进行填充,使其字节长度满足n*512 + 448, 填充规则是第一位填充1，后续填充0，直至满足上述条件，最后再用一个64为二进制字符串表示明文长度，这样填充之后长度为(n + 1)*512</p>
<pre class="highlight"><code class="C++"><span class="hljs-comment">// 填充字符串</span>
<span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; <span class="hljs-title">padding</span><span class="hljs-params">(<span class="hljs-built_in">string</span> src)</span> </span>{
    <span class="hljs-comment">// 以512位,64个字节为一组</span>
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num = ((src.length() + <span class="hljs-number">8</span>) / <span class="hljs-number">64</span>) + <span class="hljs-number">1</span>;
    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; <span class="hljs-title">rec</span><span class="hljs-params">(num*<span class="hljs-number">16</span>)</span></span>;
    strlength = num*<span class="hljs-number">16</span>;
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; src.length(); i++){
        <span class="hljs-comment">// 一个unsigned int对应4个字节，保存4个字符信息</span>
        rec[i&gt;&gt;<span class="hljs-number">2</span>] |= (<span class="hljs-keyword">int</span>)(src[i]) &lt;&lt; ((i % <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);
    }
    <span class="hljs-comment">// 补充1000...000</span>
    rec[src.length() &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> &lt;&lt; ((src.length() % <span class="hljs-number">4</span>)*<span class="hljs-number">8</span>));
    <span class="hljs-comment">// 填充原文长度</span>
    rec[rec.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>] = (src.length() &lt;&lt; <span class="hljs-number">3</span>);
    <span class="hljs-keyword">return</span> rec;
}
</code></pre>
</li>
<li>
<p>字符串分块函数，将上述填充之后的字符串分割为L个512字节长度的字符串</p>
</li>
<li>
<p>循环压缩函数：对每个512-bit分组进行64轮迭代运算</p>
<ol>
<li>
<p>对分组（A, B, C, D）中的A进行迭代运算<br>
公式为：A &lt;= B + ((A + f(B,C,D) + X[k] + T[i])) &lt;&lt; S[i]<br>
其中：</p>
<ul>
<li>A,B,C,D代表MD5缓冲区当前的数值</li>
<li>f为轮函数，1-16轮迭代使用F函数，17-32轮迭代使用G函数，33-48轮迭 代使用H函数，49-64轮迭代使用I函数</li>
</ul>
<pre class="highlight"><code class="C++"><span class="hljs-comment">// F函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
    <span class="hljs-keyword">return</span> (b &amp; c) | ((~b) &amp; d);
}
<span class="hljs-comment">// G函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">G</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
    <span class="hljs-keyword">return</span> (b &amp; d) | (c &amp; (~d));
}
<span class="hljs-comment">// H函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">H</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
    <span class="hljs-keyword">return</span> b ^ c ^ d;
}
<span class="hljs-comment">// I函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">I</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
    <span class="hljs-keyword">return</span> c ^ (b | (~d));
}
<span class="hljs-comment">// 移位操作函数</span>
<span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">shift</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n)</span> </span>{
    <span class="hljs-keyword">return</span> (a &lt;&lt; n) | (a &gt;&gt; (<span class="hljs-number">32</span> - n));
}
</code></pre>
<ul>
<li>X[k]代表当前处理消息分组的第k个32位字，X[k]由第n轮迭代对应的顺序表决定</li>
<li>T[i]代表T表的第i项的值，T[i] = int(2^32 * |sin(i)|)</li>
<li>S[i]对应第i轮的左循环移位的s值</li>
</ul>
</li>
<li>
<p>对分组（A,B,C,D）作循环轮换<br>
公式为：（B,C,D,A）&lt;=（A,B,C,D）</p>
</li>
<li>
<p>按照1， 2步骤进行四轮循环压缩</p>
</li>
</ol>
<pre class="highlight"><code class="C++">    <span class="hljs-comment">// 循环压缩</span>
 <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">iterateFunc</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* X, <span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span> = <span class="hljs-number">16</span>)</span> </span>{
     <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a = tempA,
                  b = tempB,
                  c = tempC,
                  d = tempD,
                  rec = <span class="hljs-number">0</span>,
                  g, k;
     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++) {
         <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">16</span>) {
             <span class="hljs-comment">// F迭代</span>
             g = F(b, c, d);
             k = i;
         }
         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">32</span>) {
             <span class="hljs-comment">// G迭代</span>
             g = G(b, c, d);
             k = (<span class="hljs-number">1</span> + <span class="hljs-number">5</span>*i) % <span class="hljs-number">16</span>;
         }
         <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">48</span>) {
             <span class="hljs-comment">// H迭代</span>
             g = H(b, c, d);
             k = (<span class="hljs-number">5</span> + <span class="hljs-number">3</span>*i) % <span class="hljs-number">16</span>;
         }
         <span class="hljs-keyword">else</span> {
             <span class="hljs-comment">// I迭代</span>
             g = I(b, c, d);
             k = (<span class="hljs-number">7</span>*i) % <span class="hljs-number">16</span>;
         }
         rec = d;
         d = c;
         c = b;
         b = b + shift(a + g + X[k] + T[i], s[i]);
         a = rec;
     }
     tempA += a;
     tempB += b;
     tempC += c;
     tempD += d;
 }
</code></pre>
</li>
<li>
<p>MD5编码主函数：用于调用前面的功能函数对明文字符串进行MD5编码</p>
<ol>
<li>输入待加密的明文字符串</li>
<li>对明文字符串进行填充</li>
<li>对填充后的明文字符串进行分块（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>Y</mi><mi>q</mi></msub></mrow><annotation encoding="application/x-tex">Y_q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.969438em;vertical-align:-0.286108em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span>）</li>
<li>使用预设的初始值初始化MD5缓冲区间（IV）</li>
<li>对各个分块字符串利用公式HMD5(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><msub><mi>V</mi><mo stretchy="false">(</mo></msub><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo separator="true">,</mo><msub><mi>Y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">CV_(i-1), Y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.03853em;vertical-align:-0.3551999999999999em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.34480000000000005em;"><span style="top:-2.5198em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mopen mtight">(</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3551999999999999em;"><span></span></span></span></span></span></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)进行循环压缩，运算结果作为下一块的输入（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><msub><mi>V</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">CV_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）</li>
<li>当所有的分块迭代完成后，输出结果<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><msub><mi>V</mi><mi>L</mi></msub></mrow><annotation encoding="application/x-tex">CV_L</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">L</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，L表示最后一个分块的序号</li>
</ol>
<pre class="highlight"><code class="C++"><span class="hljs-comment">// MD5加密函数</span>
 <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">encode</span><span class="hljs-params">(<span class="hljs-built_in">string</span> src)</span> </span>{
     <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; rec = padding(src);
     <span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; strlength/<span class="hljs-number">16</span>; i++) {
         <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num[<span class="hljs-number">16</span>];
         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++) {
             num[j] = rec[i*<span class="hljs-number">16</span>+j];
         }
         iterateFunc(num, <span class="hljs-number">16</span>);
     }
     <span class="hljs-keyword">return</span> format(tempA) + format(tempB) + format(tempC) + format(tempD);
 }
</code></pre>
</li>
</ol>
<h2><span id="程序流程图"> 程序流程图</span></h2>
<p><img src="https://s2.loli.net/2022/05/23/Uj4DuPtrp7wq82v.png" alt="result4"></p>
<h2><span id="测试结果"> 测试结果</span></h2>
<p>对测试数据进行测试，测试结果如下：<br>
<img src="https://s2.loli.net/2022/05/23/1blRcNfZUIHEsOu.png" alt="result1"><br>
<img src="https://s2.loli.net/2022/05/23/3SCV7qa4QboycfD.png" alt="result"></p>
<h2><span id="雪崩测试"> 雪崩测试</span></h2>
<p>对每个测试数据均在字符串末尾加上一个空格得到密文改变位数如下<br>
<img src="https://s2.loli.net/2022/05/23/mz6sGwdfiHr5lQD.png" alt="result2"></p>
<table>
<thead>
<tr>
<th style="text-align:center">数据i</th>
<th style="text-align:center">1</th>
<th style="text-align:center">2</th>
<th style="text-align:center">3</th>
<th style="text-align:center">4</th>
<th style="text-align:center">5</th>
<th style="text-align:center">6</th>
<th style="text-align:center">7</th>
<th style="text-align:center">平均改变位数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">改变位数</td>
<td style="text-align:center">31</td>
<td style="text-align:center">28</td>
<td style="text-align:center">29</td>
<td style="text-align:center">30</td>
<td style="text-align:center">30</td>
<td style="text-align:center">29</td>
<td style="text-align:center">28</td>
<td style="text-align:center">29</td>
</tr>
</tbody>
</table>
<h2><span id="源代码"> 源代码</span></h2>
<pre class="highlight"><code class="C++"><span class="hljs-comment">//MD5.h</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> A 0x67452301</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> B 0xefcdab89</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> C 0x98badcfe</span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> D 0x10325476</span>

<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> str16[] = <span class="hljs-string">"0123456789abcdef"</span>;

<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> T[] = {
    <span class="hljs-number">0xd76aa478</span>,<span class="hljs-number">0xe8c7b756</span>,<span class="hljs-number">0x242070db</span>,<span class="hljs-number">0xc1bdceee</span>,
    <span class="hljs-number">0xf57c0faf</span>,<span class="hljs-number">0x4787c62a</span>,<span class="hljs-number">0xa8304613</span>,<span class="hljs-number">0xfd469501</span>,
    <span class="hljs-number">0x698098d8</span>,<span class="hljs-number">0x8b44f7af</span>,<span class="hljs-number">0xffff5bb1</span>,<span class="hljs-number">0x895cd7be</span>,
    <span class="hljs-number">0x6b901122</span>,<span class="hljs-number">0xfd987193</span>,<span class="hljs-number">0xa679438e</span>,<span class="hljs-number">0x49b40821</span>,
    <span class="hljs-number">0xf61e2562</span>,<span class="hljs-number">0xc040b340</span>,<span class="hljs-number">0x265e5a51</span>,<span class="hljs-number">0xe9b6c7aa</span>,
    <span class="hljs-number">0xd62f105d</span>,<span class="hljs-number">0x02441453</span>,<span class="hljs-number">0xd8a1e681</span>,<span class="hljs-number">0xe7d3fbc8</span>,
    <span class="hljs-number">0x21e1cde6</span>,<span class="hljs-number">0xc33707d6</span>,<span class="hljs-number">0xf4d50d87</span>,<span class="hljs-number">0x455a14ed</span>,
    <span class="hljs-number">0xa9e3e905</span>,<span class="hljs-number">0xfcefa3f8</span>,<span class="hljs-number">0x676f02d9</span>,<span class="hljs-number">0x8d2a4c8a</span>,
    <span class="hljs-number">0xfffa3942</span>,<span class="hljs-number">0x8771f681</span>,<span class="hljs-number">0x6d9d6122</span>,<span class="hljs-number">0xfde5380c</span>,
    <span class="hljs-number">0xa4beea44</span>,<span class="hljs-number">0x4bdecfa9</span>,<span class="hljs-number">0xf6bb4b60</span>,<span class="hljs-number">0xbebfbc70</span>,
    <span class="hljs-number">0x289b7ec6</span>,<span class="hljs-number">0xeaa127fa</span>,<span class="hljs-number">0xd4ef3085</span>,<span class="hljs-number">0x04881d05</span>,
    <span class="hljs-number">0xd9d4d039</span>,<span class="hljs-number">0xe6db99e5</span>,<span class="hljs-number">0x1fa27cf8</span>,<span class="hljs-number">0xc4ac5665</span>,
    <span class="hljs-number">0xf4292244</span>,<span class="hljs-number">0x432aff97</span>,<span class="hljs-number">0xab9423a7</span>,<span class="hljs-number">0xfc93a039</span>,
    <span class="hljs-number">0x655b59c3</span>,<span class="hljs-number">0x8f0ccc92</span>,<span class="hljs-number">0xffeff47d</span>,<span class="hljs-number">0x85845dd1</span>,
    <span class="hljs-number">0x6fa87e4f</span>,<span class="hljs-number">0xfe2ce6e0</span>,<span class="hljs-number">0xa3014314</span>,<span class="hljs-number">0x4e0811a1</span>,
    <span class="hljs-number">0xf7537e82</span>,<span class="hljs-number">0xbd3af235</span>,<span class="hljs-number">0x2ad7d2bb</span>,<span class="hljs-number">0xeb86d391</span> };

<span class="hljs-keyword">const</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> s[] = { <span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,<span class="hljs-number">7</span>,<span class="hljs-number">12</span>,<span class="hljs-number">17</span>,<span class="hljs-number">22</span>,
                           <span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">14</span>,<span class="hljs-number">20</span>,
                           <span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">23</span>,<span class="hljs-number">4</span>,<span class="hljs-number">11</span>,<span class="hljs-number">16</span>,<span class="hljs-number">23</span>,
                           <span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">15</span>,<span class="hljs-number">21</span>};

<span class="hljs-comment">// 第一部分是要进行 HASH 运算的原始明文，第二部分则是其对应的 HASH 值</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">data</span>{</span>
    <span class="hljs-built_in">string</span> msg;
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> hash[<span class="hljs-number">16</span>];
}tests[] = {
    { <span class="hljs-string">""</span>,
      { <span class="hljs-number">0xd4</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x04</span>, 
        <span class="hljs-number">0xe9</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7e</span> } },
    { <span class="hljs-string">"a"</span>,
      {<span class="hljs-number">0x0c</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0xc0</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xa8</span>, 
       <span class="hljs-number">0x31</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x61</span> } },
    { <span class="hljs-string">"abc"</span>,
      { <span class="hljs-number">0x90</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xb0</span>, 
        <span class="hljs-number">0xd6</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x72</span> } },
    { <span class="hljs-string">"message digest"</span>, 
      { <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0xb7</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x8d</span>, 
        <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xd0</span> } }, 
    { <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>,
      { <span class="hljs-number">0xc3</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x00</span>, 
        <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0xca</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x3b</span> } },
    { <span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>,
      { <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xd2</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0xf5</span>, 
        <span class="hljs-number">0xa5</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x9f</span> } },
    { <span class="hljs-string">"12345678901234567890123456789012345678901234567890123456789012345678901234567890"</span>,
      { <span class="hljs-number">0x57</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x55</span>, 
        <span class="hljs-number">0xac</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0x7a</span> } },

};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MD5</span> {</span>
<span class="hljs-keyword">private</span>:
    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> tempA, tempB, tempC, tempD, strlength;
<span class="hljs-keyword">public</span>:
    MD5() {
        tempA = A;
        tempB = B;
        tempC = C;
        tempD = D;
        strlength = <span class="hljs-number">0</span>;
    }
    <span class="hljs-comment">// 填充字符串</span>
    <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; <span class="hljs-title">padding</span><span class="hljs-params">(<span class="hljs-built_in">string</span> src)</span> </span>{
        <span class="hljs-comment">// 以512位,64个字节为一组</span>
        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num = ((src.length() + <span class="hljs-number">8</span>) / <span class="hljs-number">64</span>) + <span class="hljs-number">1</span>;
        <span class="hljs-function"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; <span class="hljs-title">rec</span><span class="hljs-params">(num*<span class="hljs-number">16</span>)</span></span>;
        strlength = num*<span class="hljs-number">16</span>;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; src.length(); i++){
            <span class="hljs-comment">// 一个unsigned int对应4个字节，保存4个字符信息</span>
            rec[i&gt;&gt;<span class="hljs-number">2</span>] |= (<span class="hljs-keyword">int</span>)(src[i]) &lt;&lt; ((i % <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);
        }
        <span class="hljs-comment">// 补充1000...000</span>
        rec[src.length() &gt;&gt; <span class="hljs-number">2</span>] |= (<span class="hljs-number">0x80</span> &lt;&lt; ((src.length() % <span class="hljs-number">4</span>)*<span class="hljs-number">8</span>));
        <span class="hljs-comment">// 填充原文长度</span>
        rec[rec.<span class="hljs-built_in">size</span>()<span class="hljs-number">-2</span>] = (src.length() &lt;&lt; <span class="hljs-number">3</span>);
        <span class="hljs-keyword">return</span> rec;
    }
    <span class="hljs-comment">// F函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
        <span class="hljs-keyword">return</span> (b &amp; c) | ((~b) &amp; d);
    }
    <span class="hljs-comment">// G函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">G</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
        <span class="hljs-keyword">return</span> (b &amp; d) | (c &amp; (~d));
    }
    <span class="hljs-comment">// H函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">H</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
        <span class="hljs-keyword">return</span> b ^ c ^ d;
    }
    <span class="hljs-comment">// I函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">I</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> c, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> d)</span> </span>{
        <span class="hljs-keyword">return</span> c ^ (b | (~d));
    }
    <span class="hljs-comment">// 移位操作函数</span>
    <span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">shift</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> n)</span> </span>{
        <span class="hljs-keyword">return</span> (a &lt;&lt; n) | (a &gt;&gt; (<span class="hljs-number">32</span> - n));
    }
    <span class="hljs-comment">// 循环压缩</span>
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">iterateFunc</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>* X, <span class="hljs-keyword">int</span> <span class="hljs-built_in">size</span> = <span class="hljs-number">16</span>)</span> </span>{
        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> a = tempA,
                     b = tempB,
                     c = tempC,
                     d = tempD,
                     rec = <span class="hljs-number">0</span>,
                     g, k;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++) {
            <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">16</span>) {
                <span class="hljs-comment">// F迭代</span>
                g = F(b, c, d);
                k = i;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">32</span>) {
                <span class="hljs-comment">// G迭代</span>
                g = G(b, c, d);
                k = (<span class="hljs-number">1</span> + <span class="hljs-number">5</span>*i) % <span class="hljs-number">16</span>;
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">48</span>) {
                <span class="hljs-comment">// H迭代</span>
                g = H(b, c, d);
                k = (<span class="hljs-number">5</span> + <span class="hljs-number">3</span>*i) % <span class="hljs-number">16</span>;
            }
            <span class="hljs-keyword">else</span> {
                <span class="hljs-comment">// I迭代</span>
                g = I(b, c, d);
                k = (<span class="hljs-number">7</span>*i) % <span class="hljs-number">16</span>;
            }
            rec = d;
            d = c;
            c = b;
            b = b + shift(a + g + X[k] + T[i], s[i]);
            a = rec;
        }
        tempA += a;
        tempB += b;
        tempC += c;
        tempD += d;
    }
    <span class="hljs-comment">// 整理输出</span>
    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">format</span><span class="hljs-params">(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num)</span> </span>{
        <span class="hljs-built_in">string</span> res = <span class="hljs-string">""</span>;
        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> base = <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>;
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) {
            <span class="hljs-built_in">string</span> tmp = <span class="hljs-string">""</span>;
            <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> b = (num &gt;&gt; (i * <span class="hljs-number">8</span>)) % base &amp; <span class="hljs-number">0xff</span>;
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) {
                tmp = str16[b%<span class="hljs-number">16</span>] + tmp;
                b /= <span class="hljs-number">16</span>;
            }
            res += tmp;
        }
        <span class="hljs-keyword">return</span> res;
    }
    <span class="hljs-comment">// 编码函数</span>
    <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">encode</span><span class="hljs-params">(<span class="hljs-built_in">string</span> src)</span> </span>{
        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>&gt; rec = padding(src);
        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; strlength/<span class="hljs-number">16</span>; i++) {
            <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num[<span class="hljs-number">16</span>];
            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">16</span>; j++) {
                num[j] = rec[i*<span class="hljs-number">16</span>+j];
            }
            iterateFunc(num, <span class="hljs-number">16</span>);
        }
        <span class="hljs-keyword">return</span> format(tempA) + format(tempB) + format(tempC) + format(tempD);
    }
};
</code></pre>
<pre class="highlight"><code class="C++">\\MD5.cpp
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;iostream&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;vector&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;cstdlib&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span>
<span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">"MD5.h"</span></span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{
    MD5 test;
    <span class="hljs-built_in">string</span> a = <span class="hljs-string">""</span>;
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Plain Text: "</span>;
    getline(<span class="hljs-built_in">cin</span>,a);
    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"result: "</span> &lt;&lt; test.encode(a) &lt;&lt; <span class="hljs-built_in">endl</span>;
    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre>
]]></content>
      <tags>
        <tag>Homework</tag>
        <tag>密码学</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Eclipse安卓开发中的文件调用</title>
    <url>/blog/2022/05442e8a7e.html</url>
    <content><![CDATA[<h2><span id="问题描述"> 问题描述</span></h2>
<p>最近在用Eclipse做Android的时候使用jxl库简单处理了xls文件，由于我对xls文件处理不太熟练，于是创建了一个Java项目进行简单测试，没问题之后直接在安卓项目使用，但是却发现<strong>即使我把xls文件放在assets文件夹下并在Build Path里面勾选了assets文件夹</strong>依旧会抛出找不到文件的错误：FileNotFoundException，采用了</p>
<pre class="highlight"><code class="java">file:<span class="hljs-comment">///android_asset/xxx.html</span>
</code></pre>
<p>和</p>
<pre class="highlight"><code class="java">/assets/xxx.xls
</code></pre>
<p>均没有效果，依旧会抛出错误。</p>
<h2><span id="问题原因"> 问题原因</span></h2>
<p>一般情况下我们在本地项目引用文件，直接用绝对路径或者相对路径都可以，这两者都可以在资源文件的属性里面查看，如下图所示：</p>
<p><img src="https://s2.loli.net/2022/05/18/r6SBcVZJkpTGbOE.png" alt="image-20220518100916219"></p>
<p>Android项目打包生成APK之后，会将项目打包成Jar包或者war包，此时就不会存在 assets/resources 目录，JVM会在编译项目时，主动将 java文件编译成 class文件 和 resources 下的静态文件放在 target/classes目录下；</p>
<p>也就是说我们在打包之后上述目录结构已经发生变化，此时再用原来的路径去索引文件，必然是索引不到的，那么我们还想去索引这个文件怎么办呢？</p>
<h2><span id="解决方案"> 解决方案</span></h2>
<p>我们可以用Java提供的方法获取文件流</p>
<pre class="highlight"><code class="Java">InputStream input = <span class="hljs-keyword">this</span>.getClass().getResourceAsStream(<span class="hljs-string">"/assets/xxx.xls"</span>);
</code></pre>
<p>从而去使用文件。</p>
<p>需要注意的是，路径的开头的 / 是不能少的，它代表的就是从src目录-根目录，而资源文件路径就是从src开始找，这样工程打包以后同样可以找到路径。</p>
<p>参考：<a href="https://www.cnblogs.com/blogtech/p/11151780.html">Java项目读取resources资源文件路径那点事 </a></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim参数推荐</title>
    <url>/blog/2022/0257c5ab7b.html</url>
    <content><![CDATA[<p>" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by<br>
" the call to :runtime you can find below.  If you wish to change any of those<br>
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim<br>
" will be overwritten everytime an upgrade of the vim packages is performed.<br>
" It is recommended to make changes after sourcing debian.vim since it alters<br>
" the value of the ‘compatible’ option.</p>
<p>runtime! debian.vim</p>
<p>" Vim will load $VIMRUNTIME/defaults.vim if the user does not have a vimrc.<br>
" This happens after /etc/vim/vimrc(.local) are loaded, so it will override<br>
" any settings in these files.<br>
" If you don’t want that to happen, uncomment the below line to prevent<br>
" defaults.vim from being loaded.<br>
" let g:skip_defaults_vim = 1</p>
<p>" Uncomment the next line to make Vim more Vi-compatible<br>
" NOTE: debian.vim sets ‘nocompatible’.  Setting ‘compatible’ changes numerous<br>
" options, so any other options should be set AFTER setting ‘compatible’.<br>
"set compatible</p>
<p>" Vim5 and later versions support syntax highlighting. Uncommenting the next<br>
" line enables syntax highlighting by default.<br>
syntax on</p>
<p>" If using a dark background within the editing area and syntax highlighting<br>
" turn on this option as well<br>
set background=dark</p>
<p>" Uncomment the following to have Vim jump to the last position when<br>
" reopening a file<br>
“au BufReadPost * if line(”’"") &gt; 1 &amp;&amp; line("’"") &lt;= line("$") | exe “normal! g’”" | endif</p>
<p>" Uncomment the following to have Vim load indentation rules and plugins<br>
" according to the detected filetype.<br>
if has(“autocmd”)<br>
filetype plugin indent on<br>
endif</p>
<p>" The following are commented out as they cause vim to behave a lot<br>
" differently from regular Vi. They are highly recommended though.<br>
"set showcmd		" Show (partial) command in status line.<br>
set showmatch		" Show matching brackets.<br>
set ignorecase		" Do case insensitive matching<br>
set smartcase		" Do smart case matching<br>
set incsearch		" Incremental search<br>
"set autowrite		" Automatically save before commands like :next and :make<br>
set hidden		" Hide buffers when they are abandoned<br>
"set mouse=a		" Enable mouse usage (all modes)</p>
<p>" Source a global configuration file if available<br>
if filereadable("/etc/vim/vimrc.local")<br>
source /etc/vim/vimrc.local<br>
endif</p>
<p>setlocal noswapfile<br>
set bufhidden = hide<br>
"colorscheme evening<br>
set number<br>
set cursorline<br>
set ruler<br>
set shiftwidth = 4<br>
set softtabstop = 4<br>
set tabstop = 4<br>
set nobackup<br>
set autochdir<br>
set backupcopy = yes<br>
set hlsearch<br>
set noerrorbells<br>
set novisualbell<br>
set t_vb=<br>
set matchtime=2<br>
set magic<br>
set smartindent<br>
set backspace=ident,eol,start<br>
set cmdheight=1<br>
set laststatus=2<br>
set statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&amp;fileformat}\ %{&amp;encoding}\ Ln\ %l.\Col\ %c/%L%)<br>
set foldenable<br>
set foldmethod=syntax<br>
set foldcolumn=0<br>
setlocal foldlevel=1<br>
nnoremap <space> @=((foldclosed(line(’,’)) &lt; 0) ? ‘zc’ : ‘zo’)<cr></cr></space></p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>物联网安全复习总结</title>
    <url>/blog/2022/018a8f3fb6.html</url>
    <content><![CDATA[<blockquote>
  <p>
    <font size="4" color="#7E0C6E">
      复习时随手记录，并不完整
    </font>
  </p>
</blockquote>
<h1><span id="物联网安全"> 物联网安全</span></h1>
<p>根据国际电信联盟的定义, 物联网( internet of things, IOT) 主要解决:</p>
<ul>
<li>物品到物品( thing to thing,T2T)</li>
<li>人到物品( human to thing, H2T)</li>
<li>人到人( human to human, H2H)之间的互联</li>
</ul>
<h2><span id="第1章-物联网安全需求分析"> 第1章 物联网安全需求分析</span></h2>
<p>与其他传统网络相比, 物联网感知节点大都部署在无人监控的场景中, 具有<strong>能力脆弱、资源受限</strong>等特点,这些都导致很难直接将传统计算机网络的安全算法和协议应用于物联网</p>
<p>从物联网的功能上来说，应该具备四个特征：</p>
<ul>
<li>一是<strong>全面感知能力</strong>，可以利用RFID、传感器、二维条形码等获取被控/被测物体的信息;</li>
<li>二是<strong>数据信息的可靠传递</strong>，可以通过各种电信网络与互联网的融合，将物体的信息实时准确地传递出去;</li>
<li>三是<strong>可以智能处理</strong>，利用现代控制技术提供的智能计算方法，对大量数据和信息进行分析和处理，对物体实施智能化的控制。</li>
<li>四是可以根据各个行业、各种业务的具体特点形成各种单独的业务应用，或者整个行业及系统的建成应用解决方案</li>
</ul>
<p><strong>物联网结构和层次：</strong></p>
<ul>
<li>感知识别层：重点考虑数据隐私的保护；
<ul>
<li>传感器，RFID，二维条形码…</li>
</ul>
</li>
<li>网络构建层：重点考虑网络传输安全；
<ul>
<li>互联网</li>
<li>无线宽带网</li>
<li>无线低速网</li>
<li>移动通信网</li>
</ul>
</li>
<li>管理服务层：重点考虑信息安全；
<ul>
<li>管理服务层位于感知识别和网络构建层之上，综合应用层之下，人们通常把物联网应用冠以“智能”的名称，如智能电网、智能交通、智能物流等，其中的智慧就来自这一层</li>
<li>数据库：海量性，多态性，关联性，语义性</li>
<li>海量信息存储：网络附加存储（NAS ，Network Attached Storage）和专用存储区域网络（SAN ,Storage Area Network）</li>
<li>数据中心</li>
<li>搜索引擎</li>
<li>数据挖掘技术</li>
</ul>
</li>
<li>综合应用层：重点考虑应用系统安全；
<ul>
<li>智能物流</li>
<li>智能交通</li>
<li>绿色建筑</li>
<li>智能电网</li>
<li>环境监测</li>
</ul>
</li>
</ul>
<p>与互联网相比, 物联网主要实现人与物、物与物之间的通信, 通信的对象扩大到了物品。</p>
<p>感知层的安全需求可以总结为如下几点：</p>
<ol>
<li>机密性：多数网络内部不需要认证和密钥管理，如统一部署的共享一个密钥的传感网。</li>
<li>密钥协商：部分内部节点进行数据传输前需要预先协商会话密钥。</li>
<li>节点认证：个别网络（特别当数据共享时）需要节点认证，确保非法节点不能接入。</li>
<li>信誉评估：一些重要网络需要对可能被敌手控制的节点行为进行评估，以降低敌手入侵后的危害（某种程度上相当于入侵检测）。</li>
<li>安全路由：几乎所有网络内部都需要不同的安全路由技术。</li>
</ol>
<p>物联网网络构建层将会主要遇到下列安全挑战：</p>
<ol>
<li>拒绝服务攻击（DOS）攻击、分布式拒绝服务攻击（DDOS）攻击；</li>
<li>假冒攻击、中间人攻击等；</li>
<li>跨异构网络的网络攻击。</li>
</ol>
<p>网络构建层的安全机制可分为端到端机密性和节点到节点机密性。</p>
<p>对于端到端机密性，需要建立如下安全机制：</p>
<ul>
<li>端到端认证机制、</li>
<li>端到端密钥协商机制、</li>
<li>密钥管理机制</li>
<li>机密性算法选取机制等。</li>
</ul>
<p>管理服务层的安全挑战包括如下几个方面：</p>
<ol>
<li>来自于超大量终端的海量数据的识别和处理；</li>
<li>智能变为低能；</li>
<li>自动变为失控（可控性是信息安全的重要指标之一）；</li>
<li>灾难控制和恢复；</li>
<li>非法人为干预（内部攻击）；</li>
<li>设备（特别是移动设备）的丢失</li>
</ol>
<p>为了满足物联网智能管理服务层的基本安全需求，需要如下的安全机制。</p>
<ol>
<li>可靠的认证机制和密钥管理方案；</li>
<li>高强度数据机密性和完整性服务；</li>
<li>可靠的密钥管理机制，包括PKI和对称密钥的有机结合机制；</li>
<li>可靠的高智能处理手段；</li>
<li>入侵检测和病毒检测；</li>
<li>恶意指令分析和预防，访问控制及灾难恢复机制；</li>
<li>保密日志跟踪和行为分析，恶意行为模型的建立；</li>
<li>密文查询、秘密数据挖掘、安全多方计算、安全云计算技术等；</li>
<li>移动设备文件（包括秘密文件）的可备份和恢复；</li>
<li>移动设备识别、定位和追踪机制</li>
</ol>
<p>应用层的安全挑战和安全需求主要来自于：</p>
<ol>
<li>如何根据不同访问权限对同一数据库内容进行筛选；</li>
<li>如何提供用户隐私信息保护，同时又能正确认证；</li>
<li>如何解决信息泄露追踪问题；</li>
<li>如何进行计算机取证；</li>
<li>如何销毁计算机数据；</li>
<li>如何保护电子产品和软件的知识产权。</li>
</ol>
<p>基于物联网综合应用层的安全挑战和安全需求，需要如下的安全机制：</p>
<ol>
<li>有效的数据库访问控制和内容筛选机制；</li>
<li>不同场景的隐私信息保护技术；</li>
<li>叛逆追踪和其他信息泄露追踪机制；</li>
<li>有效的计算机取证技术；</li>
<li>安全的计算机数据销毁技术；</li>
<li>安全的电子产品和软件的知识产权保护技术</li>
</ol>
<h2><span id="第2章-物联网安全技术框架"> 第2章 物联网安全技术框架</span></h2>
<p>现代经常涉及的信息安全技术主要有数据加密、身份认证、访问控制和口令、数字证书、电子签证机关（CA）、数字签名等常用信息安全技术</p>
<h3><span id="安全技术简介"> 安全技术简介</span></h3>
<ol>
<li>数据加密</li>
<li>身份验证</li>
<li>访问控制
<ol>
<li>自由访问控制：用户有权对自身所创建的访问对象进行访问</li>
<li>强制访问控制，按照系统规则对用户所创建对象进行控制，即便是创建者，也可能无权访问对象</li>
</ol>
</li>
<li>口令（密码）：实际上，弱口令。缺省口令和没有口令的账号均应该从数据库中删除
<ol>
<li>网络数据流窃听口令，如果明文传输，则可能被窃取</li>
<li>认证消息截取/重放，用加密口令实现系统登录</li>
<li>字典攻击</li>
<li>穷举攻击，字典攻击的加强版，使用字符串的全集作为字典</li>
<li>窥探，窥探合法用户输入口令过程</li>
<li>社交工程</li>
<li>垃圾搜索</li>
</ol>
</li>
<li>数字证书：一个数字文件，一般由四部分构成
<ol>
<li>持有人的姓名，地址等信息</li>
<li>公开密钥</li>
<li>证书序号，有效期限</li>
<li>发证单位的数字签名</li>
</ol>
</li>
<li>数字签名
<ol>
<li>本身是一种解密过程，而且是非对称密钥，类似于与校验和</li>
<li>使用用途，区别身份，鉴权，保证完整性，不可抵赖（即承认发送来源）</li>
</ol>
</li>
</ol>
<p>数据加密</p>
<ul>
<li>分类
<ul>
<li>私用密钥（对称密钥）
<ul>
<li>信息的发送方和接收方使用同一个密钥进行加密和解密</li>
<li>适合对大数据量进行加密，密钥管理困难</li>
</ul>
</li>
<li>公共密钥（非对称密钥）
<ul>
<li>信息发送者用公开密钥去加密，而信息接收者则用私用密钥去解密。公钥机制灵活，但加密和解密速度却比对称密钥加密慢得多</li>
<li>能够完成发送方的身份认证和接收方无法伪造报文的功能</li>
</ul>
</li>
<li>通过公钥推算出私钥的算法必须不可能实现</li>
</ul>
</li>
</ul>
<h3><span id="物联网中的加密机制"> 物联网中的加密机制</span></h3>
<p>传统的IP网络加密：需要在感知层运行加密/解密算法，需要存储开销，CPU开销，而且需要能量</p>
<ol>
<li>节点认证机制：PKI（Public Key Infrastructure ）即“公钥基础设施”，是一种遵循既定标准的密钥管理平台,它能够为所有网络应用提供加密和数字签名等密码服务及所必需的密钥和证书管理体系。简单来说，PKI就是利用公钥理论和技术建立的提供安全服务的基础设施</li>
<li>访问控制，由给人授权访问转变为给机器授权访问</li>
<li>态势分析及其他：评估现在以及未来一段时间内的网络运行状态</li>
</ol>
<p>实现统一的密钥管理系统可以采用两种方式:</p>
<ul>
<li>一是以互联网为中心的集中式管理方式</li>
<li>二是以各自网络为中心的分布式管理方式</li>
</ul>
<p>其安全需求体现在</p>
<ol>
<li>密钥生成或更新算法的安全性</li>
<li>前向私密性</li>
<li>后向私密性或可扩展性</li>
<li>抗同谋攻击</li>
<li>源端认证和新鲜性</li>
</ol>
<h2><span id="第3章-密码与身份认证技术"> 第3章 密码与身份认证技术</span></h2>
<h3><span id="密码学基本概念"> 密码学基本概念</span></h3>
<p>密码学是主要研究通信安全和保密的学科，他包括两个分支：密码编码学和密码分析学</p>
<ul>
<li>密码编码学主要研究对信息进行变换，以保护信息在传递过程中不被敌方窃取、解读和利用的方法</li>
<li>密码分析学则于密码编码学相反，它主要研究如何分析和破译密码</li>
</ul>
<p>使用密码学可以达到以下目的：</p>
<ol>
<li>保密性：防止用户的标识或数据被读取。</li>
<li>数据完整性：防止数据被更改。</li>
<li>身份验证：确保数据发自特定的一方</li>
</ol>
<p>加密算法应在公开时不影响明文和密钥的安全</p>
<p>从密码学发展历程来看，可分为：</p>
<ul>
<li>古典密码（以字符为基本加密单元的密码）
<ul>
<li>代替密码
<ul>
<li>单表替换密码
<ul>
<li>凯撒密码：某字母用右边第k个字母表示，Z后面是A</li>
<li>密钥短语密码</li>
</ul>
</li>
<li>同音替换密码</li>
<li>多字母 组替换 密码</li>
<li>多表替换密码</li>
</ul>
</li>
<li>置换密码</li>
</ul>
</li>
<li>现代密码（以信息块为基本加密单元的密码）
<ul>
<li>分组密码</li>
<li>流密码</li>
</ul>
</li>
</ul>
<p>密钥加密系统</p>
<ul>
<li>对称密码系统的安全性依赖于以下两个因素。
<ul>
<li>第一，加密算法必须是足够强的，仅仅基于密文本身去解密信息在实践上是不可能的；</li>
<li>第二，加密方法的安全性依赖于密钥的秘密性，而不是算法的秘密性，因此我们没有必要确保算法的秘密性，而需要保证密钥的秘密性</li>
<li>对称密码体制的特点是：对称加密算法使用起来简单快捷，密钥较短，且破译困难。
<ol>
<li>密钥难于安全传送。</li>
<li>密钥量太大，难于进行管理。</li>
<li>无法满足互不相识的人进行私人谈话时保密要求。</li>
<li>难于解决数字签名验证的问题。</li>
</ol>
</li>
</ul>
</li>
<li>相对于对称密钥密码体系，非对称密钥加密系统最大的特点在于加密和解密使用不同的密钥
<ul>
<li>非对称密钥技术的优点是：易于实现，使用灵活，密钥较少，可以满足互不相识的人之间进行私人谈话时的保密性要求，可以完成数字签名和数字鉴别。</li>
<li>弱点在于：要取得较好的加密效果和强度，必须使用较长的密钥。</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/05/yjtSYm7vFAwiCfh.png" alt="image-20220105204726516"></p>
<h3><span id="现代加密算法"> 现代加密算法</span></h3>
<h4><span id="对称加密算法"> 对称加密算法</span></h4>
<p>在对称加密算法中，只有一个密钥用来加密和解密信息，即加密和解密采用相同的密钥。常用的算法包括：</p>
<ul>
<li>DES（Data Encryption Standard）：
<ul>
<li>数据加密标准，速度较快，适用于加密大量数据的场合。</li>
</ul>
</li>
<li>3DES（Triple DES）：
<ul>
<li>是基于DES，对一块数据用三个不同的密钥进行三次加密，强度更高。</li>
</ul>
</li>
<li>AES（Advanced Encryption Standard）：
<ul>
<li>AES高级加密标准，是下一代的加密算法标准，速度快，安全级别高</li>
</ul>
</li>
</ul>
<h4><span id="非对称加密算法"> 非对称加密算法</span></h4>
<ul>
<li>RSA：由 RSA 公司发明，是一个支持变长密钥的公共密钥算法，需要加密的文件块的长度也是可变的；
<ul>
<li>RSA是第一个既能用于数据加密也能用于数字签名的算法</li>
</ul>
</li>
<li>DSA（Digital Signature Algorithm）：
<ul>
<li>数字签名算法，是一种标准的 DSS（数字签名标准）；</li>
<li>除了加密外，公开密钥密码学最显著的成就是实现了数字签名。</li>
</ul>
</li>
</ul>
<p>加密算法的选择</p>
<p>我们应该根据自己的使用特点来确定：</p>
<ul>
<li>由于非对称加密算法的运行速度比对称加密算法的速度慢很多，当我们需要加密大量的数据时，建议采用对称加密算法，提高加解密速度。</li>
<li><strong>对称加密算法不能实现签名</strong>，因此签名只能非对称算法。</li>
<li>由于对称加密算法的密钥管理是一个复杂的过程，密钥的管理直接决定着他的安全性，因此当数据量很小时，我们可以考虑采用非对称加密算法。</li>
</ul>
<p>在实际的操作过程中，我们通常采用的方式是：</p>
<ul>
<li>采用非对称加密算法管理对称算法的密钥，然后用对称加密算法加密数据，这样我们就集成了两类加密算法的优点，既实现了加密速度快的优点，又实现了安全方便管理密钥的优点。</li>
</ul>
<h3><span id="认证与身份证明"> 认证与身份证明</span></h3>
<p>身份证明系统的组成</p>
<ol>
<li>示证者P(Prover)，出示证件的人，又称作申请者(Claimant)，提出某种要求；</li>
<li>验证者V(Verifier)，检验示证者提出的证件的正确性和合法性，决定是否满足其要求；</li>
<li>攻击者，可以窃听和伪装示证者骗取验证者的信任。</li>
<li>可信赖者，参与调解纠纷。必要时的第四方</li>
</ol>
<h3><span id="物联网认证与访问控制"> 物联网认证与访问控制</span></h3>
<p>目前常用的身份识别技术可以分为两大类</p>
<ul>
<li>一类是基于密码技术的各种电子ID身份鉴别技术；</li>
<li>另一类是基于生物特征识别的识别技术</li>
</ul>
<p>基于零知识证明的识别技术</p>
<ul>
<li>零知识洞穴</li>
</ul>
<h2><span id="第4章-rfid系统安全与隐私"> 第4章 RFID系统安全与隐私</span></h2>
<p>RFID系统一般由3大部分构成：</p>
<ul>
<li>标签
<ul>
<li>标签放置在要识别的物体上，携带目标识别数据，是RFID系统真正的数据载体，由耦合元件以及微电子芯片(包含调制器、编码发生器、时钟及存储器)组成</li>
</ul>
</li>
<li>读写器
<ul>
<li>用于读或读/写标签数据的装置，由射频模块(发送器和接收器)、控制单元、与标签连接的藕合单元组成</li>
</ul>
</li>
<li>后台数据库
<ul>
<li>后台服务器包含数据库处理系统，存储和管理标签相关信息，如标签标识、阅读器定位、读取时间等</li>
</ul>
</li>
</ul>
<p>工作原理</p>
<ul>
<li>RFID系统的基本工作原理是：阅读器与标签之间通过无线信号建立双方通信的通道，阅读器通过天线发出电磁信号，电磁信号携带了阅读器向标签的查询指令。</li>
<li>当标签处于阅读器工作范围时，标签将从电磁信号中获得指令数据和能量，并根据指令将标签标识和数据以电磁信号的形式发送给阅读器，或根据阅读器的指令改写存储在RFID标签中的数据</li>
<li>阅读器可接收RFID标签发送的数据或向标签发送数据，并能通过标准接口与后台服务器通信网络进行对接，实现数据的通信传输。</li>
<li>根据标签能量获取方式，RFID系统工作方式可分为：近距离的电感耦合方式和远距离的电磁耦合方式</li>
</ul>
<p>RFID的安全和攻击模式</p>
<ul>
<li>安全
<ol>
<li>信息及隐私泄露</li>
<li>RFID的隐私威胁
<ol>
<li>隐私信息泄露</li>
<li>跟踪</li>
<li>效率和隐私保护的矛盾</li>
</ol>
</li>
</ol>
</li>
<li>攻击模式
<ol>
<li>窃听</li>
<li>中间人攻击</li>
<li>欺骗、重放、克隆
<ol>
<li>欺骗(spoofing)：基于已掌握的标签数据通过阅读器</li>
<li>重放(replaying)：将标签的回复记录并回放</li>
<li>克隆(cloning)：形成原来标签的一个副本</li>
</ol>
</li>
<li>拒绝服务攻击(Denial-of-service attack, DoS)拒绝服务攻击是通过不完整的交互请求消耗系统资源，使系统不能正常工作</li>
<li>物理破解(corrupt)物理破解采用如下一些步骤对RFID射频系统进行破坏</li>
<li>篡改信息(modification)进行非授权的修改或擦除标签数据，从而达到篡改信息的目的。</li>
<li>RFID病毒(virus, malware)包括EPC标签在内的RFID标签可以被用来携带病毒，并能攻击电脑系统。</li>
<li>其他隐患：RFID的安全和隐私问题涉及到的其他隐患还包括：电子破坏、屏蔽干扰和拆除等。</li>
</ol>
</li>
</ul>
<p>RFID系统根据分层模型可划分为3层：应用层、通信层和物理层，ISO／IEC 18000标准定义了读写器与标签之间的双向通信协议，其基本的通信模型如下图。</p>
<p><img src="https://s2.loli.net/2022/01/05/6SzTRxg5KlDH2cC.png" alt="image-20220105214519785"></p>
<p>安全RFID系统的基本特征</p>
<ol>
<li>机密性</li>
<li>完整性</li>
<li>可用性</li>
<li>真实性</li>
<li>隐私性</li>
</ol>
<h2><span id="第5章-wsn无线传感器网络安全"> 第5章 WSN无线传感器网络安全</span></h2>
<p>无线传感器网络与安全相关的特点</p>
<ol>
<li>资源受限，通信环境恶劣。</li>
<li>部署区域的安全无法保证，节点易失效。</li>
<li>网络无基础框架。</li>
<li>部署前地理位置具有不确定性。</li>
</ol>
]]></content>
      <categories>
        <category>复习</category>
      </categories>
      <tags>
        <tag>物联网安全</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title>编译系统原理复习提纲</title>
    <url>/blog/2022/0178868943.html</url>
    <content><![CDATA[<h1><span id="编译系统原理"> 编译系统原理</span></h1>
<p>[toc]</p>
<p><strong>内容过多，未完全整理</strong></p>
<h2><span id="题型设计"> 题型设计</span></h2>
<ul>
<li>单项选择（12*2）
<ul>
<li>编译阶段所做事情考察</li>
<li>编译器和解释器的区分</li>
<li>ϵ是空符号串</li>
<li>正则表达式本质上表述的是符号串集合</li>
<li>NFA，DFA和CFG</li>
</ul>
</li>
<li>设计题（6*4）
<ul>
<li>正则表达式表示的含义</li>
<li>设计正则表达式</li>
<li>设计上下文无关文法</li>
<li><img src="https://s2.loli.net/2022/01/02/qnjOP91pUJG8AND.png" alt="image-20220102183721573"></li>
</ul>
</li>
<li>解答题
<ul>
<li>Thompson构造法</li>
<li>子集构造法</li>
<li>终结符，非终结符，开始符号</li>
<li>消除左递归</li>
<li>构造预测分析表</li>
<li>流图</li>
<li>三地址码</li>
<li>优化</li>
</ul>
</li>
</ul>
<h2><span id="真题"> 真题</span></h2>
<p>C++编译器检查数组下标越界是在_____阶段?<br>
ϵ为空符号串</p>
<h2><span id="概述"> 概述</span></h2>
<p>广义的编译器：浏览器</p>
<p><img src="https://s2.loli.net/2022/01/02/3Anf8JchwoUvt17.png" alt="image-20220102012213479"></p>
<h3><span id="分析-综合模型"> 分析-综合模型</span></h3>
<p>两个基本部分</p>
<ul>
<li>分析：将源程序分解为基本组成部分，生成中间表示形式
<ul>
<li>中间表示形式：树</li>
<li>节点-操作</li>
<li>孩子-参数</li>
</ul>
</li>
<li>综合：从中间表示形式构建目标程序</li>
</ul>
<p>源程序分析的三个阶段</p>
<ul>
<li>线性分析/词法分析/扫描
<ul>
<li>由左至右扫描源程序字符序列➔token，单词（记号）——具有组合意义的字符序列</li>
<li>忽略空格、回车等，将字符组合为单词</li>
</ul>
</li>
<li>层次分析/语法分析
<ul>
<li>单词序列➔有意义的集合，语法单位</li>
<li>将词法分析产生的单词组合为语法短语</li>
<li>语法分析树：内部节点-运算符，叶节点-运算对象</li>
</ul>
</li>
<li>语义分析
<ul>
<li>检查程序各部分是否正确符合语义</li>
</ul>
</li>
</ul>
<p>语法结构的递归定义</p>
<ul>
<li>表达式</li>
</ul>
<ol>
<li>标识符是表达式</li>
<li>数是表达式</li>
<li>若expression1和expression2是表达式，则expression1 + expression2 、expression1 * expression2、( expression1 )也是表达式</li>
</ol>
<ul>
<li>1、2——基本规则，3——递归定义</li>
</ul>
<p>文法（grammar）</p>
<ul>
<li>语句（statement）定义</li>
</ul>
<ol>
<li>若identifier1是一个标识符，expression2是一个表达式，则identifier1 := expression2是一个语句</li>
<li>若expression1是一个表达式，statement2是一个语句，则while ( expression1 ) do statement2和if ( expression1 ) then statement2也是语句</li>
</ol>
<ul>
<li>文法：处理token相互关系和结构的一组规则</li>
</ul>
<p>程序优化技术现状</p>
<ul>
<li>CPU上的过程内优化基本成熟</li>
<li>过程间优化能力仍然受限</li>
<li>面向GPU等新型体系结构的编译优化还有空间</li>
</ul>
<h2><span id="一个简单的编译器"> 一个简单的编译器</span></h2>
<p>字符流 → 词法分析器 → 单词流 → 语法制导翻译器 → 中间表示形式</p>
<p>语法制导翻译器：语法分析 + 中间代码生成</p>
<h3><span id="语法定义"> 语法定义</span></h3>
<p>上下文无关文法：描述语言的语法结构</p>
<p>组成：</p>
<ol>
<li>一组终结符号，单词，基本符号</li>
<li>一组非终结符号（语法变量），语法范畴，语法概念</li>
<li>一组产生式，定义语法范畴
<ul>
<li>产生式：A→α</li>
<li>A—一个非终结符，左部</li>
<li>α—终结符或/与非终结符串，右部</li>
</ul>
</li>
<li>一个特定的非终结符——开始符号，start symbol</li>
</ol>
<p>几个概念</p>
<ul>
<li>Σ：有穷字母表，元素——符号</li>
<li>符号串：Σ中符号构成的有穷序列</li>
<li>空字：不含任何符号的序列，ε</li>
<li>Σ*：符号串全体，包括空字</li>
<li>φ：空集{}，区分ε，{}，{ε}</li>
<li>Σ*的子集U、V的积（连接）{ αβ|α ∈ U 且 β ∈ V}</li>
<li>UV≠VU，(UV)W=U(VW)</li>
<li>V自身的n次积（连接）记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">V^{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mn>0</mn></msup><mo>=</mo><mi>ε</mi></mrow><annotation encoding="application/x-tex">V^{0}={ε}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">ε</span></span></span></span></span></li>
<li>V的闭包（closure）
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>V</mi><mo>∗</mo><mo>=</mo><msup><mi>V</mi><mn>0</mn></msup><mo>⋃</mo><msup><mi>V</mi><mn>1</mn></msup><mo>⋃</mo><msup><mi>V</mi><mn>2</mn></msup><mo>⋃</mo><msup><mi>V</mi><mn>3</mn></msup><mo>⋃</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">V* = V^{0} ⋃ V^{1} ⋃ V^{2} ⋃ V^{3} ⋃ ...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∗</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.064118em;vertical-align:-0.25001em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋃</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋃</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋃</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋃</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span></li>
<li>每个符号串，都是V中符号串有限次连接</li>
</ul>
</li>
<li>正则闭包，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>V</mi><mo>+</mo></msup><mo>=</mo><mi>V</mi><mi>V</mi><mo>∗</mo></mrow><annotation encoding="application/x-tex">V^{+}=VV*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="mord">∗</span></span></span></span></li>
</ul>
<p>四元式定义上下文无关文法</p>
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>V</mi><mi>T</mi></msub><mo separator="true">,</mo><msub><mi>V</mi><mi>N</mi></msub><mo separator="true">,</mo><mi>S</mi><mo separator="true">,</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(V_{T}, V_{N}, S, P)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>T</mi></msub></mrow><annotation encoding="application/x-tex">V_{T}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：非空有限集，终结符号集合</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>V</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">V_{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：非空有限集，非终结符号集合</li>
<li>S：开始符号</li>
<li>P：产生式集合（有限集）
<ul>
<li>每个产生式形式A→α，其中</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mo>∈</mo><msub><mi>V</mi><mi>N</mi></msub><mo separator="true">,</mo><mi>α</mi><mo>∈</mo><mo stretchy="false">(</mo><msub><mi>V</mi><mi>T</mi></msub><mo>⋃</mo><msub><mi>V</mi><mi>N</mi></msub><mo stretchy="false">)</mo><mo>∗</mo></mrow><annotation encoding="application/x-tex">A ∈ V_{N},α ∈(V_{T} ⋃ V_{N})*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72243em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">⋃</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">∗</span></span></span></span></li>
<li>关于A的产生式S至少在某个产生式左部出现一次</li>
</ul>
</li>
</ul>
<p>符号约定</p>
<ul>
<li>
<p><em>expr → expr + digit</em></p>
</li>
<li>
<p><em>expr → expr – digit</em></p>
</li>
<li>
<p><em>expr → digit</em></p>
</li>
<li>
<p><em>digit</em> → 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</p>
</li>
<li>
<p>数字、运算符、黑体字符串——终结符</p>
</li>
<li>
<p>斜体字符串——非终结符</p>
</li>
<li>
<p>左部相同可合并，‘|’——“或”的意思<em>expr → expr + digit |  expr - digit | digit</em>候选式</p>
</li>
</ul>
<p>推导</p>
<ul>
<li>单词串(string)：0个或多个单词构成的序列</li>
<li>推导(derive)
<ul>
<li>由<strong>开始符号作为推导起点</strong></li>
<li>用产生式<strong>右部</strong>替换左部非终结符</li>
<li>反复替换，最终得到单词串</li>
</ul>
</li>
<li>语言(language)
<ul>
<li>语法所定义的语言——可由开始符号推导出的所有单词串的集合</li>
</ul>
</li>
</ul>
<p>二义性：多个语法分析树生成相同的单词串——多个意义</p>
<h3><span id="语法制导翻译"> 语法制导翻译</span></h3>
<ul>
<li>翻译：为生成代码，需保存语言结构的类型、代码位置、代码数量等</li>
<li>属性(attribute)：类型、串、内存位置等</li>
<li>语法制导翻译syntax-directed translation
<ul>
<li>语法制导定义syntax-directed definition</li>
<li>属性与语法结构相关联➔指明翻译方法</li>
<li>翻译模式，translation scheme</li>
</ul>
</li>
<li>表达式E的后缀形式Postfix(E)如何生成：
<ol>
<li>E为变量或常量：Postfix(E) = E</li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><msub><mi>E</mi><mn>1</mn></msub><mi>o</mi><mi>p</mi><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E = E_{1} op E_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，op—二元运算符，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>E</mi><mn>1</mn></msub><mi mathvariant="normal">、</mi><msub><mi>E</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">E_{1}、E_{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">、</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>—子表达式：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>f</mi><mi>i</mi><mi>x</mi><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>f</mi><mi>i</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mi>o</mi><mi>p</mi><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>f</mi><mi>i</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>f</mi><mi>i</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mi>o</mi><mi>p</mi></mrow><annotation encoding="application/x-tex">Postfix(E) = Postfix(E_{1} op E_{2})= Postfix(E_{1}) Postfix(E_{2}) op</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathdefault">o</span><span class="mord mathdefault">p</span></span></span></span></li>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>E</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">E = (E_{1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>：<br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>f</mi><mi>i</mi><mi>x</mi><mo stretchy="false">(</mo><mi>E</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mi>o</mi><mi>s</mi><mi>t</mi><mi>f</mi><mi>i</mi><mi>x</mi><mo stretchy="false">(</mo><msub><mi>E</mi><mn>1</mn></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Postfix(E) = Postfix(E_{1})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault">i</span><span class="mord mathdefault">x</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ol>
</li>
<li>(9 - 5) + 2 ➔9 5 - 2 +</li>
<li>9 - (5 + 2) ➔9 5 2 + -</li>
</ul>
<p>语法制导定义</p>
<ul>
<li>基于语言的上下文无关文法</li>
<li>语法符号——一组属性</li>
<li>产生式——一组语义规则(semantic rule)——属性值计算规则</li>
<li>CFG+语义规则➔语法制导定义</li>
</ul>
<p>语法制导翻译的基本过程（翻译——输入→输出映射过程）</p>
<ol>
<li>输入单词串x➔语法分析树</li>
<li>节点n标记为X，X.a——X的属性</li>
<li>计算节点n的X.a的值——利用X产生式的语义规则➔</li>
<li>“注释语法分析树”（annotated parse tree）</li>
</ol>
<p>语法制导定义的实现</p>
<ul>
<li>树的遍历：计算完所有孩子节点的属性，父节点才能计算自身属性</li>
<li>后序遍历，深度优先</li>
</ul>
<p>翻译模式</p>
<ul>
<li>translation scheme</li>
<li>同样基于上下文无关文法</li>
<li>语义动作（semantic action，程序片断）嵌入产生式的右部</li>
<li><img src="https://s2.loli.net/2022/01/02/a8GclC5wADqj6mY.png" alt="image-20220102171537472"></li>
<li>语法分析树添加额外节点</li>
<li>指明了语义动作执行顺序</li>
</ul>
<h3><span id="语法分析"> 语法分析</span></h3>
<ul>
<li>确定一个单词串是否可由一个文法生成</li>
<li>构造语法分析树</li>
<li>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy="false">)</mo><mi mathvariant="normal">➔</mi><mi>O</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(n^3)➔O(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">➔</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></li>
<li>自顶向下分析方法，top-down<br>
语法树构造——由根向叶<br>
适合手工编写语法分析器</li>
<li>自底向上分析方法，bottom-up<br>
语法树构造——由叶向根<br>
适用更多文法，自动生成工具</li>
</ul>
<p>自顶向下分析方法</p>
<ul>
<li>从根节点（标记为开始符号）开始构造语法树，不断重复以下步骤</li>
</ul>
<ol>
<li>对标记为NT A的节点n,选择一个关于A的产生式,利用产生式右部构造n的孩子节点</li>
<li>选择下一个没有扩展（构造孩子节点）的节点，对它执行1</li>
</ol>
<p><strong>平凡算法</strong></p>
<ol>
<li>初始状态，只有一个根节点，标记为开始符号，输入指针指向第一个单词</li>
<li>对于NT节点<br>
a) 选择产生式（尝试、回溯）构造孩子节点<br>
b) 对孩子节点从左至右继续分析</li>
<li>对于T节点<br>
a) 与当前输入单词进行比较<br>
b) 若匹配，输入指针前移，处理下一个节点<br>
c) 不匹配，可能需要回溯或报告错误</li>
</ol>
]]></content>
      <categories>
        <category>复习</category>
      </categories>
      <tags>
        <tag>Lex</tag>
        <tag>Yacc</tag>
        <tag>编译系统原理</tag>
        <tag>编译器</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络复习摘要</title>
    <url>/blog/2021/1210d148d4.html</url>
    <content><![CDATA[<h2><span id="概述"> 概述</span></h2>
<p>IPV4：32位地址<br>
IPv6：128位地址</p>
<p>Internet三个重要理念：<br>
➢ 互联网的开放理念<br>
➢ 互联网的自组织理念<br>
➢ 互联网的分享理念</p>
<p>统计多路复用：主机A和B的报文分组没有固定的到达模式，带宽按需共享，这<br>
种方式称为统计多路复用(statistical multiplexing)</p>
<p>网络流量具有很强的突发性，即不平稳，每个独立的流的峰值可能出现在不同时间</p>
<ul>
<li>结论：流越多，网络平均流量越平滑</li>
</ul>
<p>报文长度P ：单位“位(bit)”<br>
链路长度L ：单位“米”<br>
传输速率R ：单位“位/秒”<br>
传播时延PROP：电磁波在介质上传播的时间，单位“秒”</p>
<ul>
<li>PROP = L/C，其中C为电磁波传播速度</li>
</ul>
<p>传输时间TRANSP ：发送长度为P的报文所用的时间</p>
<ul>
<li>TRANSP = P/R，其中R为传输速率</li>
</ul>
<p>端端时延Latency：发送端开始传送第一位到接收端接收到最后一位所用的时间，在单一链路上计算方法为：</p>
<ul>
<li>Latency = PROP + TRANSP</li>
</ul>
<p>当报文分组到达时，如果出口链路忙，报文分组需要在路由器缓存中排队等待，会引入排队时延</p>
<p>往返时延RTT (Round-Trip Time)：从发送方发送数据开始，到发送方收到来自接收方的确认，经历的总时间</p>
<p>时延带宽积</p>
<ul>
<li>时延带宽积= 传播时延×带宽，即按比特计数的链路长度</li>
<li>若发送端连续发送数据，则在发送的第一个bit即将达到终点时，发送端就已经发送了时延带宽积个bit ，而这些bit都在链路上向前移动</li>
</ul>
<p>如何将端系统连接到边缘路由器？</p>
<ul>
<li>有线接入
<ul>
<li>数字用户线路(xDSL),电话线</li>
<li>混合光纤同轴电缆(HFC)，电视</li>
<li>光纤宽带(FTTH)，光纤</li>
<li>以太网(Ethernet)</li>
</ul>
</li>
<li>无线接入
<ul>
<li>无线局域网(WiFi)</li>
<li>移动通信网(4G/5G)</li>
</ul>
</li>
<li>注意两个指标：接入网速率、共享或专用</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/30/7tWiPUJMr5pfYGh.png" alt></p>
<p>网络协议的组成要素：</p>
<ul>
<li>语法：数据与控制信息的结构或格式(协议数据单元PDU)</li>
<li>语义：需要发出何种控制信息，完成何种动作以及做出何种响应</li>
<li>时序：事件实现顺序的详细说明</li>
</ul>
<p>接口层通常包括数据链路层和物理层</p>
<h2><span id="应用层协议及网络编程"> 应用层协议及网络编程</span></h2>
<h3><span id="应用协议与进程通信模型"> 应用协议与进程通信模型</span></h3>
<p>应用：可进行通信的、分布式进程<br>
➢ 运行于主机的用户空间<br>
➢ 通过交换消息(Messages)实现应用之间的交互<br>
➢ 例如：Email、Web等</p>
<p>应用层协议：应用层实体之间的通信规范<br>
➢ 定义应用交换的消息和收到消息后采取的行动<br>
➢ 使用下层协议(TCP、UDP)提供的通信服务</p>
<ul>
<li>内容：
<ul>
<li>消息的类型
<ul>
<li>如请求request、响应response</li>
</ul>
</li>
<li>消息的语法
<ul>
<li>如消息包含哪些字段、字段之间如何分割等</li>
</ul>
</li>
<li>消息的语义
<ul>
<li>字段中信息代表的具体含义</li>
</ul>
</li>
<li>消息的处理
<ul>
<li>进程何时发送消息、收到消息后的动作等</li>
</ul>
</li>
</ul>
</li>
<li>类型：
<ul>
<li>公共协议
<ul>
<li>RFC中定义的协议</li>
<li>可相互兼容</li>
<li>例如：HTTP、SMTP等</li>
</ul>
</li>
<li>专有协议
<ul>
<li>公司或组织专有</li>
<li>例如：Skype、QQ等</li>
</ul>
</li>
</ul>
</li>
<li>服务指标
<ul>
<li>数据丢失率
<ul>
<li>音视频等应用可以容忍一定的数据丢失</li>
<li>文件传输、远程登录等应用要求100%的数据可靠</li>
</ul>
</li>
<li>时延
<ul>
<li>网络电话、交互游戏等应用对时延有一定的要求</li>
</ul>
</li>
<li>带宽
<ul>
<li>多媒体等应用需要一定的带宽保证</li>
<li>有些应用则是弹性的</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>主机的地址标识</strong>:主机拥有一个唯一的32位的IPv4地址(或128位的IPv6地址)<br>
<strong>进程标识符</strong>：包括IP地址和端口号</p>
<ul>
<li>端口号举例:
<ul>
<li>Web服务器进程: 80</li>
<li>Email(SMTP)服务器进程: 25</li>
</ul>
</li>
</ul>
<h3><span id="进程间通信"> 进程间通信</span></h3>
<p>进程：主机中运行的程序</p>
<p>在同一台主机中，两个进程之间按照进程间通信方式进行交互通信(操作系统中定义)<br>
不同主机上的进程通信，需要通过交换信息来完成</p>
<p>客户/服务器(C/S)模型</p>
<ul>
<li>客户向服务器发出服务请求，并接收服务器的响应；服务器等待客户的请求并为客户提供服务</li>
<li>例如：Web浏览器/Web服务器；Email客户端/Email服务器</li>
<li>过程
<ul>
<li>服务器进程
<ul>
<li>被动等待</li>
<li>长久在线</li>
<li>固定IP地址</li>
<li>利用集群/云提供扩展性</li>
</ul>
</li>
<li>客户进程
<ul>
<li>启动与服务器的通信</li>
<li>可能为间歇性连接</li>
<li>可能使用动态IP地址</li>
<li>不与其他客户进行直接通信</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>对等计算(P2P)模型</p>
<ul>
<li>最小化(或根本不用)专用服务器</li>
<li>例如：Skype, BitTorrent等</li>
<li>过程
<ul>
<li>无长久在线的服务器</li>
<li>任意的终端系统之间都可能进行直接通信</li>
<li>端系统之间可能间歇性地进行连接</li>
<li>端系统可能使用动态的IP地址</li>
<li>高可扩展性但维护困难</li>
</ul>
</li>
</ul>
<h3><span id="传输层服务对应用层的支持"> 传输层服务对应用层的支持</span></h3>
<p>TCP服务:</p>
<ul>
<li>面向连接：客户与服务器之间需要建立连接</li>
<li>可靠传输：可保证传递数据无差错</li>
<li>流量控制：发送数据不会超过接收端的容纳容量</li>
<li>拥塞控制: 提供拥塞解决方案</li>
<li>不能提供：时延和带宽保证</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/30/FxYWvJU3wZMa8TK.png" alt="image-20211230165317149"></p>
<p>UDP服务:</p>
<ul>
<li>不可靠：不可靠的数据投递</li>
<li>不能提供：连接建立、可靠性、流量控制、拥塞控制、时延和带宽保证</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/30/Rcu3XknhwasqUFB.png" alt="image-20211230165144908"></p>
<p>一些常见Socket函数：</p>
<ul>
<li>
<p>accept():流方式</p>
</li>
<li>
<p>connect()：流方式</p>
</li>
<li>
<p>recv()：流方式</p>
</li>
<li>
<p>sendto()：数据报方式</p>
</li>
<li>
<p>recvfrom()：数据报方式</p>
</li>
</ul>
<p>常见CPU的字节序</p>
<ul>
<li>Big-Endian : PowerPC、IBM、Sun</li>
<li>Little-Endian : x86、DEC</li>
<li>ARM既可工作在Big-Endian，也可工作在Little-endian</li>
<li>网络使用的字节序：网络通信协议都使用Big-Endian编码序</li>
</ul>
<h3><span id="电子邮件系统"> 电子邮件系统</span></h3>
<ul>
<li>用户代理 (接口)
<ul>
<li>编辑和发送邮件</li>
<li>接收、读取和管理邮件</li>
<li>管理地址簿</li>
<li>无统一标准</li>
</ul>
</li>
<li>邮件服务器
<ul>
<li>邮箱：保存用户收到的消息</li>
<li>消息输出队列：消息的发送队列</li>
<li>SMTP协议：邮件服务器之间传递邮件使用的协议
<ul>
<li>smtp客户: 发送邮件端</li>
<li>smtp服务器: 接收邮件端</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>邮件地址：一对字符串，用于指定邮件接收者</p>
<ul>
<li>local-part@domain-name
<ul>
<li>domain-name: 域名</li>
<li>local-part: 域名中的邮箱名</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/30/d2qxW8JsOVpHjwC.png" alt="image-20211230173610962"></p>
<p>SMTP: 向服务器传递邮件</p>
<p>邮件访问协议: 从邮件服务器的邮箱中获取邮件</p>
<ul>
<li>POP: 邮局协议[RFC 1939]</li>
<li>IMAP: Internet邮件访问协议[RFC 2060]</li>
<li>HTTP: 超文本传输协议</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/30/R4gTbayMNApCIZu.png" alt="image-20211230173849016"></p>
<p>邮件消息格式</p>
<ul>
<li>信封
<ul>
<li>封装消息</li>
<li>内含传输邮件消息所需的一些信息
<ul>
<li>目的地址、优先级、安全级别等</li>
</ul>
</li>
</ul>
</li>
<li>消息
<ul>
<li>消息头
<ul>
<li>包含用户代理所需的一些控制信息</li>
</ul>
</li>
<li>消息体</li>
</ul>
</li>
</ul>
<h3><span id="文件传输服务与协议"> 文件传输服务与协议</span></h3>
<p><img src="https://s2.loli.net/2021/12/30/iIXSD1yjdH9zcam.png" alt="image-20211230174829409"></p>
<ul>
<li>基于TCP/IP的文件传输系统</li>
<li>客户/服务器模型
<ul>
<li>client: 初始化传输(无论上传还是下载)</li>
<li>server: 远端</li>
</ul>
</li>
<li>客户使用TCP协议连接远端服务器</li>
</ul>
<p>FTP进程模型-- 双连接</p>
<ul>
<li>控制连接
<ul>
<li>带外控制</li>
<li>TCP的21端口</li>
<li>客户和服务器之间维护的一个FTP会话</li>
<li>用于客户和服务器之间交换命令和响应</li>
<li>在整个会话期间保持活跃</li>
</ul>
</li>
<li>数据传输连接
<ul>
<li>TCP的20端口</li>
<li>用于传输数据</li>
<li>客户可以在一个会话上向服务器传输多个请求</li>
<li>每个文件请求都会建立一个数据连接</li>
<li>数据传输结束后，释放数据连接</li>
</ul>
</li>
</ul>
<h3><span id="域名系统dnsdomain-name-system"> 域名系统DNS(Domain Name System)</span></h3>
<p>互联网中使用IP地址寻址主机</p>
<p>DNS基本思想：</p>
<ul>
<li>名字和地址映射关系分布式存放，形成具有层次结构的分布式数据库系统(分布式管理)</li>
<li>通过查询分布式数据库，获得名字到地址的映射，或相反</li>
</ul>
<p>关键：</p>
<ul>
<li>如何组织分布式数据库</li>
<li>如何在分布式数据库中查找</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/30/96iWGVjezCDtTwn.png" alt="image-20211230183539098"></p>
<p>DNS服务器组织</p>
<p>顶级域名服务器(Top-Level Domain, TLD)</p>
<ul>
<li><a href="https://root-servers.org">根服务器</a></li>
<li>负责顶级域名的解析</li>
</ul>
<p>授权域名服务器</p>
<ul>
<li>对于名字与地址映射，保留其初始数据来源的服务器</li>
<li>主要区分名字与地址映射是原始的还是被缓存的(非授权)</li>
</ul>
<p>本地域名服务器(或称默认域名服务器)</p>
<ul>
<li>一般每个ISP都部署有域名服务器，其用户可将该服务器设置成本地域名服务器(或默认域名服务器)</li>
<li>当进行域名解析时，查询请求首先发送到本地域名服务器(即查询的起点)</li>
</ul>
<p>域名解析：名字到地址映射(通过名字查地址)</p>
<ul>
<li>分布式：层级的服务器组织，协同实现解析</li>
<li>有效性：大多数解析可以在本地完成，一部分会产生互联网流量</li>
<li>可靠性：通过冗余设置，避免单点失效</li>
</ul>
<p>解析方式</p>
<ul>
<li>反复解析
<ul>
<li><img src="https://s2.loli.net/2021/12/31/XuThn51oeCDrcMR.png" alt="image-20211231040419503"></li>
</ul>
</li>
<li>递归解析
<ul>
<li><img src="https://s2.loli.net/2021/12/31/CXITrglfzqS7tNu.png" alt="image-20211231040439528"></li>
</ul>
</li>
</ul>
<p>主机缓存</p>
<ul>
<li>基本方法
<ul>
<li>在启动时从本地域名服务器下载名字-地址映射数据库</li>
<li>定期获取新的映射</li>
<li>缓存最近用过的名字和地址映射</li>
</ul>
</li>
<li>优点
<ul>
<li>无需访问域名服务器，名字解析速度快</li>
<li>本地服务器的故障不影响名字解析</li>
<li>减低服务器的负载</li>
</ul>
</li>
<li>缺点？</li>
</ul>
<p>DNS包括query和reply两种报文</p>
<p>域名格式压缩？</p>
<p>客户-服务器模式</p>
<ul>
<li>域名服务器：
<ul>
<li>保存名字到地址映射关系(数据库)</li>
<li>接收客户端请求，并给出响应</li>
</ul>
</li>
<li>域名解析器(客户端)：
<ul>
<li>请求域名解析的客户进程</li>
<li>向域名服务器发起解析请求，并等待服务器的响应</li>
</ul>
</li>
</ul>
<h3><span id="web服务与http协议"> Web服务与HTTP协议</span></h3>
<p><img src="https://s2.loli.net/2021/12/31/DIbMfJm3a41nuPz.png" alt="image-20211231041632897"></p>
<p>服务器</p>
<ul>
<li>Web页面(HTML文档)：包含到多种对象的链接</li>
<li>对象：可以是 HTML文档、图像文件、视频文件、声音文件、脚本文件等</li>
<li>对象用URL(统一资源定位符)编址：<strong>协议类型://主机名//路径和文件名</strong></li>
</ul>
<p>客户端</p>
<ul>
<li>发出请求、接收响应、解释HTML文档并显示</li>
<li>有些对象需要浏览器安装插件</li>
</ul>
<p>HTTP(HyperText Transfer Protocol)</p>
<ul>
<li>传输层通常使用TCP协议，缺省使用TCP的80端口</li>
<li>HTTP为无状态协议，服务器端不保留之前请求的状态信息
<ul>
<li>无状态协议：效率低、但简单</li>
<li>有状态协议：维护状态相对复杂，需要维护历史信息，在客户端或服务器出现故障时，需要保持状态的一致性等</li>
</ul>
</li>
<li>HTTP标准
<ul>
<li>HTTP/1.0: RFC 1945(1996年)
<ul>
<li>每请求一个文件都要建立连接和断开</li>
<li>eg:请求一个index.html，里面包含3张jpg图片，先发送html文件，后重新建立三次连接发送图片</li>
</ul>
</li>
<li>HTTP/1.1: RFC 2616(1999年)
<ul>
<li>HTTP 1.1的问题</li>
<li>队头阻塞问题
<ul>
<li>基于文本协议的问答有序模式，先请求的必须先响应</li>
</ul>
</li>
<li>传输效率问题
<ul>
<li>文本格式、冗长重复的头部等</li>
</ul>
</li>
<li>HTTP 1.1队头阻塞的解决策略
<ul>
<li>浏览器建立多个TCP连接
<ul>
<li>一般最多可以建立6个TCP连接</li>
<li>通过不同TCP连接传送的请求没有响应顺序的要求</li>
<li><strong>耗费较多的计算和存储资源</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>HTTP/2: RFC 7540(2015年)、RFC 8740(2020年)
<ul>
<li>二进制分帧传输
<ul>
<li>不改变HTTP原有的语义</li>
<li>将HTTP请求和响应分割成帧，采用二进制编码</li>
<li>帧为最小传输单位</li>
</ul>
</li>
<li>最常用的HTTP 请求/ 响应的帧形式
<ul>
<li><img src="https://s2.loli.net/2021/12/31/XOEZmktsLlHJw9A.png" alt="image-20211231044314806"></li>
</ul>
</li>
<li>TCP连接复用：提高连接利用率，解决HTTP的队头阻塞问题
<ul>
<li>消息(Message)：HTTP一次请求或响应，包含一个或多个帧</li>
<li>流(Stream)：简单看成一次请求和应答，包含多个帧</li>
<li>每个TCP连接中可以承载多个流，不同流的帧可以交替穿插传输</li>
<li>流的创建与标识
<ul>
<li>Stream ID：标识一个流。客户端创建的流，ID为奇数；服务器创建的流，ID为偶数；0x00和0x01用于特定场景；Stream ID 不能重复使用，如果一条连接上ID分配完，会新建一条连接。接收端通过Stream ID进行消息的组装。</li>
</ul>
</li>
<li>流创建：发送和接收到HEADERS帧(包含新Stream ID)时创建</li>
<li>流优先级：可以依据重要性为流设置不同的优先级(1~256)，在HEADERS帧中承载</li>
</ul>
</li>
<li>服务器推送：提高响应速度
<ul>
<li>服务器在请求之前先推送响应信息到客户端，推送的响应信息可以在客户端被缓存</li>
</ul>
</li>
<li>HTTP头压缩(HPACK)
<ul>
<li>请求头由大量的键值组成，多个请求的键值重复程度很高</li>
<li>静态表：定义通用HTTP头域，常用键值无需重复传送，直接引用内部字典的整数索引</li>
<li>动态表：两边交互发现新的头域，添加到动态表</li>
<li>自定义键值：采用Huffman编码</li>
</ul>
</li>
</ul>
</li>
<li><img src="https://s2.loli.net/2021/12/31/hepyn8aqvFjQ9RO.png" alt="image-20211231044859390">
<ul>
<li><a href="https://http2.akamai.com/demo">http测试</a></li>
<li>HTTP 2.0协议解决的问题
<ul>
<li>通过引入流机制，解决了HTTP队头阻塞问题，提高了传输效率</li>
<li>通过二进制编码、头压缩机制提高了网络带宽利用率</li>
<li>通过服务器推送，加快了页面响应速度</li>
</ul>
</li>
<li>HTTP 2.0协议没有解决的问题
<ul>
<li>TCP+TLS的多次交互，造成启动延迟问题</li>
<li>对移动主机和多宿主机的连接迁移问题</li>
<li>TCP队头阻塞问题</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>HTTP报文类型</p>
<ul>
<li>HTTP两种报文：请求(request)、响应(response)</li>
<li>HTTP请求报文：采用ASCII，数据部分采用MIME格式
<ul>
<li><img src="https://s2.loli.net/2021/12/31/C2MqVlQL16kovxy.png" alt="image-20211231042351105"></li>
</ul>
</li>
<li>HTTP响应报文：数据部分采用MIME格式
<ul>
<li><img src="https://s2.loli.net/2021/12/31/FsNty7l6DbVEM58.png" alt="image-20211231042523583"></li>
</ul>
</li>
<li>几个比较典型的状态码
<ul>
<li>200 OK
<ul>
<li>请求成功，被请求的对象包含在该响应的数据部分</li>
</ul>
</li>
<li>301 Moved Permanently
<ul>
<li>请求的对象被移走，新的位置在响应中通过Location: 给出</li>
</ul>
</li>
<li>400 Bad Request
<ul>
<li>服务器不能解释请求报文</li>
</ul>
</li>
<li>404 Not Found
<ul>
<li>服务器中找不到请求的文档</li>
</ul>
</li>
<li>505 HTTP Version Not Supported
<ul>
<li>服务器不支持相应的HTTP版本</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>用户-服务器交互：认证</p>
<ul>
<li>认证：控制对服务器内容的访问
<ul>
<li>认证方法：通常使用“名字-口令”</li>
<li>无状态：客户端需要在每个请求中携带认证信息</li>
<li>每个请求头中包含authorization:</li>
<li>如果请求头中无authorization:，则服务器拒绝访问，并在响应头中包含WWW authenticate：</li>
</ul>
</li>
</ul>
<p>用户-服务器状态：Cookies</p>
<ul>
<li>服务器使用cookies保持状态
<ul>
<li>HTTP响应头中使用set-cookie：
<ul>
<li>选择的cookie号具有唯一性</li>
</ul>
</li>
<li>后继的HTTP请求中使用cookie：</li>
<li>Cookie文件保存在用户的主机中，由用户主机中的浏览器管理</li>
<li>Web服务器建立后端数据库，记录用户信息</li>
<li>例如：
<ul>
<li>Set-Cookie: SID=31d4d96e407aad42; Path=/; <a href="http://Domain=example.com">Domain=example.com</a></li>
<li>Cookie:  SID=31d4d96e407aad42</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Web缓存机制：客户端缓存</p>
<ul>
<li>目标：如果被请求的对象在客户端缓存有最近版本，则不需要发送该对象</li>
<li>客户端：在发送的HTTP请求中指定缓存的时间，请求头包含
<ul>
<li>If-modified-since: &lt; date &gt;</li>
</ul>
</li>
<li>服务器：如果缓存的对象是最新的，在响应时无需包含该对象，响应头包含
<ul>
<li>HTTP/1.1 304 Not Modified</li>
</ul>
</li>
</ul>
<p>Web缓存机制：代理服务器缓存</p>
<ul>
<li>目标：由代理服务器进行缓存，尽量减少原始服务器参与</li>
<li>用户设置浏览器：通过代理服务器进行Web访问</li>
<li>浏览器将所有的HTTP请求发送到代理服务器
<ul>
<li>如果缓存中有被请求的对象，则直接返回对象</li>
<li>否则，代理服务器向原始服务器请求对象，再将对象返回给客户端</li>
</ul>
</li>
<li>优点：降低时延，减少网络流量</li>
</ul>
<p>HTTP发展现状</p>
<p><img src="https://s2.loli.net/2021/12/31/ZMUPObjTRiFwEnA.png" alt="image-20211231043947154"></p>
<p><img src="https://s2.loli.net/2021/12/31/smEkrBd5QFT1O9Y.png" alt="image-20211231044010995"></p>
<h3><span id="内容分发网络cdncontent-distribution-network"> 内容分发网络CDN(Content Distribution Network)</span></h3>
<p>基本思想源于MIT对Web服务瞬间拥塞问题的解决(1998)</p>
<ul>
<li>一种Web缓存系统，靠近网络边缘(用户)提供内容服务</li>
<li>目前提供更丰富的服务，包括静态内容、流媒体、用户上传视频等</li>
</ul>
<p>主要优点</p>
<ul>
<li>降低响应时延，避免网络拥塞</li>
<li>避免原始服务器过载及防止DDoS攻击</li>
<li>分布式架构，具有良好的可扩展性</li>
<li>对用户透明，无需用户感知</li>
</ul>
<p>DNS辅助</p>
<ul>
<li>负载均衡DNS负责决策CDN服务器选择</li>
<li>负载均衡DNS需要收集CDN服务器的位置和负载情况</li>
<li>如果找不到被请求的对象，需要从原始服务器获取</li>
</ul>
<h3><span id="动态自适应流媒体协议dashdynamic-adaptive-streaming-over-http重点"> 动态自适应流媒体协议DASHDynamic Adaptive Streaming over HTTP)(重点)</span></h3>
<p>基本思想：</p>
<ul>
<li>完整视频被拆分为固定时长(2s-10s)、不同码率的视频片段(segment)</li>
<li>视频片段与媒体表示描述(Media  Presentation Description, MPD) 文件一同存放于DASH服务器</li>
<li>客户端根据自身设备性能、当前网络条件、客户端缓冲大小等自适应选择一种视频码率进行下载
<ul>
<li>例如：HTTP服务器中保存有高中低三种质量的视频片段，DASH客户端评估网络状况，通常在保证视频流畅的前提下，获取最高质量的视频片段</li>
</ul>
</li>
</ul>
<p>自适应码率(Adaptive bitrate，ABR)规则</p>
<ul>
<li><img src="https://s2.loli.net/2021/12/31/6omO3QPRnuV4LxC.png" alt="image-20211231050348506"></li>
</ul>
<h2><span id="传输层协议"> 传输层协议</span></h2>
<h3><span id="传输层需要解决的基本问题"> 传输层需要解决的基本问题</span></h3>
<ul>
<li>网络层：将IP数据包从源主机传送到目的主机，提供无连接不可靠服务</li>
<li>数据包传输存在的问题：延迟、乱序、出错、丢失等</li>
<li>传输层解决的问题之一：可靠性，向应用层提供可靠服务</li>
<li>应用层运行多个应用进程</li>
<li>共享单一的网络层协议(IP)和网络接口</li>
<li>传输层解决的问题之二：复用(Multiplexing)和分用(Demultiplexing)</li>
</ul>
<h3><span id="tcpip体系结构中传输层协议与服务"> TCP/IP体系结构中传输层协议与服务</span></h3>
<p>传输层协议的基本功能</p>
<ul>
<li>复用和分用</li>
<li>可靠性保证</li>
</ul>
<p>传输层实体执行的动作</p>
<ul>
<li>发送端：将应用层的消息封装成传输层的数据单元，传递到网络层</li>
<li>接收端：将从网络层接收的传输层数据单元，处理后交给应用层</li>
</ul>
<p>传输控制协议TCP(Transport Control Protocol)</p>
<ul>
<li>为进程间通信提供面向连接的、可靠的传输服务</li>
<li>实现复用分用、差错检测、确认重传、流量控制等传输层功能</li>
</ul>
<p>用户数据报协议UDP(User Datagram Protocol)</p>
<ul>
<li>为进程间通信提供非连接的、不可靠的传输服务</li>
<li>实现复用分用、差错检测等传输层功能</li>
</ul>
<h3><span id="用户数据报协议udp"> 用户数据报协议(UDP)</span></h3>
<p>UDP协议特点</p>
<ul>
<li>发送方和接收方<strong>不需要握手过程</strong></li>
<li>每个UDP数据单元(数据报)<strong>独立传输</strong></li>
<li>提供复用分用功能和<strong>可选</strong>的差错检测功能</li>
<li>支持组播通信(点到多点通信)</li>
<li>不提供可靠性保证：无确认重传、可能有出错、丢失、乱序等现象</li>
</ul>
<p>UDP数据报格式</p>
<ul>
<li>长度：包含头部、以字节计数</li>
<li>校验和：为可选项，用于差错检测</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/cXEOlLAbGeoQTRC.png" alt="image-20211231075450673"></p>
<p>进程标识：目的IP地址+目的端口号</p>
<p>UDP数据报的差错检测</p>
<ul>
<li>可选项，利用数据报中携带冗余位(校验和域段)来检测数据报传输过程中出现的差错</li>
<li>发送端：利用自己产生的伪首部和发送的UDP数据报计算校验和</li>
<li>接收端：利用自己产生的伪首部和接收的UDP数据报计算校验和</li>
<li>伪首部：包含源IP地址、目的IP地址、协议类型等域段</li>
<li><img src="https://s2.loli.net/2021/12/31/QHyv8zbWYxZO1IU.png" alt="image-20211231080125754"></li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/S2rTLfn47j8Zypi.png" alt="image-20211231080316195"></p>
<p><img src="https://s2.loli.net/2021/12/31/PXY8N91el32xR4o.png" alt="image-20211231080615368"></p>
<p>UDP校验和计算几点说明</p>
<ul>
<li>IPv4中UDP校验和是可选项，IPv6中变成强制项
<ul>
<li>0无，非0有(如果计算结果为0，则以全1代替)</li>
</ul>
</li>
<li>UDP校验和覆盖的范围超出了UDP数据报本身，使用伪首部的目的是检验UDP数据报是否到达真正的目的地
<ul>
<li>正确的目的地包括了特定的主机和该主机上特定的端口</li>
</ul>
</li>
<li>伪首部不随用户数据报一起传输，接收方需自己形成伪首部进行校验</li>
<li>伪首部的使用破坏了层次划分的基本前提，即每一层的功能独立
<ul>
<li>目的主机的IP地址UDP通常知道，源IP的使用需要通过路由选择决定</li>
</ul>
</li>
</ul>
<pre class="highlight"><code class="C++"><span class="hljs-function">u_short <span class="hljs-title">cksum</span><span class="hljs-params">(u_short *buf, <span class="hljs-keyword">int</span> count)</span></span>{
  <span class="hljs-keyword">register</span> u_long sum = <span class="hljs-number">0</span>;
  <span class="hljs-keyword">while</span> (count--){
    sum += *buf++;
    <span class="hljs-keyword">if</span> (sum &amp; <span class="hljs-number">0XFFFF0000</span>){
      sum &amp;= <span class="hljs-number">0XFFFF</span>;
      sum++;
      }
    }
    Return ~(sum &amp; <span class="hljs-number">0XFFFF</span>);
}
</code></pre>
<p>IP首部、ICMP、UDP、TCP都需要计算校验和，方法类似</p>
<p>使用UDP服务的应用：</p>
<ul>
<li>流媒体应用(实时音频和视频)通常使用UDP服务
<ul>
<li>能够容忍一定的丢失</li>
<li>对时延敏感</li>
</ul>
</li>
<li>其他使用UDP服务的应用，如：
<ul>
<li>DNS</li>
<li>SNMP</li>
</ul>
</li>
<li>需要在UDP之上实现可靠传输，即在应用层增加可靠机制</li>
</ul>
<p>为什么提供UDP服务？</p>
<ul>
<li>不需要建立连接，建立连接需要增加延时，特别对于简单的交互应用</li>
<li>协议简单：在发送端和接收端不需要维护连接状态</li>
<li>数据报头部短，额外开销小</li>
<li>无拥塞控制</li>
</ul>
<h3><span id="可靠数据传输"> 可靠数据传输</span></h3>
<p>rdt：reliable data transfer protocol(可靠数据传输协议)</p>
<p>停等机制：发送端发送一个分组，然后等待接收端响应</p>
<p>两种典型的流水线协议：</p>
<ul>
<li>回退N：Go-Back-N (GBN)
<ul>
<li>允许发送端发出N个未得到确认的分组</li>
<li>需要增加序列号范围
<ul>
<li>分组首部中增加k位的序列号，序列号空间为[0, <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">2^{k-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>]</li>
</ul>
</li>
<li>采用累积确认，只确认连续正确接收分组的最大序列号
<ul>
<li>可能接收到重复的ACK</li>
<li>发送端设置定时器，定时器超时时，重传所有未确认的分组</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/klQUiJLCaKuSwcD.png" alt="image-20211231082548837"></p>
<ul>
<li>选择重传：Selective Repeat (SR)
<ul>
<li>接收端独立确认每个正确接收的分组，必要时缓存分组，对高层按序交付</li>
<li>每个分组独立定时，发送端只重传未收到ACK的分组</li>
<li>过程
<ul>
<li>发送端
<ul>
<li>接收上层数据：如果发送窗口中有可用的序号，则发送分组</li>
<li>超时(n)：重传分组n，重启定时器</li>
<li>接收ACK(n)：n在[send_base, send_base+N-1]区间，将分组n标记为已接收，如果是窗口中最小的未确认的分组，则窗口向前滑动，基序号为下一个未确认分组的序号</li>
</ul>
</li>
<li>接收端：接收分组n：
<ul>
<li>n在[rcv_base, rcv_base+N-1]区间，发送ACK(n)，缓存失序分组，按序到达的分组交付给上层，窗口向前滑动</li>
<li>n在[rcv_base-N, rcv_base-1]区间，发送ACK(n)<br>
<img src="https://s2.loli.net/2021/12/31/zkCltjSLX1QEqVu.png" alt="image-20211231082946085"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="传输控制协议tcp"> 传输控制协议(TCP)</span></h3>
<p>TCP协议特点提供可靠服务：按序、可靠交付</p>
<ul>
<li>提供字节流服务，不识别消息边界可靠传输机制</li>
<li>提供差错检测(校验和)功能，正确接收返回确认</li>
<li>使用序列号检测丢失和乱序</li>
<li>超时重传机制，解决出错、丢失问题</li>
<li>支持流水线机制，自适应窗口</li>
<li>面向连接：发送数据之前发送方和接收方之间需要握手
<ul>
<li>三次握手建立连接</li>
<li>初始化所需的参数及分配缓冲区</li>
</ul>
</li>
<li>提供复用分用功能</li>
<li><strong>只提供点对点通信</strong></li>
<li>具有<strong>流量控制</strong>和<strong>拥塞控制</strong>功能</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/4OPMgFIq6tH5Vda.png" alt="image-20211231151005112"></p>
<ul>
<li>头长度：四个字节为计数单位，包含选项部分</li>
<li>接收窗口通告：指示接收缓冲区可接收的字节数</li>
<li>标志位：URG, ACK, PUSH, RESET, SYN, FIN</li>
<li>选项格式：Kind(1字节)|Length(1字节)|Info(n字节)</li>
</ul>
<p>TCP连接与复用、分用机制</p>
<ul>
<li>通信之前通过三次握手建立TCP连接
<ul>
<li>分配缓冲区、协商参数(初始序号、接收缓冲区大小、最大段尺寸等)</li>
</ul>
</li>
<li>连接标识(四元组)：源IP地址、目的IP地址、源端口号、目的端口号</li>
<li>通过建立的TCP连接为应用进程提供可靠的字节流服务</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/PSk5mrhXMDI2wA8.png" alt="image-20211231153628750"></p>
<table>
<thead>
<tr>
<th style="text-align:center">事件</th>
<th style="text-align:center">TCP接收端动作</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">期望序号的报文段按序到达，之前的报文段均已被确认</td>
<td style="text-align:center">延迟发送ACK，等待下一个报文段到达；等500毫秒，仍未收到下一个报文段，则发送ACK</td>
</tr>
<tr>
<td style="text-align:center">期望序号的报文段按序到达，之前有一个延迟确认的报文段</td>
<td style="text-align:center">发送ACK，确认两个按序到达的报文段</td>
</tr>
<tr>
<td style="text-align:center">报文段未按序到达，到达的报文段序号高于期望的序号，数据流不连续</td>
<td style="text-align:center">发送重复ACK，确认序号中包含期望接收的序号</td>
</tr>
<tr>
<td style="text-align:center">到达的报文段填补了之前数据流不连续部分</td>
<td style="text-align:center">发送ACK，确认序号中包含期望接收的序号</td>
</tr>
</tbody>
</table>
<p>TCP采用自适应方法计算重传超时时间(原因？)</p>
<ul>
<li>基于往返时间(RTT)确定重传超时间(RTO)</li>
</ul>
<p>问题：如何准确估算</p>
<ul>
<li>上一次RTT可以测得，下一次RTT需要估算</li>
<li>网络拥塞和路由变化，每次往返时间可能不同，有时会有较大变化</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/GJ8SaATt97lKnkL.png" alt="image-20211231163820280"></p>
<p>流量控制的目的：避免发送端发送数据过快，接收端不能及时处理，造成接收缓冲区溢出</p>
<ul>
<li>增加流控功能后，发送窗口还需要受接收能力的约束</li>
</ul>
<p>可变的滑动窗口：接收端利用“接收窗口通告”域段告知发送端接收端缓冲区剩余的空间，发送端依据该通告调整发送窗口的大小</p>
<p><img src="https://s2.loli.net/2021/12/31/i284GfTShLI6HQn.png" alt="image-20211231221341669"></p>
<p>接收窗口大小对性能的影响</p>
<ul>
<li>较小的缓冲区会影响网络的吞吐率</li>
<li>过大的缓冲区会浪费主机的存储资源</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/2TpMvr9eWJHzQyF.png" alt="image-20211231223846068"></p>
<p><img src="https://s2.loli.net/2021/12/31/LusX27OZbCENlR9.png" alt="image-20211231224024602"></p>
<p>连接的半打开状态：连接的一端存在、而另一端不存在</p>
<ul>
<li>当一个进程终止连接未能通知到另一方时，例如：掉电、异常关闭等</li>
</ul>
<p>TCP定时器:</p>
<ul>
<li>连接建立定时器(75秒)</li>
<li>重传定时器(RTO)</li>
<li>延迟ACK定时器(500毫秒)</li>
<li>持续定时器(避免0窗口死锁)</li>
<li>保活定时器(避免半打开)</li>
<li>静默定时器(避免端口号重用等)</li>
</ul>
<h3><span id="理解网络拥塞"> 理解网络拥塞</span></h3>
<p>拥塞控制方法：两种广泛使用的拥塞控制方法</p>
<ul>
<li>端到端拥塞控制
<ul>
<li>网络中无明确的反馈</li>
<li>端系统通过观察丢失、延迟推断是否发生拥塞</li>
<li>TCP采用的拥塞控制策略</li>
</ul>
</li>
<li>网络辅助的拥塞控制
<ul>
<li>路由器提供到端系统的反馈</li>
<li>例如：可以使用1位指示拥塞(如X.25, ATM)</li>
</ul>
</li>
</ul>
<h3><span id="tcp拥塞控制机制"> TCP拥塞控制机制</span></h3>
<p>带宽探测：接收到ACK提高传输速率，发生丢失事件降低传输速率</p>
<ul>
<li>ACK返回：说明网络并未拥塞，可以继续提高发送速率</li>
<li>丢失事件：假设所有丢失是由于拥塞造成的，降低发送速率</li>
</ul>
<p>TCP拥塞控制控制窗口：采用基于窗口的方法，通过拥塞窗口的增大或减小控制发送速率</p>
<p><img src="https://s2.loli.net/2021/12/31/fMoXjtWZzKB8lNx.png" alt="image-20211231225911836"></p>
<p>实际发送窗口取决于接收通告窗口和拥塞控制窗口中较小值</p>
<p>TCP拥塞控制</p>
<ul>
<li>慢启动阶段
<ul>
<li>初始拥塞窗口：cwnd=1(MSS)</li>
<li>每个RTT，cwnd翻倍(指数增长)</li>
<li>每接收到一个ACK，cwnd增1(MSS)</li>
<li>当<strong>连接初始建立</strong>或<strong>报文段超时未得到确认时</strong>，TCP拥塞控制进入慢启动阶段</li>
<li>特点：<strong>初始值小，增长速度快</strong></li>
</ul>
</li>
<li>拥塞避免阶段
<ul>
<li>阈值ssthresh：拥塞窗口达到该阈值时，慢启动阶段结束，进入拥塞避免阶段</li>
<li>每个RTT，cwnd增1(线性增长)</li>
<li>注意：TCP使用字节计数，当收到ACK时，拥塞窗口计算如下：
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mi>w</mi><mi>n</mi><mi>d</mi><mo>=</mo><mi>c</mi><mi>w</mi><mi>n</mi><mi>d</mi><mo>+</mo><mi>M</mi><mi>S</mi><mi>S</mi><mo>×</mo><mfrac><mrow><mi>M</mi><mi>S</mi><mi>S</mi></mrow><mrow><mi>c</mi><mi>w</mi><mi>n</mi><mi>d</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">cwnd = cwnd + MSS \times \frac{MSS}{cwnd}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.217331em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">c</span><span class="mord mathdefault mtight" style="margin-right:0.02691em;">w</span><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">d</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">M</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li>
</ul>
</li>
</ul>
</li>
<li>丢失检测
<ul>
<li>通过超时检测丢失：
<ul>
<li>阈值ssthresh = cwnd/2</li>
<li>cwnd=1，进入慢启动阶段</li>
</ul>
</li>
<li>通过三次重复ACK检测丢失(TCP RENO算法)：
<ul>
<li>阈值ssthresh = cwnd/2</li>
<li>cwnd= ssthresh+3，进入线性增长(拥塞避免阶段)</li>
<li>注：重复ACK指明网络仍可以交付一些报文段(拥塞不严重)</li>
</ul>
</li>
<li>TCP Tahoe算法对于两种丢失情况均将cwnd设成1，并进入慢启动阶段</li>
</ul>
</li>
</ul>
<h2><span id="网络层协议"> 网络层协议</span></h2>
<h3><span id="网络层功能"> 网络层功能</span></h3>
<p>网络层功能部署</p>
<ul>
<li>网络层在每台主机和路由器中实现</li>
<li>发送端：将传输层数据单元封装在数据包中</li>
<li>接收端：解析接收的数据包中，取出传输层数据单元，交付给传输层</li>
<li>路由器：检查数据包首部，转发数据包</li>
</ul>
<p>网络层关键功能</p>
<ul>
<li>路由(控制面): 决定数据包从源主机到目的主机的路径核心：路由算法与路由协议</li>
<li>转发(数据面): 将数据包从路由器的输入接口送到输出接口的过程</li>
</ul>
<h3><span id="ip协议-ip服务"> IP协议- IP服务</span></h3>
<p>IP层服务</p>
<ul>
<li>面向无连接的数据报服务
<ul>
<li>不需要提前建立连接</li>
<li>数据包基于目的主机地址进行转发</li>
<li>数据包独立转发，相同源-目的的数据包可能经过不同的路径</li>
</ul>
</li>
<li>尽力而为(Best-effort)的不可靠服务
<ul>
<li>数据包可能会产生较长的时延</li>
<li>数据包可能会丢失、失序、重复</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/2wFgTdesuCoBxpj.png" alt="image-20211231232948070"></p>
<h4><span id="ipv4"> IPv4</span></h4>
<p>IPv4地址</p>
<ul>
<li>IP地址：32位二进制逻辑地址(四部分，0~255)，实现互联网络统一编址，标识主机和路由器的接口</li>
<li>接口：将主机和路由器连接到物理网络
<ul>
<li>路由器一般有多个接口</li>
<li>主机可以有一个或多个接口</li>
<li>IP与物理接口绑定</li>
</ul>
</li>
<li>IP地址表示：点分割的十进制，如：223.1.1.1</li>
<li>IP地址层次：
<ul>
<li>网络号部分(net-id)</li>
<li>主机号部分(host-id)</li>
</ul>
</li>
<li>什么是一个IP网络：
<ul>
<li>位于同一个物理网络</li>
<li>设备接口的IP地址的网络号部分相同，主机号部分不同</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2021/12/31/Qq97R3rbdh5zA8U.png" alt="image-20211231233725315"></p>
<p><img src="https://s2.loli.net/2021/12/31/FEDiy6RS3QOM4tV.png" alt="image-20211231234113153"></p>
<p>IPv4地址：如何获取</p>
<ul>
<li>公有IP地址要求全球唯一，由区域互联网注册机构(RIR，Regional Internet Registry)或ISP分配</li>
<li>静态设定：
<ul>
<li>申请固定IP地址，手工设定</li>
</ul>
</li>
<li>动态获取：
<ul>
<li>使用DHCP协议或其他动态配置协议</li>
<li>当主机加入IP网络，允许主机从DHCP服务器动态获取IP地址</li>
<li>可以有效利用IP地址，方便移动主机的地址获取</li>
</ul>
</li>
</ul>
<p>路由器转发IP数据包过程：总结</p>
<ul>
<li>路由器确定IP数据包中目的地址的网络号</li>
<li>如果目的主机与路由器属于相同的IP网络，则直接转发到目的主机</li>
<li>如果目的主机与路由器不属于相同的IP网络，则查找路由表，确定下一跳路由器地址
<ul>
<li>如果存在相应的路由信息，则转发</li>
<li>如果没有相应的路由信息，则丢弃</li>
</ul>
</li>
<li>减小TTL值，修改首部的校验和</li>
<li>将数据包转发到相应的接口</li>
</ul>
<p>无类地址划分CIDR: Classless Inter-Domain Routing</p>
<ul>
<li>IP地址分为前缀和后缀两部分
<ul>
<li>一个前缀不一定标识一个物理网络</li>
</ul>
</li>
<li>前缀可以是任意长度，前缀和后缀长度用32位掩码标识
<ul>
<li>也可以表示成：a.b.c.d /x，x为前缀长度</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/01/Hpgju3D9dzIW81x.png" alt="image-20220101020031705"></p>
<p>私有IP地址和NAT</p>
<ul>
<li>私有IP地址的使用
<ul>
<li>可以在私有网络(本地网络)中自由使用，但不能出现在公网上</li>
<li>如果数据包要进入公网，需要进行私有地址到公有地址的转换</li>
<li>承担地址转换的设备称为NAT(Network Address Translation)</li>
</ul>
</li>
<li>本地网络使用私有IP地址，NAT 面向公网侧使用公网IP地址
<ul>
<li>只需要一个或少量的公网IP地址</li>
<li>公网IP地址变化，不影响本地网络地址配置</li>
<li>安全性增强</li>
</ul>
</li>
<li>NAT 的基本实现方法离开本地网络的数据包：用(NAT 的IP地址+新端口号)代替(源IP地址+端口号)，远端的主机返回的数据包将使用(NAT 的IP地址+新端口号)作为目的IP地址和目的端口
<ul>
<li>NAT 在转换表中记录(NAT 的IP地址+新端口号)到(源IP地址+端口号)的映射</li>
</ul>
</li>
<li>进入本地网络的数据包：用转换表中的(源IP地址+端口号)替换数据包中的目的IP地址和端口号(NAT 的IP地址+新端口号)</li>
</ul>
<h4><span id="ipv6"> IPv6</span></h4>
<p>IPv6互联网的优势</p>
<ul>
<li>解决地址耗尽问题：更大的地址空间(32位→128位)
<ul>
<li>340,282,366,920,938,463,463,374,607,431,768,211,456个IP地址</li>
<li>地球上每平方米范围：6.67×1023个IP地址</li>
</ul>
</li>
<li>自动配置的支持(即插即用)
<ul>
<li>无状态地址自动配置</li>
<li>有状态地址自动配置：对DHCP协议改进和扩展，网络管理更加方便和快捷</li>
</ul>
</li>
<li>改善网络性能
<ul>
<li>IP包头的合理改善，提高了路由器对数据包的处理速率</li>
<li>路由聚合，使路由表更小，提高转发效率</li>
</ul>
</li>
<li>方便各项业务开展
<ul>
<li>无需使用NAT 设备</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/01/EHaehtWOXU5zMmp.png" alt="image-20220101022814088"></p>
<ul>
<li>IPv6数据包由一个IPv6基本头、多个扩展头和上层数据单元组成</li>
<li>IPv6基本头：40字节固定长度，包含了发送和转发该数据包必须处理的一些字段</li>
<li>IPv6数据包可以包含0个或多个扩展头，扩展头位于基本头之后</li>
<li>基本头和扩展头中“下一包头”字段指出下一个扩展头的类型。最后一个扩展头中的“下一包头”字段指出高层协议的类型</li>
<li><img src="https://s2.loli.net/2022/01/01/xR4hdkFtozbDsji.png" alt="image-20220101022954509"></li>
<li>128位地址：由冒号分开的8组十六进制字段组成</li>
<li><img src="https://s2.loli.net/2022/01/01/NeX9lOsSE5nIpuZ.png" alt="image-20220101023110999"></li>
<li>完全形式：1080:0000:0000:0000:0008:0800:200C:417A</li>
<li>圧缩形式：1080:0:0:0:8:800:200C:417A / 1080::8:800:200C:417A
<ul>
<li>地址段中有时会出现连续的几组0，这时这些0可以用“::”代替，但一个地址中只能出现一次“::“，例如：FF01:0:0:0:0:0:0:101=FF01::101，0:0:0:0:0:0:0:1=::1</li>
</ul>
</li>
<li>内嵌IPv4地址的IPv6地址：0:0:0:0:0:0:61.1.133.1 或::61.1.133.1</li>
<li>URL的IPv6地址表示：https://[2001:410:0:1:250:fcee:e450:33ab]:8443/abc.html</li>
</ul>
<h3><span id="icmp协议"> ICMP协议</span></h3>
<p>ICMP: 互联网控制消息协议</p>
<p><img src="https://s2.loli.net/2022/01/01/726xsaDrmcMYtlK.png" alt="image-20220101040334497"></p>
<h3><span id="路由算法"> 路由算法</span></h3>
<p>目标：确定从源主机到目的主机的最优路径</p>
<p>最优路径：一般为代价最小的路径</p>
<ul>
<li>代价：有不同的定义方法，例如：距离、时延、费用、拥塞等</li>
</ul>
<p>路由算法的分布式实现</p>
<ul>
<li>路由器之间交互路由信息或链路状态信息</li>
<li>每台路由器独立计算最优路径</li>
</ul>
<p>相对于数据包转发，所有路由协议的开销都属于额外管理开销</p>
<p>网络结构的图抽象</p>
<ul>
<li>路由器：图中的点</li>
<li>物理链路：图中的边</li>
<li>代价：图中边的权值</li>
</ul>
<p>用G = (N, E) 表示图</p>
<ul>
<li>N = { u, v, w, x, y, z }，路由器集合</li>
<li>E = { (u, v), (u, x), (v, x), (v, w), (x, w),(x,y), (w,y), (w,z), (y,z) } ，链路的集合</li>
<li><img src="https://s2.loli.net/2022/01/06/9AaEyulJpTFowZt.png" alt="image-20220106062001540"></li>
</ul>
<p>链路代价：相邻节点之间的代价值，表示为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>c</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c(x_i,x_j)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<ul>
<li>如果xi和xj不相邻，链路代价记为无穷</li>
<li>例如, c(w, z) = 5</li>
</ul>
<p>路径代价：路径上所有链路代价和</p>
<ul>
<li>例如，路径<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy="false">)</mo><mi mathvariant="normal">的</mi><mi mathvariant="normal">代</mi><mi mathvariant="normal">价</mi><mo>=</mo><mi>c</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi>c</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub><mo stretchy="false">)</mo><mo>+</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo>+</mo><mi>c</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mrow><mi>p</mi><mo>−</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>p</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(x_1, x_2,x_3,..., x_p)的代价= c(x_1,x_2) + c(x_2,x_3) + ... + c(x_{p-1},x_p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">价</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.036108em;vertical-align:-0.286108em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></li>
</ul>
<p><a href="https://zhuanlan.zhihu.com/p/338414118">Dijkstra算法详解</a></p>
<p>Bellman-Ford公式<br>
假设：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">D_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(y) = 从x到y最小代价路径的代价值<br>
则：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">D_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(y) = min { c(x,m) + Dm(y) }</p>
<ul>
<li>m为x的邻居</li>
</ul>
<p>距离向量路由算法</p>
<ul>
<li>算法符号定义
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">D_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(y) = 从x到y最小代价路径的代价值节点x可以获知到每个邻居的链路代价c(x, m)</li>
<li>节点x维护自己的距离向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>x</mi></msub><mo>=</mo><mo stretchy="false">[</mo><msub><mi>D</mi><mi>x</mi></msub></mrow><annotation encoding="application/x-tex">D_x = [D_x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(y): y єN ]</li>
<li>节点x维护其邻居的距离向量，对于每个邻居m，x维护<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>m</mi></msub><mo>=</mo><mo stretchy="false">[</mo><msub><mi>D</mi><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">D_m = [D_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>(y): y єN ]</li>
</ul>
</li>
<li>基本思想
<ul>
<li>当节点的距离向量值发生变化时，向邻居节点发送自己的距离向量</li>
<li>如果节点x接收到邻居节点发送的距离向量，使用Bellman-Ford公式重新计算到所有其他节点的路径代价
<ul>
<li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mo>←</mo><mi>m</mi><mi>i</mi><mi>n</mi><mrow><mi>c</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>m</mi><mo stretchy="false">)</mo><mo>+</mo><msub><mi>D</mi><mi>m</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow></mrow><annotation encoding="application/x-tex">D_x(y) ← min {c(x,m) + D_m(y)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord"><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span></span>    每个节点y ∊N</li>
</ul>
</li>
<li>经过反复迭代，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>D</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_x(y)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span></span></span>会逐渐收敛到实际的最小路径代价值</li>
</ul>
</li>
</ul>
<h3><span id="互联网路由协议"> 互联网路由协议</span></h3>
<p>扩展性问题</p>
<ul>
<li>络路由表庞大，存储、查找困难</li>
<li>路由信息交互量大，额外开销高</li>
</ul>
<p>管理的自治问题</p>
<ul>
<li>互联网由大量自治域构成</li>
<li>每个自治域独立管理，每个自治域可能运行不同的路由协议</li>
</ul>
<p>层次化路由</p>
<ul>
<li>自治域内路由
<ul>
<li>相同的自治域中的所有路由器运行相同的自治域内路由协议</li>
<li>不同的自治域的路由器可以运行不同的自治域内路由协议</li>
<li>网关路由器(或边界路由器)：与其他自治域的路由器相连接的路由器</li>
</ul>
</li>
<li>自治域间路由
<ul>
<li>不同自治域网关路由器(或边界路由器)之间运行的路由协议</li>
<li>网关路由器：既执行自治域内的路由协议，也执行路由器之间的路由协议
<ul>
<li>路由表由自治域内和自治域间路由算法产生</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>运行协议</p>
<ul>
<li>自治域内路由：也称为内部网关协议IGP
<ul>
<li>路由信息协议RIP: Routing Information Protocol
<ul>
<li>使用距离向量法</li>
<li>两种基本的报文类型
<ul>
<li>请求报文</li>
<li>响应报文</li>
</ul>
</li>
<li>定期发送通告：相邻路由器每隔30秒发送一次响应报文
<ul>
<li>IP目的地址：255.255.255.255(本地广播地址)</li>
<li>跳步数定义：直接相连=1</li>
<li>每个通告可以最多携带25个目的网络</li>
</ul>
</li>
<li>触发更新：如果发现链路失效或变化，立即发送响应报文</li>
<li>如果超过180秒没有接收到邻居通告，则认为链路失效
<ul>
<li>通过邻居的路径失效</li>
<li>向邻居发送通告</li>
<li>如果邻居的路由表项发生变化，则继续通告</li>
<li>链路失效信息会传播到整个网络</li>
<li>使用毒性逆转可以防止暂时环路的产生</li>
<li>设置16跳为无穷值，提高收敛速度</li>
</ul>
</li>
<li>RIP协议在应用层实现
<ul>
<li>路由器中运行守候进程(routed)</li>
<li>使用UDP的520端口</li>
<li>发送和接收RIP报文，管理路由表</li>
</ul>
</li>
</ul>
</li>
<li>开放最短路径优先协议OSPF: Open Shortest Path First
<ul>
<li>几个概念
<ul>
<li>邻居(Neighbor)：两台路由器属于相同的IP网络，并通过交换Hello报文协商成功，则可以成为邻居</li>
<li>邻接关系(Adjacency)：形成邻居关系后，如果两台路由器成功交换DBD(数据库描述)报文以及LSA，则建立邻接关系</li>
<li>链路状态通告(Link State Advertisement，LSA)：每台路由器会在所有形成邻接关系的邻居之间发送LSA，LSA描述了路由器的链路、接口、邻居等信息</li>
<li>链路状态数据库(LSDB)：路由器将收到的LSA记录在LSDB中，并发送LSA拷贝给该路由器的其他所有邻居。当LSA传播到整个区域后，区域内所有的路由器都会形成同样的LSDB</li>
</ul>
</li>
<li>OSPF直接运行在IP协议之上，OSPF报文由IP数据包直接承载，协议类型为89</li>
<li><img src="https://s2.loli.net/2022/01/06/5UDPCgy8x1cb3Iu.png" alt="image-20220106075537488"></li>
<li>三张表
<ul>
<li>邻居列表：列出全部已经建立邻接关系的邻居路由器</li>
<li>链路状态数据库：列出网络中其他路由器的信息，由此显示全网的网络拓扑</li>
<li>路由表：列出通过最短路径优先算法计算出到达每个相连网络的最佳路径</li>
</ul>
</li>
<li>OSPF工作过程</li>
<li>邻居发现
<ul>
<li>通过Hello报文发现并形成邻居关系，建立邻居表</li>
</ul>
</li>
<li>路由通告
<ul>
<li>邻接路由器之间通过LSU洪泛LSA，通告链路状态信息，最终区域内所有路由器的LSDB完全相同，即实现同步</li>
<li>通过DBD、LSR、LSACK辅助LSA的同步</li>
</ul>
</li>
<li>路由计算
<ul>
<li>LSDB同步后，每台路由器独立计算最优路由，将最优路由信息写入路由表</li>
</ul>
</li>
</ul>
</li>
<li>中间系统到中间系统路由协议IS-IS：Intermediate System-to-Intermediate System (ISO)</li>
<li>内部网关路由协议IGRP: Interior Gateway Routing Protocol (Cisco)</li>
</ul>
</li>
<li>自治域间路由
<ul>
<li>边界网关协议BGP-4: Border Gateway Protocol</li>
<li>目前互联网中唯一实际运行的自治域间的路由协议</li>
<li><strong>BGP</strong>功能
<ul>
<li>eBGP: 从相邻的AS获得网络可达信息</li>
<li>iBGP: 将网络可达信息传播给AS内的路由器</li>
<li>基于网络可达信息和策略决定到其他网络的“最优”路由</li>
</ul>
</li>
<li>BGP报文
<ul>
<li>BGP通过TCP的179端口交换报文</li>
<li>BGP报文包括:
<ul>
<li>Open报文：用于建立BGP对等体（peer）之间的会话连接，协商BGP参数（该过程需要认证）</li>
<li>Update报文：用于在对等体之间交换路由信息</li>
<li>Keepalive报文：用于保持BGP会话连接</li>
<li>Notification报文：用于差错报告和关闭BGP连接</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/06/8ZwSsmYBAJGlK6T.png" alt="image-20220106221244307"></p>
<h3><span id="软件定义网络sdn"> 软件定义网络(SDN)</span></h3>
<p>软件定义网络核心思想</p>
<ul>
<li>解耦：
<ul>
<li>将控制平面和数据平面进行分离，解决传统网络中控制平面和数据平面在物理上紧耦合导致的问题解决的问题</li>
<li>控制平面和数据平面之间不需要相互依赖，只需要遵循一定的开放接口即可进行通信</li>
<li>控制平面：负责决策控制，由软件实现，灵活</li>
<li>数据平面：专注数据转发，可有由通用硬件实现</li>
</ul>
</li>
<li>抽象：
<ul>
<li>转发抽象：将数据平面抽象为通用的转发模型，如Openflow的交换机模型，各种转发表项，如MAC地址表、路由表、NAT 转换表等，抽象为统一的流表</li>
<li>分布状态抽象：控制层将设备的分布状态，抽象成全局的网络视图，从而实现逻辑的集中控制，具体可以通过网络操作系统来实现
<ul>
<li>网络操作系统（NOS）：下发控制命令，收集设备和链路状态，为上层应用提供全局网络视图</li>
</ul>
</li>
<li>配置抽象：网络行为的表达通过编程语言实现，将抽象配置映射为物理配置，利用控制器提供的API，通过控制器配置全局设备</li>
</ul>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/01/06/bFHhCoIPLWt2xEU.png" alt="image-20220106090124317"></p>
<h2><span id="接口层原理与协议"> 接口层原理与协议</span></h2>
<ul>
<li>接口层提供同一<strong>物理网络</strong>中各节点之间的连接和通信</li>
<li>同一个<strong>物理网络</strong>必须执行相同的接口层协议</li>
<li>不同的<strong>物理网络</strong>接口层协议可以不同</li>
</ul>
<h3><span id="接口层基础"> 接口层基础</span></h3>
<p>物理网络连接方式：节点到节点连接、共享式连接、交换式连接</p>
<p>接口层功能</p>
<ul>
<li>物理层：提供位流服务
<ul>
<li>传输介质和拓扑结构定义</li>
<li>编码与解码(数据→信号)</li>
<li>信号的发送与接收</li>
<li>时钟同步</li>
</ul>
</li>
<li>数据链路层：提供可靠或不可靠的传输服务
<ul>
<li>数据单元及寻址方式定义</li>
<li>链路层差错检测</li>
<li>链路层的复用和分用</li>
<li>可靠数据传输</li>
<li>共享式连接：提供介质访问控制方法</li>
<li>交换式连接：数据单元转发</li>
</ul>
</li>
</ul>
<p>接口层技术分类</p>
<ul>
<li>有多种接口层技术，传统上大致可以分成三类
<ul>
<li>局域网技术(LAN, Local Area Network )
<ul>
<li>如：以太网(Ethernet)、无线局域网(WiFi)</li>
</ul>
</li>
<li>城域网技术(MAN, Metropolitan Area Network)
<ul>
<li>如：FDDI、交换式Ethernet</li>
</ul>
</li>
<li>广域网技术Wide Area Network (WAN)
<ul>
<li>如：ATM</li>
</ul>
</li>
</ul>
</li>
<li>其他接口技术
<ul>
<li>个人区域网
<ul>
<li>如：蓝牙技术(Bluetooth)</li>
</ul>
</li>
<li>无线传感网络
<ul>
<li>如：Zigbee技术</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="局域网体系结构与组网方法"> 局域网体系结构与组网方法</span></h3>
<p>介质访问控制层(Medium Access Control )</p>
<ul>
<li>物理节点寻址</li>
<li>差错控制</li>
<li>介质访问控制（共享式连接）</li>
</ul>
<p>逻辑链路控制层（Logical Link Control）</p>
<ul>
<li>
<p>链路层的复用和分用</p>
</li>
<li>
<p>可靠数据传输</p>
</li>
<li>
<p>共享式局域网</p>
<ul>
<li>网络中任一节点发送的信息会被网络中所有节点收到（广播传输）
<ul>
<li>例如，共享式以太网，无线局域网，FDDI等</li>
</ul>
</li>
<li>需要协调节点对共享介质的访问
<ul>
<li>介质访问控制方法</li>
</ul>
</li>
</ul>
</li>
<li>
<p>交换式局域网</p>
<ul>
<li>链路采用点到点连接
<ul>
<li>例如，交换式以太网</li>
</ul>
</li>
<li>交换机成为网络连接的核心
<ul>
<li>完成链路层数据单元的转发</li>
<li>通常采用统计多路复用</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>MAC地址—物理地址</p>
<ul>
<li>32位IP地址:
<ul>
<li>网络层地址（逻辑地址）：标识主机或路由器的一个接口</li>
<li>主要用于IP数据包的路由转发</li>
</ul>
</li>
<li>48位MAC地址（物理地址）:
<ul>
<li>物理地址：在相同的物理网络中，标识一个节点</li>
<li>对于大多数局域网，采用48位MAC地址
<ul>
<li>位于网卡的ROM或EPROM中</li>
<li>扁平地址，无层次，需要唯一</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="局域网编址与arp协议"> 局域网编址与ARP协议</span></h3>
<p>ARP协议ARP: Address Resolution Protocol</p>
<ul>
<li>局域网的每个IP节点（主机或路由器）都有ARP表</li>
<li>ARP表缓存IP地址和MAC地址的映射关系</li>
</ul>
<h3><span id="链路层差错控制"> 链路层差错控制</span></h3>
<p>在数据链路层中，广泛使用循环冗余校验（Cyclic Redundancy Check ）<br>
CRC校验码计算方法</p>
<ol>
<li>设原始数据D为k位二进制位模式</li>
<li>如果要产生n位CRC校验码，事先选定一个n+1位二进制位模式G（称为生成多项式），G的最高位为1</li>
<li>将原始数据D乘以<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding="application/x-tex">2^n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span></span></span></span> （相当于在D后面添加n 个0），产生k+n位二进制位模式，用G对该位模式做模2除，得到余数R（n位，不足n位前面用0补齐）即为CRC校验码</li>
</ol>
<p><img src="https://s2.loli.net/2022/01/06/KsIS3ClMEv4jNLi.png" alt="image-20220106084342460"></p>
<h3><span id="共享式与交换式以太网"> 共享式与交换式以太网</span></h3>
<p>共享式以太网：连接方式与功能</p>
<ul>
<li>连接方式
<ul>
<li>方式1：通过同轴电缆连接（10Mbps以太网）</li>
<li>方式2：通过双绞线、光纤与集线器连接</li>
</ul>
</li>
<li>服务：面向非连接的不可靠服务</li>
<li>功能
<ul>
<li>物理层
<ul>
<li>信号编码、时钟同步等，如差分曼彻斯特编码</li>
</ul>
</li>
<li>介质访问控制层
<ul>
<li>介质访问控制：CSMA/CD</li>
<li>差错检测</li>
</ul>
</li>
<li>逻辑链路控制层
<ul>
<li>复用与分用</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3><span id="虚拟局域网"> 虚拟局域网</span></h3>
<p>基于端口的VLAN: 交换机的端口被分组，单个物理交换机能够作为多个虚拟交换机运行</p>
<p>基于端口VLAN原理：</p>
<ul>
<li>隔离通信流量: 来自于或到达端口1-8的流量只能到达1-8
<ul>
<li>也可以基于MAC地址定义VLAN</li>
</ul>
</li>
<li>动态配置: 端口能够在VLAN之间动态配置</li>
<li>VLAN之间转发:类似独立的交换机，通过路由进行转发</li>
</ul>
<h3><span id="无线局域网"> 无线局域网</span></h3>
<p>802.11无线局域网组网模式</p>
<p>基础架构模式：</p>
<ul>
<li>站点（STA）</li>
<li>访问点（AP）</li>
<li>基本服务器（BSS）</li>
<li>扩展服务器（ESS）</li>
</ul>
<p>注：每个BSS中的站点和AP共享同一无线信道；站点通过AP转发数据</p>
<p>自组织模式：</p>
<ul>
<li>站点（STA）</li>
<li>独立基本服务器（IBSS）</li>
<li>站点之间直接通信</li>
<li>共享同一无线信道</li>
</ul>
<p>注：每个站点在某个时刻只能工作在一种模式</p>
]]></content>
      <categories>
        <category>复习</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>LightSensor</title>
    <url>/blog/2021/0420210424.html</url>
    <content><![CDATA[<h1><span id="光线传感器"> <center>光线传感器<center></center></center></span></h1>
<h3><span id="实验目的"> 实验目的</span></h3>
<p>本次实验的目的是让大家了解Android中光线传感器的基本知识，掌握Android中光线传感器的使用方法。</p>
<h3><span id="实验要求"> 实验要求</span></h3>
<ol>
<li>
<p>了解Android中光线传感器基本知识</p>
</li>
<li>
<p>掌握Android中光线传感器使用方法</p>
</li>
</ol>
<h3><span id="基础知识"> 基础知识</span></h3>
<p>光线传感器基础</p>
<p>光线传感器的好处是可以根据手机所处环境的光线来调节手机屏幕的亮度和键盘灯。例如在光线充足的地方屏幕会很亮，键盘灯就会关闭。相反如果在暗处，键盘灯就会亮，屏幕较暗（与屏幕亮度的设置也有关系），这样既保护了眼睛又节省了电量。光线传感器在进入睡眠模式时候会发出蓝色周期性闪动的光，非常美观。在本节的内容中，将详细讲解Android系统光线传感器的基本知识。<br>
光线传感器介绍<br>
在Android设备中，光线传感器通常位于前摄像头旁边的一个小点，如果在光线充足的情况下（室外或者是灯光充足的室内），大约在2～3秒之后键盘灯会自动熄灭，即使再操作机器键盘灯也不会亮，除非到了光线比较暗的地方才会自动地亮起来。如果在光线充足的情况下用手将光线感应器遮上，在2～3秒后键盘灯会自动亮起来，在此过程中光线感应器起到了一个节电的功能。<br>
要想在Android设备中监听光线传感器，需要掌握如下所示的监听方法。</p>
<ol>
<li>registerListenr(SensorListenerlistenr,int sensors,int rate)：已过时。</li>
<li>registerListenr(SensorListenerlistenr,int sensors)：已过时。</li>
<li>registerListenr(SensorEventListenerlistenr,Sensor sensors,int rate)。</li>
<li>registerListenr(SensorEventListenerlistenr,Sensor sensors,int rate,Handlerhandler)：因为SensorListener已经过时，所以相应的注册方法也过时了。</li>
</ol>
<p>在上述方法中，各个参数的具体说明如下所示。</p>
<ul>
<li>Listener：相应监听器的引用。</li>
<li>Sensor：相应的感应器引用。</li>
<li>Rate：感应器的反应速度，这个必须是系统提供的4个常量之一。</li>
<li>SENSOR_DELAY_NORMAL：匹配屏幕方向的变化。</li>
<li>SENSOR_DELAY_UI：匹配用户接口。</li>
<li>SENSOR_DELAY_GAME：匹配游戏。</li>
<li>SENSOR_DELAY_FASTEST.：匹配所能达到的最快。</li>
</ul>
<h3><span id="实验内容"> 实验内容</span></h3>
<p>按照实验的内容进行操作，掌握Android中光线传感器的使用方法等内容。<br>
完成实验内容后，设计一个光线传感器的app，至少包含如下功能：</p>
<ul>
<li>显示当前光线传感器的光照强度；</li>
<li>显示当前光线传感器的名称，耗电量，以及最大测量范围。</li>
</ul>
<p>获取上述参数方法如下：</p>
<p>myS  =  mySm.getDefaultSensor(Sensor.TYPE_LIGHT);</p>
<p>名称：myS.getName() ;</p>
<p>耗电量（mA）：myS.getPower();</p>
<p>最大测量范围：myS.getMaximumRange()</p>
<h3><span id="实验过程"> 实验过程</span></h3>
<ol>
<li>利用Android studio创建一个工程，并利用实体机或者安卓虚拟机进行测试（这里我先利用逍遥模拟器进行测试，成功之后，连接真机进行测试）</li>
<li>修改activity_main.yml文件，新建一个静态文本控件用来输出我们要输出的亮度传感器的有关信息，这里新建工程初始化时会自动生成一个文本控件，文本内容默认为“Hello World！”，所以只需在其基础上进行修改即可</li>
</ol>
<pre class="highlight"><code class>&lt;TextView
        android:id="@+id/textView1"//为控件添加编号textView1
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Hello World!"//初始化文本内容
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintTop_toTopOf="parent" /&gt;
</code></pre>
<ol start="3">
<li>修改Mainactivity.java文件对传感器进行控制并进行文本输出</li>
</ol>
<pre class="highlight"><code class>//这里仅展示所需主要代码。具体代码见工程文件
public class MainActivity extends Activity implements SensorEventListener {
    private SensorManager sensor;//定义一个传感器管理器
    private TextView text;//定义一个文本控件
    @Override
    protected void onCreate(Bundle savedInstanceState) {//项目初始化函数
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        sensor = (SensorManager)getSystemService(SENSOR_SERVICE);//调用getSystemService函数来获取传感器控制权
        text = (TextView)findViewById(R.id.textView1);//通过控件ID将实体文本控件与代码连接起来
    }

    @Override
    public void onSensorChanged(SensorEvent event) {
        // 在传感器控制函数里面实现我们的功能
        float[] values = event.values; //定义变量来获取事件的值
        int sensorType = event.sensor.TYPE_LIGHT; //定义值为事件发生时的传感器变量值
        if(sensorType==Sensor.TYPE_LIGHT){//如果对应系统中的亮度传感器，则证明是亮度发生变化
            String detail="\n传感器名称："+(event.sensor.getType()==Sensor.TYPE_LIGHT?(event.sensor.getName()+"\n中文名称：光照传感器"):"")+"\n耗电量："+event.sensor.getPower()+"\n最大测量范围："+event.sensor.getMaximumRange();//定义字符串来实现输出，调用getName，getPower，getMaximumRange函数来获取传感器参数
            text.setText(detail+"\n当前光照强度："+String.valueOf(values[0])+"Lux\n");//将静态文本控件内容更新为传感器信息
            text.setTextSize(30);//设置字体大小
            text.setTextColor(Color.parseColor("#ff5e9cff"));//#7E0C6E设置字体颜色
        }
    }
}
</code></pre>
<h3><span id="软件效果展示"> 软件效果展示</span></h3>
<p><img src="https://i.loli.net/2021/04/24/OR4gjAQVUtnKr7z.png" alt="image-20210424025040667"></p>
]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Homework</tag>
      </tags>
  </entry>
  <entry>
    <title>Ucore_lab1</title>
    <url>/blog/2021/0420210413.html</url>
    <content><![CDATA[<h2><span id="说明"> 说明</span></h2>
<p>在解压后的ucroe源码包中使用make命令即可以生成所需的目标文件,例如在本次实验中</p>
<pre class="highlight"><code class>user@system:~../lab1$ make
</code></pre>
<p>之后就会在bin文件夹生成一系列的目标文件：</p>
<ul>
<li>user.img : 被qemu访问的虚拟硬盘文件</li>
<li>kernel : ELF格式的toy ucore kernel执行文，嵌入到了ucore.img中</li>
<li>bootblock : 虚拟的硬盘主引导扇区(512字节)，包含了bootloader执行代码，同样嵌入了</li>
<li>sign : 外部执行程序，用来生成虚拟的硬盘主引导扇区<br>
还有其他文件，不一一列举。</li>
</ul>
<p>如果要对修改后的ucore代码和ucore 源码进行比较，可以使用diff命令。</p>
<pre class="highlight"><code class>user@system:~../lab1$ diff 目标文件 源文件
</code></pre>
<h2><span id="练习1"> 练习1</span></h2>
<h3><span id="1-操作系统镜像文件ucoreimg如何生成"> 1. 操作系统镜像文件ucore.img如何生成？</span></h3>
<p>执行指令</p>
<pre class="highlight"><code class>user@system:~../lab1$ make "V="
</code></pre>
<p>可以获得Makefile中执行的具体指令，详细信息如下（仅列举有关ucore.img文件生成相关指令）:</p>
<pre class="highlight"><code class>   + cc kern/init/init.c           
     gcc -c kern/init/init.c -o obj/kern/init/init.o

   + cc kern/libs/readline.c       
     gcc -c kern/libs/readline.c -o 
     obj/kern/libs/readline.o

   + cc kern/libs/stdio.c          
     gcc -c kern/libs/stdio.c -o obj/kern/libs/stdio.o

   + cc kern/debug/kdebug.c        
     gcc -c kern/debug/kdebug.c -o obj/kern/debug/kdebug.o

   + cc kern/debug/kmonitor.c      
     gcc  -c kern/debug/kmonitor.c -o         
     obj/kern/debug/kmonitor.o

   + cc kern/debug/panic.c         
     gcc  -c kern/debug/panic.c -o obj/kern/debug/panic.o

   + cc kern/driver/clock.c       
     gcc  -c kern/driver/clock.c -o obj/kern/driver/clock.o

   + cc kern/driver/console.c    
     gcc -c kern/driver/console.c -o 
     obj/kern/driver/console.o

   + cc kern/driver/intr.c       
     gcc -c kern/driver/intr.c -o obj/kern/driver/intr.o

   + cc kern/driver/picirq.c     
     gcc -c kern/driver/picirq.c -o 
     obj/kern/driver/picirq.o

   + cc kern/trap/trap.c          
     gcc -c kern/trap/trap.c -o obj/kern/trap/trap.o

   + cc kern/trap/trapentry.S      
     gcc -c kern/trap/trapentry.S -o 
     obj/kern/trap/trapentry.o

   + cc kern/trap/vectors.S        
     gcc -c kern/trap/vectors.S -o obj/kern/trap/vectors.o

   + cc kern/mm/pmm.c              
     gcc -c kern/mm/pmm.c -o obj/kern/mm/pmm.o

   + cc libs/printfmt.c            
     gcc -c libs/printfmt.c -o obj/libs/printfmt.o

   + cc libs/string.c             
     gcc -c libs/string.c -o obj/libs/string.o

   + ld bin/kernel                 
     ld -o bin/kernel  
     obj/kern/init/init.o      obj/kern/libs/readline.o 
     obj/kern/libs/stdio.o     obj/kern/debug/kdebug.o 
     obj/kern/debug/kmonitor.o obj/kern/debug/panic.o 
     obj/kern/driver/clock.o   obj/kern/driver/console.o 
     obj/kern/driver/intr.o    obj/kern/driver/picirq.o
     obj/kern/trap/trap.o      obj/kern/trap/trapentry.o 
     obj/kern/trap/vectors.o   obj/kern/mm/pmm.o  
     obj/libs/printfmt.o       obj/libs/string.o

   + cc boot/bootasm.S             //编译bootasm.S
    gcc  -c boot/bootasm.S -o obj/boot/bootasm.o

   + cc boot/bootmain.c            //编译bootmain.c
    gcc -c boot/bootmain.c -o obj/boot/bootmain.o

   + cc tools/sign.c               //编译sign.c
   gcc -c tools/sign.c -o obj/sign/tools/sign.o
   gcc -O2 obj/sign/tools/sign.o -o bin/sign

   + ld bin/bootblock              //根据sign规范生成bootblock
   ld -m  elf_i386 -nostdlib -N -e start -Ttext 0x7C00 
   obj/boot/bootasm.o  obj/boot/bootmain.o
   -o obj/bootblock.o
</code></pre>
<p>在makefile文件中搜索ucore.img可以找到</p>
<pre class="highlight"><code class>	#create ucore.img
	UCOREIMG	:=$(call totarget,ucore.img)
	$(UCOREIMG):$(kernel)$(bootblock)
		
		$
		$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
	$(call create_target,ucore.img)
</code></pre>
<p>可以看出ucore.img镜像文件是由kernel和bootblock文件生成的。</p>
<pre class="highlight"><code class>	$(V)dd if=/dev/zero of=$@
	count=100000
</code></pre>
<p>这句语句可以看到UCOREIMG分配了一定空间。</p>
<pre class="highlight"><code class>	(V)dd if=$(bootblock) of=$@ conv=notrunc
</code></pre>
<p>这句语句将bootblock复制到上面分配的空间当中。</p>
<pre class="highlight"><code class>	$(V)dd if=$(kernel) of=$@ seek=1 conv=notrunc
</code></pre>
<p>该语句将kernel复制到分配的空间当中。</p>
<h4><span id="1kernel生成"> 1.kernel生成</span></h4>
<pre class="highlight"><code class>	kernel = $(call totarget,kernel)
	$(kernel): tools/kernel.ld
</code></pre>
<p>通过链接来生成kernel目标文件</p>
<pre class="highlight"><code class>	$(kernel): $(KOBJS)     
</code></pre>
<p>kernel的生成还依赖KOBJS</p>
<pre class="highlight"><code class>	@echo + ld $@                
	$(V)$(LD) $(LDFLAGS) -T tools/kernel.ld -o $@ $(KOBJS)   
	@$(OBJDUMP) -S $@ &gt; $(call asmfile,kernel)  
	@$(OBJDUMP) -t $@ | $(SED) '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' &gt; $(call symfile,kernel)
	$(call symfile,kernel)
	kernel = $(call totarget,kernel)
</code></pre>
<h4><span id="2bootblock生成"> 2.bootblock生成</span></h4>
<pre class="highlight"><code class>	bootfiles = $(call listf_cc,boot) 
</code></pre>
<p>用boot替换listf_cc里面的变量，将listf_cc的返回值赋给bootfiles,也就是滤出.c,.s文件</p>
<pre class="highlight"><code class>	$(foreach f,$(bootfiles),$(call cc_compile,$(f),$(CC),$(CFLAGS) -Os -nostdinc))
</code></pre>
<p>编译bookfiles</p>
<pre class="highlight"><code class>	bootblock = $(call totarget,bootblock) 
</code></pre>
<p>生成bootblock</p>
<pre class="highlight"><code class>	$(bootblock): $(call toobj,$(bootfiles)) | $(call totarget,sign)
</code></pre>
<p>生成目标文件bootblock需要依赖于sign和bootfiles</p>
<pre class="highlight"><code class>	@echo + ld $@       
</code></pre>
<p>将以下文件与bootblock连接起来</p>
<pre class="highlight"><code class>	$(V)$(LD) $(LDFLAGS) -N -e start -Ttext 0x7C00 $^ -o $(call toobj,bootblock)
	@$(OBJDUMP) -S $(call objfile,bootblock) &gt; $(call asmfile,bootblock)    
	@$(OBJCOPY) -S -O binary $(call objfile,bootblock) $(call outfile,bootblock)
	@$(call totarget,sign) $(call outfile,bootblock) $(bootblock)

	$(call create_target,bootblock)
</code></pre>
<h4><span id="3生成sign工具"> 3.生成sign工具</span></h4>
<pre class="highlight"><code class>	$(call add_files_host,tools/sign.c,sign,sign)
	$(call create_target_host,sign,sign)
</code></pre>
<ul>
<li>由sign工具、bootfile生成bootblock</li>
<li>由KOBJS生成kernel</li>
<li>由kernel和bootblock生成最终的ucore.img</li>
</ul>
<h3><span id="2一个被系统认为是符合规范的硬盘主引导扇区的特征是什么"> 2.一个被系统认为是符合规范的硬盘主引导扇区的特征是什么?</span></h3>
<p>通过查阅资料我们可以知道bootblock区域包含用于引导的最小指令集，而在上一个问题中我们发现bootblock的生成需要依赖于sign.c文件和bootfiles文件，其中bootfiles提供开机启动所需要的文件，而sign.c则代表生成bootblock的规范。<br>
因此，我们去在文件夹中查看sign.c文件。<br>
文件代码如下：</p>
<pre class="highlight"><code class>    char buf[512];  //定义buf数组
    memset(buf, 0, sizeof(buf));
      // 把buf数组的最后两位置为 0x55, 0xAA
    buf[510] = 0x55;  
    buf[511] = 0xAA;
    FILE *ofp = fopen(argv[2], "wb+");
    size = fwrite(buf, 1, 512, ofp);
    if (size != 512) {       //大小为512字节
        fprintf(stderr, "write '%s' error, size is %d.\n", argv[2], size);            
        return -1;
    }
</code></pre>
<p>通过查看这里的代码，我们可以发现sign规范中给buf提供了512个字节的空间，而且bootblock的格式是最后两个字节分别是0x55和0xAA，而这也是操作系统课上提到的两个神奇的数。</p>
<h2><span id="练习2"> 练习2</span></h2>
<h4><span id="1使用qemu调试make文件"> 1.使用qemu调试make文件</span></h4>
<p>在进入lab1文件夹之后，使用命令 make debug 进入调试模式。<br>
（1）在查看了tools文件夹中的gdbinit文件之后，可以看到存在代码</p>
<pre class="highlight"><code class>	target remote localhost：1234
</code></pre>
<p>这代表着在启动之后会连接qemu和gdb。<br>
（2）在make debug之后输入stepi，可以按照机器指令单步执行。<br>
（3）一开始进入的是init.c程序。提示是init the console。<br>
<img src="https://i.loli.net/2021/04/12/BYtSXi2GRELoAWr.jpg" alt="mmexport1618159483754"><br>
（4）再执行几次step执行源代码之后，就进入stdio.c文件。<br>
（5）像这样反复执行step/next语句，就可以按照程序源代码一步一步执行了。</p>
<h4><span id="2在初始化位置0x7c00设置实地址断点"> 2.在初始化位置0x7c00设置实地址断点</span></h4>
<p>在tools文件夹中的gdbinit文件中增加"b*0x7c00"语句，可以在实地址0x7c00位置设置一个断点。<br>
<img src="https://i.loli.net/2021/04/12/tLjaWr6zifSFGms.jpg" alt="mmexport1618159486187"></p>
<h4><span id="3单步跟踪反汇编得到的代码与bootasms和bootblockasm进行比较"> 3.单步跟踪反汇编得到的代码与bootasm.s和bootblock.asm进行比较</span></h4>
<p>在位置0x7c00位置之后单步执行机器指令并且查看反汇编语句，和gedit打开的bootblock.asm文件进行对比。可以找到这个位置正好在bootblock.asm文件中。在位置0x7c00这里有着相同的语句。<br>
<img src="https://i.loli.net/2021/04/12/jPdDXh3wg8rTqIy.jpg" alt="mmexport1618159487968"><br>
注意在这里要在gdb中执行如下的指令</p>
<pre class="highlight"><code class>	define hook-stop
	x/i $pc
	end
</code></pre>
<p>这样才可以进入反汇编的状态<br>
同时我们查看bootasm.s文件之后，可以看到这样的代码</p>
<pre class="highlight"><code class>	\#Set up the stack pointer and call into C. The stack region is from 0--start(0x7c00)
	movl $0x0, %ebp
	movl $start, %esp
	call bootmain
</code></pre>
<p>意味着从这里开始跳转到0x7c00.</p>
<h4><span id="4自己找一个bootloader或者内核中的代码位置设置断点并进行测试"> 4.自己找一个bootloader或者内核中的代码位置，设置断点并进行测试</span></h4>
<p>像上个问题一样在gdbinit里面写入*b 0x7c1a，设置断点，然后类似的进行单步调试。</p>
<h2><span id="练习3"> 练习3</span></h2>
<p>分析bootloader进入保护模式的过程。<br>
BIOS将通过读取硬盘主引导扇区到内存，并转跳到对应内存中的位置执行bootloader。请分析bootloader是如何完成从实模式进入保护模式的。<br>
提示：需要阅读小节“保护模式和分段机制”和lab1/boot/bootasm.S源码，了解如何从实模式切换到保护模式，需要了解：<br>
1、为何开启A20<br>
2、以及如何开启A20<br>
3、 如何初始化GDT表<br>
4、如何使能和进入保护模式</p>
<h3><span id="分析"> 分析</span></h3>
<h4><span id="首先bootloader从实模式进入保护模式要经过一下几个步骤"> 首先bootloader从实模式进入保护模式要经过一下几个步骤：</span></h4>
<p>1、开启A20门<br>
2、建立GDT表并对其进行初始化操作<br>
3、设置cr0寄存器的值为1</p>
<h4><span id="当寄存器值切换后方可表示模式切换成功"> 当寄存器值切换后方可表示模式切换成功</span></h4>
<h4><span id="初始状态a20地址线被屏蔽所以一直保持为0我们要进一步访问内存需要a20地址线需要将其打开"> 初始状态A20地址线被屏蔽所以一直保持为0，我们要进一步访问内存需要A20地址线，需要将其打开。</span></h4>
<h3><span id="一-开启a20"> 一、开启A20</span></h3>
<h4><span id="打开a20-gate的具体步骤大致如下"> 打开A20 Gate的具体步骤大致如下：</span></h4>
<p>1、等待8042 Input buffer为空<br>
2、发送Write 8042 Output Port （P2） 命令到8042 Input buffer<br>
3、等待8042 Input buffer为空<br>
4、将8042 Output Port（P2） 对应字节的第2位置1，然后写入8042 Input buffer</p>
<pre class="highlight"><code class>    #  开启A20：通过将键盘控制器上的A20线置于高电位，全部32条地址线可用，
    #  可以访问4G的内存空间。
seta20.1:
    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
    testb $0x2, %al
    jnz seta20.1

    movb $0xd1, %al                                 # 0xd1 -&gt; port 0x64
    outb %al, $0x64                                 # 0xd1 means: write data to 8042's P2 port

seta20.2:
    inb $0x64, %al                                  # Wait for not busy(8042 input buffer empty).
    testb $0x2, %al
    jnz seta20.2

    movb $0xdf, %al                                 # 0xdf -&gt; port 0x60
    outb %al, $0x60                                 # 0xdf = 11011111, means set P2's A20 bit(the 1 bit) to 1
</code></pre>
<h3><span id="二-建立并初始化gdt寄存器置为1"> 二、建立并初始化GDT,寄存器置为1</span></h3>
<pre class="highlight"><code class># Switch from real to protected mode, using a bootstrap GDT
# and segment translation that makes virtual addresses
# identical to physical addresses, so that the
# effective memory map does not change during the switch.
#  初始化GDT表：一个简单的GDT表和其描述符已经静态储存在引导区中，载入即可
lgdt gdtdesc
movl %cr0, %eax            #进入保护模式：通过将cr0寄存器PE位置1便开启了保护模式
orl $CR0_PE_ON, %eax
movl %eax, %cr0
</code></pre>
<h4><span id="完成以后步骤后bootloader已经从实模式进入到了保护模式"> 完成以后步骤后bootloader已经从实模式进入到了保护模式</span></h4>
<h2><span id="练习4"> 练习4</span></h2>
<pre class="highlight"><code class>分析BootLoader加载ELF格式的OS的过程
通过阅读bootmain.c,了解bootloader如何加载ELF文件。通过分析代码和通过qemu来运行调试
</code></pre>
<h3><span id="分析"> 分析</span></h3>
<p>首先看bootmain函数</p>
<pre class="highlight"><code class="C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">bootmain</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>{
   <span class="hljs-comment">//read the 1st page off disk</span>
   readseg((<span class="hljs-keyword">uintptr_t</span>)ELFHDR,SECTSIZE*<span class="hljs-number">8</span>,<span class="hljs-number">0</span>);

   <span class="hljs-comment">//is this a valid ELF?</span>
   <span class="hljs-keyword">if</span> (ELFHDR-&gt;e_magic !=ELF_MAGIC){
           <span class="hljs-keyword">goto</span> bad;
   }

   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proghdr</span> *<span class="hljs-title">ph</span>,*<span class="hljs-title">eph</span>;</span>

   <span class="hljs-comment">// load each program segment(ignores ph flags)</span>
   ph = (struct proghdr *)((<span class="hljs-keyword">uintptr_t</span>)ELFHDR+ELFHDR-&gt;e_phoff);
   eph = ph + ELFHDR-&gt;e_phnum;
   <span class="hljs-keyword">for</span>(;ph&lt;eph;ph++){
           readseg(ph-&gt;p_va &amp; <span class="hljs-number">0xFFFFFF</span>, ph-&gt;p_memsz, ph-&gt;p_offset);
   }

   <span class="hljs-comment">// call the entry point from the ELF header</span>
   <span class="hljs-comment">// note:does not return</span>
   ((<span class="hljs-keyword">void</span>(*)(<span class="hljs-keyword">void</span>))(ELFHDR-&gt;e_entry &amp; <span class="hljs-number">0xFFFFFF</span>))();
bad:
   outw(<span class="hljs-number">0x8A00</span>,<span class="hljs-number">0x8A00</span>);
   outw(<span class="hljs-number">0x8A00</span>,<span class="hljs-number">0x8E00</span>);

   <span class="hljs-comment">/* do nothing */</span>
   <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>);
}
</code></pre>
<p>先是读磁盘，转入readseg函数</p>
<pre class="highlight"><code class="C"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readseg</span><span class="hljs-params">(<span class="hljs-keyword">uintptr_t</span> va,<span class="hljs-keyword">uint32_t</span> count,<span class="hljs-keyword">uint32_t</span> offset)</span></span>{
      <span class="hljs-keyword">uintptr_t</span> end_va = va + count;

      <span class="hljs-comment">//round down to sector boundary</span>
      va -= offset % SECTSIZE ;

      <span class="hljs-comment">//translate from bytes to sectors; kernel starts at sector 1</span>
      <span class="hljs-keyword">uint32_t</span> secno = (offset / SECTSIZE) + <span class="hljs-number">1</span>;

      <span class="hljs-comment">//If this is too slow , we could read lots of sectors at  a time.</span>
      <span class="hljs-comment">//We'd write more to memory than asked,but it doesn't matter --</span>
      <span class="hljs-comment">//We load in increasing order.</span>
      <span class="hljs-keyword">for</span>(; va &lt; end_va; va += SECTSIZE, secno ++){
            readsect((<span class="hljs-keyword">void</span>*)va,secno);
      }
}
</code></pre>
<p>从readseg函数发现又调用了readsect函数</p>
<pre class="highlight"><code class="C"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readsect</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *dst,<span class="hljs-keyword">unit32_t</span> secno)</span></span>{
      <span class="hljs-comment">//wait for disk to be ready</span>
      waitdisk();

      outb(<span class="hljs-number">0x1F2</span>, <span class="hljs-number">1</span>);<span class="hljs-comment">//要读写的扇区数，需要表明要读写几个扇区</span>
      outb(<span class="hljs-number">0x1F3</span>, secno &amp; <span class="hljs-number">0xFF</span>);<span class="hljs-comment">//LBA参数的0~7位</span>
      outb(<span class="hljs-number">0x1F4</span>, (secno &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>);<span class="hljs-comment">//LBA参数的8~15位</span>
      outb(<span class="hljs-number">0x1F5</span>, (secno &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>);<span class="hljs-comment">//LBA参数的16~23位</span>
      outb(<span class="hljs-number">0x1F6</span>, ((secno &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xF</span>) | <span class="hljs-number">0xE0</span>);<span class="hljs-comment">//第0~3位：LBA参数的24-27位 第4位：为0主盘；为1从盘</span>
      outb(<span class="hljs-number">0x1F7</span>,<span class="hljs-number">0x20</span>);<span class="hljs-comment">//状态和命令寄存器。操作时先给命令，再读取，如果不是忙状态就从0x1f0端口 读数据</span>

       <span class="hljs-comment">//wait for disk to be ready</span>
      waitdisk();

      <span class="hljs-comment">//read a sector</span>
      insl(<span class="hljs-number">0x1F0</span>,dst,SECTSIZE/<span class="hljs-number">4</span>);<span class="hljs-comment">//读取扇区</span>
</code></pre>
<h4><span id="读一个扇区的流程大致如下"> 读一个扇区的流程大致如下：</span></h4>
<ol>
<li>等待磁盘准备好</li>
<li>发出读取扇区的命令</li>
<li>等待磁盘准备好</li>
<li>把磁盘扇区数据读到指定内存</li>
</ol>
<p>其中的outb是一个机器指令，是在x86.h中的</p>
<pre class="highlight"><code class="C"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">outb</span><span class="hljs-params">(<span class="hljs-keyword">uint16_t</span> port, <span class="hljs-keyword">unit8_t</span> data)</span></span>{
      <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(<span class="hljs-string">"outb %0, %1"</span> :: <span class="hljs-string">"a"</span>(data), <span class="hljs-string">"d"</span>(port))</span></span>;
}
</code></pre>
<p>用内联汇编实现，用了I0空间寻址方式，能将外部的数据读到内存中来，这也是x86里面的寻址方式</p>
<p>可以发现首先是等磁盘准备好，然后是写入地址和读取磁盘的命令，最后是按照地址读取磁盘扇区（可参考代码中的中文注释）</p>
<p>再接着看main函数，用了一个if语句判断是否为ELF文件，具体判断方式为将ELF header中的一个e_magic和一个特定值进行比较，若不是则转入bad,是则继续执行</p>
<pre class="highlight"><code class="C"> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">proghdr</span> *<span class="hljs-title">ph</span>,*<span class="hljs-title">eph</span>;</span>

   <span class="hljs-comment">// load each program segment(ignores ph flags)</span>
   ph = (struct proghdr *)((<span class="hljs-keyword">uintptr_t</span>)ELFHDR+ELFHDR-&gt;e_phoff);<span class="hljs-comment">//将ELF文件的头部文表取出存到ph</span>
   eph = ph + ELFHDR-&gt;e_phnum;
   <span class="hljs-keyword">for</span>(;ph&lt;eph;ph++){ #加载ELF文件到内存
           readseg(ph-&gt;p_va &amp; <span class="hljs-number">0xFFFFFF</span>, ph-&gt;p_memsz, ph-&gt;p_offset);
   }

   <span class="hljs-comment">// call the entry point from the ELF header</span>
   <span class="hljs-comment">// note:does not return</span>
   ((<span class="hljs-keyword">void</span>(*)(<span class="hljs-keyword">void</span>))(ELFHDR-&gt;e_entry &amp; <span class="hljs-number">0xFFFFFF</span>))();<span class="hljs-comment">//ELF文件加载完毕后，将控制权交给ucore去执行</span>
</code></pre>
<h4><span id="由此完成elf文件的加载"> 由此完成ELF文件的加载</span></h4>
<h2><span id="练习5"> 练习5</span></h2>
<pre class="highlight"><code class>完成kdebug.c中函数print_stackframe的实现，可以通过函数&gt;print_stackframe来跟踪函数调用堆栈中记录的返回地址。
</code></pre>
<h3><span id="1-函数堆栈的原理"> 1、函数堆栈的原理</span></h3>
<p>理解函数堆栈最重要的两点是：栈的结构，以及EBP寄存器的作用。</p>
<p>一个函数调用动作可分解为零到多个 PUSH指令（用于参数入栈）和一个 CALL 指令。CALL 指令内部其实还暗含了一个将返回地址压栈的动作，这是由硬件完成的。几乎所有本地编译器都会在每个函数体之前插入类似如下的汇编指令：</p>
<pre class="highlight"><code class="php">pushl %ebp
movl %esp,%ebp
</code></pre>
<p>这两条汇编指令的含义是：首先将ebp 寄存器入栈，然后将栈顶指针 esp 赋值给 ebp。</p>
<p>movl %esp %ebp这条指令表面上看是用esp覆盖 ebp原来的值，其实不然。因为给 ebp赋值之前，原ebp 值已经被压栈（位于栈顶），而新的ebp又恰恰指向栈顶。此时ebp寄存器就已经处于一个非常重要的地位，该寄存器中存储着栈中的一个地址（原 ebp入栈后的栈顶），从该地址为基准，向上（栈底方向）能获取返回地址、参数值，向下（栈顶方向）能获取函数局部变量值，而该地址处又存储着上一层函数调用时的ebp值。</p>
<p>我们可以直接根据ebp就能读取到各个栈帧的地址和值，一般而言，ss:[ebp+4]处为返回地址，ss:[ebp+8]处为第一个参数值（最后一个入栈的参数值，此处假设其占用 4 字节内存，对应32位系统），ss:[ebp-4]处为第一个局部变量，ss:[ebp]处为上一层 ebp 值。</p>
<p>如图<br>
<img src="https://www.hualigs.cn/image/60718747980ba.jpg" alt></p>
<h3><span id="2-print_stackframe函数的实现"> 2、print_stackframe函数的实现</span></h3>
<p>首先我们直接看到print_stackframe函数的注释：</p>
<pre class="highlight"><code class="php">void print_stackframe(void) {
     <span class="hljs-comment">/* LAB1 YOUR CODE : STEP 1 */</span>
     <span class="hljs-comment">/* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);
      * (2) call read_eip() to get the value of eip. the type is (uint32_t);
      * (3) from 0 .. STACKFRAME_DEPTH
      *    (3.1) printf value of ebp, eip
      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (unit32_t)ebp +2 [0..4]
      *    (3.3) cprintf("\n");
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */</span>
}

</code></pre>
<p>这样我们直接根据注释以及之前的相关知识就能比较简单的编写成程序，如下所示：</p>
<pre class="highlight"><code class="c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">print_stackframe</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> </span>{      
    <span class="hljs-keyword">uint32_t</span> ebp=read_ebp();<span class="hljs-comment">//(1) call read_ebp() to get the value of ebp. the type is (uint32_t)</span>
    <span class="hljs-keyword">uint32_t</span> eip=read_eip();<span class="hljs-comment">//(2) call read_eip() to get the value of eip. the type is (uint32_t)</span>
    <span class="hljs-keyword">int</span> i;
    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;STACKFRAME_DEPTH&amp;&amp;ebp!=<span class="hljs-number">0</span>;i++){<span class="hljs-comment">//(3) from 0 .. STACKFRAME_DEPTH</span>
          cprintf(<span class="hljs-string">"ebp:0x%08x   eip:0x%08x "</span>,ebp,eip);<span class="hljs-comment">//(3.1)printf value of ebp, eip</span>
          <span class="hljs-keyword">uint32_t</span> *tmp=(<span class="hljs-keyword">uint32_t</span> *)ebp+<span class="hljs-number">2</span>;
          cprintf(<span class="hljs-string">"arg :0x%08x 0x%08x 0x%08x 0x%08x"</span>,*(tmp+<span class="hljs-number">0</span>),*(tmp+<span class="hljs-number">1</span>),*(tmp+<span class="hljs-number">2</span>),*(tmp+<span class="hljs-number">3</span>));<span class="hljs-comment">//(3.2)(uint32_t)calling arguments [0..4] = the contents in address (unit32_t)ebp +2 [0..4]</span>
          cprintf(<span class="hljs-string">"\n"</span>);<span class="hljs-comment">//(3.3) cprintf("\n");</span>
          print_debuginfo(eip<span class="hljs-number">-1</span>);<span class="hljs-comment">//(3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.</span>
          eip=((<span class="hljs-keyword">uint32_t</span> *)ebp)[<span class="hljs-number">1</span>];
          ebp=((<span class="hljs-keyword">uint32_t</span> *)ebp)[<span class="hljs-number">0</span>];<span class="hljs-comment">//(3.5) popup a calling stackframe</span>
      }
}
</code></pre>
<p>实验结果截图如下：</p>
<p><img src="https://www.hualigs.cn/image/607182a0e97c8.jpg" alt></p>
<h2><span id="练习6完善中断初始化和处理"> 练习6：完善中断初始化和处理</span></h2>
<p>1、中断描述符表（也可简称为保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码的入口？<br>
2、请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，依次对所有中断入口进行初始化。使用mmu.h中的SETGATE宏，填充idt数组内容。每个中断的入口由tools/vectors.c生成，使用trap.c中声明的vectors数组即可。<br>
3、请编程完善trap.c中的中断处理函数trap,在对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统毎遇到100次时钟中断后，调用print_tricks子程序，在屏幕上打印一行文字“100 ticks”。</p>
<h3><span id="1-中断描述符表中一个表项占8字节"> 1、中断描述符表中一个表项占8字节</span></h3>
<p><img src="https://i.loli.net/2021/04/12/AgIlN5Sc1YDE9oP.png" alt="mmexport1618159489650"></p>
<p>如上图所示，其中的0-15位是offset的低16位，48-63位是offset的高16位，16-31位是段选择子，用于索引全局描述符表GDT来获取中断处理代码对应的段地址，再加上段内偏移量即可得到中断处理代码的入口。</p>
<h3><span id="2-完善初始化函数"> 2、完善初始化函数</span></h3>
<pre><code>  （1）根据函数中的注释提示，第一步是声明__vertors[];
    (2) 第二步是使用SETGATE填充中段描述符表IDT
    (3) 第三步是使用lidt指令让CPU加载中断描述符表IDT
</code></pre>
<p>具体的代码如下：</p>
<pre class="highlight"><code class="C"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">idt_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>{
      <span class="hljs-keyword">extern</span> <span class="hljs-keyword">uintptr_t</span> __vecors[];
      <span class="hljs-keyword">int</span> i;
      <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">256</span>; i++){
          SETGATE(idt[i],<span class="hljs-number">0</span>,GD_KTEXT,__vectors[i],DPL_KERNEL);
      }
      SETGATE(idt[T_SWITCH_TOK],<span class="hljs-number">0</span>,GD_KTEXT,__vectors[T_SWITCH_TOK],DPL_USER);
      lidt(&amp;idit_pd);
}
</code></pre>
<p>其中宏SETGATE的定义为</p>
<pre class="highlight"><code class>#define SETGATE(gate, istrap, sel, off, dpl)
</code></pre>
<p>GD_KTEXT和DPL_KERNEL的定义在memlayout.h中<br>
<img src="https://i.loli.net/2021/04/12/FitCeqP7261J3jn.png" alt="mmexport1618159491208"><br>
gate表示处理函数的入口地址，此处即idt[]数组中的内容<br>
istrap表示1为异常门，0为中断门<br>
sel表示段选择子<br>
off表示偏移量，此处即__vectors[]数组中的内容<br>
dpl表示设置等级，此处设置为DPL_KERNEL，恒为0</p>
<h3><span id="3-编写函数"> 3、编写函数</span></h3>
<p>根据提示，需要用一个全局变量记录每次时钟中断，然后用print_ticks()打印“100 ticks”后重新从0开始计数，参照clock.c,写出如下函数：</p>
<pre class="highlight"><code class="C"><span class="hljs-keyword">case</span> IRQ_OFFSET+IRQ_TIMER:
ticks=ticks+<span class="hljs-number">1</span>;
<span class="hljs-keyword">if</span>(ticks==TICK_NUM){
      print_ticks();
      ticks=<span class="hljs-number">0</span>;
}
<span class="hljs-keyword">break</span>;
</code></pre>
<p>其中TICK_NUM已被定义为100<br>
最后的运行结果为下图：<br>
<img src="https://i.loli.net/2021/04/12/5UolSrpgHAkIKDv.png" alt="mmexport1618159492686"><br>
<img src="https://i.loli.net/2021/04/12/LeNXnSIkDY26UGE.png" alt="mmexport1618159481302"></p>
<h2><span id="challenge-1amp2-新建用户态并进行内核态互换"> Challenge 1&amp;2 新建用户态并进行内核态互换</span></h2>
<p>通过编写c++内联汇编函数，来实现用户态和内核态的切换。</p>
<p>已知初始化内核的函数如下：</p>
<pre class="highlight"><code class>static void
switch_test(void) {
	print_cur_status(); // print 当前 cs/ss/ds 等寄存器状态
	cprintf("+++ switch to user mode +++\n");
	switch_to_user(); // switch to user mode
	print_cur_status();
	cprintf("+++ switch to kernel mode +++\n");
	switch_to_kernel(); // switch to kernel mode
	print_cur_status();
}
</code></pre>
<p>而在init.c里面没有switch_to_user函数的内容以及switch_to_kernel函数的内容，因此这些部分需要编程。</p>
<h3><span id="1调到用户态"> 1.调到用户态</span></h3>
<p>通过编写switch_to_user的内容来使在内核初始化的时候可以切换到用户态。</p>
<pre class="highlight"><code class>asm volatile (
    "sub $0x8, %%esp \n"
    "int %0 \n"
    "movl %%ebp, %%esp"
    : 
    : "i"(T_SWITCH_TOU)
);
</code></pre>
<p>通过编写内联汇编语句来实现切换，用中断处理int 0来实现，需要输入的“i”也就是T_SWITCH_TOU。调整栈顶指针和栈底指针开辟程序空间之后，进行中断来实现切换。<br>
在trap.c中要修改t_switch_tou的内容</p>
<pre class="highlight"><code class>case T_SWITCH_TOU:
    if (tf-&gt;tf_cs != USER_CS) {
        switchk2u = *tf;
        switchk2u.tf_cs = USER_CS;
        switchk2u.tf_ds = switchk2u.tf_es = switchk2u.tf_ss = USER_DS;
        switchk2u.tf_esp = (uint32_t)tf + sizeof(struct trapframe) - 8;
        switchk2u.tf_eflags |= FL_IOPL_MASK;
        *((uint32_t *)tf - 1) = (uint32_t)&amp;switchk2u;
      }
      break;
</code></pre>
<p>这段代码可以使原来的状态不是用户态时候，将原来的状态修改成用户态。</p>
<pre class="highlight"><code class>switchk2u.tf_eflags |= FL_IOPL_MASK;
*((uint32_t*)tf - 1) = (uint32_t)&amp;switchk2u;
</code></pre>
<p>将这里的标记确认成为用户态，并且中断返回到正确的栈。</p>
<h3><span id="2用户态到内核态"> 2.用户态到内核态</span></h3>
<p>用类似的内联汇编处理。</p>
<pre class="highlight"><code class>asm volatile (
    "int %0 \n"
    "movl %%ebp, %%esp \n"
    : 
    : "i"(T_SWITCH_TOK)
);
</code></pre>
<p>因为切换到的是内核态，不需要更多空间，所以相比内核到用户的内联汇编不再需要在栈指针减去一个值来开辟空间。</p>
<p>然后我们同样需要在trap.c中修改T_SWITCH_TOK的内容</p>
<pre class="highlight"><code class>case T_SWITCH_TOK:
    if (tf-&gt;tf_cs != KERNEL_CS) {
        tf-&gt;tf_cs = KERNEL_CS;
        tf-&gt;tf_ds = tf-&gt;tf_es = KERNEL_DS;
        tf-&gt;tf_eflags &amp;= ~FL_IOPL_MASK;
        switchu2k = (struct trapframe *)(tf-&gt;tf_esp (sizeof(struct trapframe) - 8));
        memmove(switchu2k, tf, sizeof(struct trapframe) - 8);
        *((uint32_t *)tf - 1) = (uint32_t)switchu2k;
      }
</code></pre>
<p>跟之前切换的修改类似</p>
<h3><span id="3实现切换"> 3.实现切换</span></h3>
<pre class="highlight"><code class>case IRQ_OFFSET + IRQ_KBD:
        c = cons_getc();
        cprintf("kbd [%03d] %c\n", c, c);
        if(c == '0' &amp;&amp; (tf-&gt;tf_cs &amp; 3) != 0)
        {
                cprintf("Input 0......switch to kernel\n");
                tf-&gt;tf_cs = KERNEL_CS;
                tf-&gt;tf_ds = tf-&gt;tf_es = KERNEL_DS;
                tf-&gt;tf_eflags &amp;= ~FL_IOPL_MASK;
        }
        else if (c == '3' &amp;&amp; (tf-&gt;tf_cs &amp; 3) != 3)
        {
                cprintf("Input 3......switch to user\n");
                tf-&gt;tf_cs = USER_CS;
                tf-&gt;tf_ds = tf-&gt;tf_es = tf-&gt;tf_ss = USER_DS;
                tf-&gt;tf_eflags |= FL_IOPL_MASK;
        }
        break;
</code></pre>
<p>修改完代码之后执行</p>
<pre class="highlight"><code class>make qemu
</code></pre>
<p>键盘输入0或3即可实现切换<br>
<img src="https://i.loli.net/2021/04/12/BlXaezgdp5FUqCi.png" alt="image-20210412215946076"></p>
<h4><span id="最终评分"> 最终评分</span></h4>
<p><img src="https://i.loli.net/2021/04/12/lsaMBPhk21v57wG.png" alt="image-20210412042453346"></p>
]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Homework</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>可视化第一次作业</title>
    <url>/blog/2021/042021410.html</url>
    <content><![CDATA[<h2><span id="作业内容"> 作业内容</span></h2>
<p>1．编程实现消息测试程序，满足以下要求：</p>
<ul>
<li>按下键盘任意字符键（至少识别两个功能键），客户区中显示按键信息（字符或功能键内容）；</li>
<li>单击鼠标左键，消息对话框中显示鼠标信息（鼠标左键+坐标）；</li>
<li>假设鼠标右键失灵，用Ctrl+鼠标左键代替，消息对话框中显示鼠标信息（鼠标右键+坐标）；</li>
<li>自定义WM_MY_MESSAGE消息，带10和100两个参数，由“#”（不是“3”）键激活，客户区中显示相应信息（自定义消息+参数）。</li>
</ul>
<p>2．编程实现SmallBall程序，满足以下要求：</p>
<ul>
<li>
<p>黑色小球，从左上角开始，沿着45度方向移动，遇到边界反弹；</p>
</li>
<li>
<p>通过两个菜单项（加速与减速），调节小球的移动幅度（递增或递减）；</p>
</li>
<li>
<p>通过两个工具栏按钮，控制小球停止与再次启动。</p>
</li>
</ul>
<h2><span id="展示"> 展示</span></h2>
<h3><span id="key"> Key</span></h3>
<ul>
<li>常规按键<img src="https://i.loli.net/2021/04/10/LtxDPg4NpKm3bJX.png" alt="image-20210410023017458"></li>
<li>功能键<img src="https://i.loli.net/2021/04/10/HPatbpGTQgdBCJN.png" alt="image-20210410023048135"></li>
<li>单击鼠标左键<img src="https://i.loli.net/2021/04/10/JfwLslFUXH6tzTB.png" alt="image-20210410023059952"></li>
<li>Ctrl+鼠标左键替代鼠标右键<img src="https://i.loli.net/2021/04/10/PYLnBzyw5SKOXeI.png" alt="image-20210410023133667"></li>
<li>自定义Message<img src="https://i.loli.net/2021/04/10/cCtlwdvs8QXrESo.png" alt="image-20210410023153774"></li>
</ul>
<h3><span id="ball"> Ball</span></h3>
<p><img src="https://i.loli.net/2021/04/10/WS6rURfknB49DNc.png" alt="image-20210410030903621"></p>
<ul>
<li>加速<img src="https://i.loli.net/2021/04/10/PHjtbaTiSw37Xl6.png" alt="image-20210410030933797"></li>
<li>减速<img src="https://i.loli.net/2021/04/10/YzKMdRfaXbGpCDI.png" alt="image-20210410030948776"><img src="https://i.loli.net/2021/04/10/Uq483YVEaDMZKc2.png" alt="image-20210410031001983"></li>
<li>暂停<img src="https://i.loli.net/2021/04/10/7n9xGEIcN6SXsrw.png" alt="image-20210410031024027"></li>
<li>启动<img src="https://i.loli.net/2021/04/10/VkzQeE72lSgiXbr.png" alt="image-20210410031045983"></li>
<li>有轨迹<img src="https://i.loli.net/2021/04/10/eG64R9viCbpTWoL.png" alt="image-20210410031059904"></li>
<li>状态栏<img src="https://i.loli.net/2021/04/10/CBJrvedRExpFKhy.png" alt="image-20210410031125221"></li>
</ul>
<h2><span id="实现过程"> 实现过程</span></h2>
<h3><span id="key"> Key</span></h3>
<h5><span id="添加命令"> 添加命令</span></h5>
<p>在MESSAGE_MAP处添加本项目所需所有打印命令，包括自定义命令。</p>
<pre class="highlight"><code class>BEGIN_MESSAGE_MAP(CKeyView, CView)
	//标准打印命令
	ON_COMMAND(ID_FILE_PRINT, &amp;CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_DIRECT, &amp;CView::OnFilePrint)
	ON_COMMAND(ID_FILE_PRINT_PREVIEW, &amp;CView::OnFilePrintPreview)
	ON_WM_LBUTTONUP()
	ON_WM_CHAR()
	ON_WM_KEYDOWN()
	ON_MESSAGE(WM_MYMESSAGE, OnMyMessage)
END_MESSAGE_MAP()
</code></pre>
<h5><span id="头文件函数声明"> 头文件函数声明</span></h5>
<p>在KeyView.h头文件里面声明OnLButtonUp，OnChar，PreTranslateMessages，以及OnMyMessage函数</p>
<pre class="highlight"><code class>protected:
	afx_msg void OnLButtonUp(UINT nFlags, CPoint point);      //添加鼠标左键点击函数，以及按键事件函数
	afx_msg void OnChar(UINT nChar, UINT nRedCnt, UINT nFlags);
	virtual BOOL PreTranslateMessage(MSG* pMsg);
	afx_msg LRESULT OnMyMessage(WPARAM wParam, LPARAM lParam);
</code></pre>
<h5><span id="void-ckeyviewonlbuttonupuint-nflags-cpoint-point"> void CKeyView::OnLButtonUp(UINT nFlags, CPoint point)</span></h5>
<p>本函数主要实现鼠标左键点击以及替代右键功能，利用if语句如果是Ctrl+鼠标左键的话，则输出右键点击，并利用point来获取当前坐标，使用TextOutW来输出，如果if条件不成立，则输出左键点击</p>
<pre class="highlight"><code class>void CKeyView::OnLButtonUp(UINT nFlags, CPoint point)
{
	CDC* pDC = GetDC();
	CString m_str;
	if (nFlags &amp; MK_CONTROL)//ctrl+左键代表右键
		m_str.Format(L"X:%d,Y:%d:Right Mouse Button Clicked!", point.x, point.y);
	else
		m_str.Format(L"X:%d,Y:%d:Left Mouse Button Clicked!", point.x, point.y);
	pDC-&gt;TextOutW(point.x, point.y, m_str);
}
</code></pre>
<h5><span id="void-ckeyviewoncharuint-nchar-uint-nredcnt-uint-nflags"> void CKeyView::OnChar(UINT nChar, UINT nRedCnt, UINT nFlags)</span></h5>
<p>本函数主要实现常规按键和自定义消息#键（在自定义消息里面讲）的输出，首先获取当前按键的字符，如果不是#，则弹出弹框声明</p>
<pre class="highlight"><code class>void CKeyView::OnChar(UINT nChar, UINT nRedCnt, UINT nFlags)
{
	if (nChar == '#') //按键如果是#则调用自定义消息，其他则调用系统消息
		SendMessage(WM_MYMESSAGE, 10, 100);
	else
	{
		CString str;
		str.Format(L"%c Key Entered!", nChar);
		MessageBox(str);
	}
	CView::OnChar(nChar, nRedCnt, nFlags);
}
</code></pre>
<h5><span id="bool-ckeyviewpretranslatemessagemsg-pmsg"> BOOL CKeyView::PreTranslateMessage(MSG* pMsg)</span></h5>
<p>本函数实现功能按键，主要思路就是通过pMsg的wParam来对应不同功能键，从而进行输出，考虑到shift和ctrl的常用性，并没有对其进行添加，其他功能键也类似</p>
<pre class="highlight"><code class>BOOL CKeyView::PreTranslateMessage(MSG* pMsg)
{
	if (pMsg-&gt;message == WM_KEYDOWN)//添加功能键，方法类似可添加更多，常用ctrl和shift注释掉了以免影响其他键的操作
	{
		if (pMsg-&gt;wParam == VK_F1)  MessageBox(L"F1 Key Entered!");
		if (pMsg-&gt;wParam == VK_F2)  MessageBox(L"F2 Key Entered!");
		if (pMsg-&gt;wParam == VK_F3)  MessageBox(L"F3 Key Entered!");
		if (pMsg-&gt;wParam == VK_F4)  MessageBox(L"F4 Key Entered!");
		if (pMsg-&gt;wParam == VK_F5)  MessageBox(L"F5 Key Entered!");
		if (pMsg-&gt;wParam == VK_F6)  MessageBox(L"F6 Key Entered!");
		if (pMsg-&gt;wParam == VK_F7)  MessageBox(L"F7 Key Entered!");
		if (pMsg-&gt;wParam == VK_F8)  MessageBox(L"F8 Key Entered!");
		if (pMsg-&gt;wParam == VK_F9)  MessageBox(L"F9 Key Entered!");
		if (pMsg-&gt;wParam == VK_F10)  MessageBox(L"F10 Key Entered!");
		if (pMsg-&gt;wParam == VK_F11)  MessageBox(L"F11 Key Entered!");
		if (pMsg-&gt;wParam == VK_F12)  MessageBox(L"F12 Key Entered!");
		if (pMsg-&gt;wParam == VK_UP)  MessageBox(L"↑ Key Entered!");
		if (pMsg-&gt;wParam == VK_DOWN)  MessageBox(L"↓ Key Entered!");
		if (pMsg-&gt;wParam == VK_LEFT)  MessageBox(L"← Key Entered!");
		if (pMsg-&gt;wParam == VK_RIGHT)  MessageBox(L"→ Key Entered!");
		//if (pMsg-&gt;wParam == VK_CONTROL)  MessageBox(L"Ctrl Key Entered!");
		if (pMsg-&gt;wParam == VK_CAPITAL)  MessageBox(L"CapsLk Key Entered!");
		//if (pMsg-&gt;wParam == VK_SHIFT)  MessageBox(L"Shift Key Entered!");
	}

	return CView::PreTranslateMessage(pMsg);
}
</code></pre>
<h5><span id="自定义消息"> 自定义消息</span></h5>
<ul>
<li>首先声明自己的消息名字和编号<pre class="highlight"><code class>#define WM_MYMESSAGE WM_USER+10
</code></pre>
</li>
<li>声明一个关于自定义消息的响应函数OnMyMessage</li>
<li>在Onchar里面实现，如果按下#键，则SendMessage，含有两个参数10和100<pre class="highlight"><code class>if (nChar == '#') //按键如果是#则调用自定义消息，其他则调用系统消息
  	SendMessage(WM_MYMESSAGE, 10, 100);
</code></pre>
</li>
</ul>
<h5><span id="定义主面板名称"> 定义主面板名称</span></h5>
<pre class="highlight"><code class>cs.style &amp;= ~FWS_ADDTOTITLE;                    //修改主窗口标题
m_strTitle = _T("Key");
</code></pre>
<h3><span id="ball"> Ball</span></h3>
<p>小球采用异或方法来实现小球的消除，也可以实现小球的轨迹消除，通过Timer来实现小球的不断移动和刷新，从而造成一种小球运动的现象，</p>
<h5><span id="声明ball类变量"> 声明Ball类变量</span></h5>
<pre class="highlight"><code class>public:
	afx_msg int OnCreate(LPCREATESTRUCT lpCreateStruct);//声明timer
	afx_msg void OnDestroy();
	afx_msg void OnTimer(UINT_PTR nIDEvent);
private:          
	int x;        //x，y表示当前坐标，step_num表示步幅倍数，step_x,step_y表示每次移动距离的单位
	int y;
	int step_num;
	int step_x;
	int step_y;
	int size;   //小球大小
	bool begin_pause;   //小球状态
	bool trail;     //小球轨迹状态
public:
	afx_msg void OnSpeedUp();   //声明加速函数
	afx_msg void OnSpeedDown();  //声明减速函数
	afx_msg void OnTrail();     //声明轨迹函数
	afx_msg void OnBegin_Pause();  //声明状态函数
</code></pre>
<h5><span id="实现小球运动"> 实现小球运动</span></h5>
<p>不断函数调用来实现小球的运动，采用step_num来控制小球的速度，当按下加速键是step_num加1，加速，减速同理，当速度为1是，如果继续减速，将强制停止此操作，并弹出消息提示，暂停功能的实现是通过阶数当前计时器，开始则重新开启一个同样编号的计时器，轨迹的消除通过控制变量trail来实现，如果不需要轨迹，则执行异或操作将轨迹消除，并进行清屏，反之则不执行</p>
<pre class="highlight"><code class>int CBallView::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
	if (CView::OnCreate(lpCreateStruct) == -1)
		return -1;

	// TODO:  在此添加您专用的创建代码
	SetTimer(1, 100, NULL);//计时器编号，刷新时间（ms)可以通过刷新时间来实现加速和减速
	return 0;
}

void CBallView::OnDestroy()
{
	CView::OnDestroy();

	KillTimer(1);
}

void CBallView::OnTimer(UINT_PTR nIDEvent)
{
	if (nIDEvent == 1)
	{
		CRect rect;
		GetClientRect(&amp;rect);
		CDC* pDC = GetDC();
		pDC-&gt;SetROP2(R2_XORPEN);
		pDC-&gt;Ellipse(x, y, x + size, y + size);
		x += step_x*step_num;  //通过改变步幅倍率来改变速度
		y += step_y*step_num;
		theApp.x_ = x;
		theApp.y_ = y;
		if (x&lt;0 || x&gt;rect.right - size)  //转向操作
		{
			step_x = 0 - step_x;
		}
		if (y&lt;0 || y&gt;rect.bottom - size)
		{
			step_y = 0 - step_y;
		}
		if (!trail) //是否保留轨迹，不保留则通过异或消除
			pDC-&gt;Ellipse(x,y,x+size,y+size);
	}
	CView::OnTimer(nIDEvent);
}
</code></pre>
<h5><span id="菜单栏的实现"> 菜单栏的实现</span></h5>
<p>在资源视图中找到主视图进行添加相应部分，并添加事件来响应<img src="https://i.loli.net/2021/04/10/CGXbiHruFw5kjBp.png" alt="image-20210410031318645"></p>
<pre class="highlight"><code class>void CBallView::OnSpeedUp() //加速函数，并弹出弹框提示速度信息
{
	// TODO: 在此添加命令处理程序代码
	step_num++;
	theApp.speed_ = step_num;
	CString str;
	str.Format(L"Current speed:%d", step_num);
	MessageBox(str);
}


void CBallView::OnSpeedDown()  //减速函数，并弹出弹框提示速度信息，如果速度为1，仍要减速，则不允许减速，弹出提示消息
{
	// TODO: 在此添加命令处理程序代码
	if (step_num &gt; 1)
	{
		step_num--;
		theApp.speed_ = step_num;
		CString str;
		str.Format(L"Current speed:%d", step_num);
		MessageBox(str);
	}
	else//速度为1
	{
		CString str;
		str.Format(L"                          Current speed:%d\n\dThe current speed is already the minimum.\n           No more deceleration is allowed.", step_num);
		MessageBox(str);
	}
}


void CBallView::OnTrail()//是否保留轨迹，不保留则通过用白色刷新全屏来实现清屏
{
	// TODO: 在此添加命令处理程序代码
	if (trail)
	{
		trail = false;
		CDC* pDC = GetDC();
		CRect rc;
		GetClientRect(&amp;rc);

		pDC-&gt;FillSolidRect(&amp;rc, RGB(255, 255, 255));
		pDC-&gt;SetROP2(R2_XORPEN);
		pDC-&gt;Ellipse(x, y, x + size, y + size);
		ReleaseDC(pDC);
	}
	else
		trail = true; 
}


//void CBallView::OnBegin_Pause()//暂停实现方法一，步幅倍率为0，则一直在原地刷新，小球会一直闪动
//{
//	// TODO: 在此添加命令处理程序代码
//	if (begin_pause == 0)
//	{
//		begin_pause = step_num;
//		step_num = 0;
//	}
//	else
//	{
//		step_num = begin_pause;
//		begin_pause = 0;
//	}
//}
void CBallView::OnBegin_Pause()//暂停实现方法二，通过kill掉Timer来实现暂停，开始则重新申请一个Timer
{
	// TODO: 在此添加命令处理程序代码
	if (!begin_pause)
	{
		begin_pause = true;
		KillTimer(1);
	}
	else
	{
		SetTimer(1, 100, NULL);
		begin_pause = false;
	}
}
</code></pre>
<h5><span id="状态栏的实现"> 状态栏的实现</span></h5>
<p>新建三个状态 速度，位置和时间，并将其添加到indicators数组里面，使用SetPaneInfo函数来设置三个状态的信息以及宽度，然后继续利用Timer来不断刷新，速度和位置采用全局变量来获得，时间则通过CTime::GetCurrentTime()函数实现。<img src="https://i.loli.net/2021/04/10/5Q8AhTBCuRIslO7.png" alt="image-20210410031352719"></p>
<pre class="highlight"><code class>m_wndStatusBar.SetIndicators(indicators, sizeof(indicators)/sizeof(UINT));
	
m_wndStatusBar.SetPaneInfo(4, IDS_INDICATOR_SPEED, SBPS_POPOUT, 50);//设置三个信息的位置和宽度
m_wndStatusBar.SetPaneInfo(5, IDS_INDICATOR_MESSAGE, SBPS_POPOUT, 110);
m_wndStatusBar.SetPaneInfo(6, IDS_INDICATOR_TIME, SBPS_POPOUT, 50);
RepositionBars(AFX_IDW_CONTROLBAR_FIRST, AFX_IDW_CONTROLBAR_LAST, IDS_INDICATOR_TIME);

//添加时间显示函数
SetTimer(2, 100, NULL);
CTime t1;

CString str_1;                                      //对三栏信息进行初始化
str_1.Format(L"Speed:%d", theApp.speed_);
m_wndStatusBar.SetPaneText(4, str_1);

CString str_2;
str_2.Format(L"Location(%d,%d)", theApp.x_, theApp.y_);
m_wndStatusBar.SetPaneText(5, str_2);

t1 = CTime::GetCurrentTime();
m_wndStatusBar.SetPaneText(6, t1.Format("%H:%M:%S"));
</code></pre>
<pre class="highlight"><code class>void CMainFrame::OnTimer(UINT_PTR nIDEvent)//通过timer来实现刷新
{
	CTime t1;

	CString str_1;
	str_1.Format(L"Speed:%d", theApp.speed_);
	m_wndStatusBar.SetPaneText(4, str_1);

	CString str_2;
	str_2.Format(L"Location(%d,%d)", theApp.x_, theApp.y_);
	m_wndStatusBar.SetPaneText(5, str_2);

	t1 = CTime::GetCurrentTime();//获取当前时间来刷新状态栏
	m_wndStatusBar.SetPaneText(6, t1.Format("%H:%M:%S"));


	CFrameWnd::OnTimer(nIDEvent);
}
</code></pre>
<h5><span id="定义主面板名称"> 定义主面板名称</span></h5>
<pre class="highlight"><code class>cs.style &amp;= ~FWS_ADDTOTITLE;                    //修改主窗口标题
m_strTitle = _T("Ball");
</code></pre>
<h2><span id="实验收获"> 实验收获</span></h2>
<p>通过本次实验掌握了MFC的基本操作，理解了其实现功能的机制（消息的发送和执行），了解了一些基本函数的使用的，在对其界面优化过程中，通过实践对其理解加深，主要存在困难就是对函数的使用，以及初步接触MFc对其实现机制不太了解，实验过后相信会有所提升。</p>
]]></content>
      <categories>
        <category>Homework</category>
      </categories>
      <tags>
        <tag>Homework</tag>
        <tag>MFC</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github搭建自己的博客</title>
    <url>/blog/2021/03711.html</url>
    <content><![CDATA[<p>​	今天算是把自己的简易博客给搭建了起来，虽然说很丑，很多地方优化还没做好，功能也不太全，但是，做事情嘛，总是要一步步来的，哪有一蹴而就的事情，自己慢慢摸索，踩了许多坑之后，也把这其中的原理摸索了个七七八八，虽然说要我写个主题是天大的难题，但是理解博客的架构，以及github的用法也是很容易的，甚至就连命令也因为出错太多，四处填坑而记得些常用的，所以说做事情别人教给自己的和自己摸索的是完全不一样的，当然这个摸索也是在其他大佬教程和错误修正基础之上摸索的，并不是“白手起家”，废话不多说，进入正题，记录一些我自己的搭建过程，也是那些像我一样的小白提供一个同样水平的教程，绝对包教包会，首先我们先来了解一下他们的工作原理，通俗理解，如有不对，欢迎指正。</p>
<h2><span id="关于github"> 关于Github</span></h2>
<p>​		首先关于Github，本质上讲就是一个比较通用的代码托管平台。你可以将自己做的项目之类balabala的都放在里面，取用方便，最重要的是他完全免费，是一个很好的托管平台，做一些比较大的项目也可以多人协作（扯远了），回来说我们的博客，你可以在Github上面建立一个或者多个仓库，名字可以任意取，这些仓库本质没有区别，Github还为每个仓库提供一个页面还有主题（当然主体比较单一，还比较<s>漂亮</s>chou），当然你也可以选择自己搭配喜欢的主题。唯一不同之处就是Github给每个用户提供一个域名（<a href="http://username.github.io">username.github.io</a>），当你的仓库以这个格式命名的时候，他就会默认这个仓库的界面就是你的网站主界面，其他的仓库就是他的子目录，就这么点区别，举个栗子，我的用户名是Test，那么我的网站主界面就是https://Test.github.io， <a href="http://xn--Test-p35fra5gr24c3pqk5bwvktkmh0miw9c3c2c.github.io">他所代表的仓库名字就是Test.github.io</a>，如果我还有一个仓库名字是Blog，那么这个仓库的主界面就要用https://Test.github.io/Blog 打开，这样说就很简单易懂了吧，其他区别完全没有，名字你可随便改，当你给哪个仓库命名为username.github.io时，默认打开就是这个仓库主界面（当然站点配置也要改，不然会出错的）。</p>
<h2><span id="关于git"> 关于Git</span></h2>
<p>​		Git本身就是一个工具，这里我们用它来实现我们的各种命令，大致可以等同于命令行，可以用Git来安装各种插件，实现命令，这里不多介绍，后面过程中你就会明白。</p>
<h2><span id="关于hexo"> 关于Hexo</span></h2>
<p>​		我们所使用的主题以及大部分插件都由Hexo提供，你可以把它理解为一家衣服店铺，我们来挑选我们喜欢的衣服（theme），同时它也提供裁裤腿，钉扣子（插件）服务，这样就可以理解了吧。</p>
<h2><span id="流程"> 流程</span></h2>
<p>​		简单介绍一下流程，非常简单。首先我们建立一个仓库以便我们能够放一些我们主题的配置文件在里面，当然仓库名字就要命名为username.github.io格式了，这样我们的主页面才会使我们配置的那样，然后我们需要在本地也创建一个仓库，在里面把我们平时用的代码等等都放在里面，然后把本地仓库和远程仓库连接，再把本地文件代码上传就可以得到我们想要的简洁漂亮的网站了，是不是很简单呢。</p>
<h2><span id="具体步骤"> 具体步骤</span></h2>
<h3><span id="仓库搭建"> 仓库搭建</span></h3>
<p>仓库搭建可以参考一下这位大佬的博客：<a href="https://godweiyang.com/2018/04/13/hexo-blog/">超详细Hexo+Github博客搭建小白教程</a></p>
<p>讲得非常详细，我就不再介绍了，做点其他有用的东西。</p>
<h3><span id="网站配置"> 网站配置</span></h3>
<p>在你的本地文件夹里面会有一个_config.yml文件，这个就是你的网站的配置文件了，可以在里面配置你的网站名字，图标等等，基本上你想到的都可以在里面设置，具体每一项对应那个部分，hexo官网很详细，也不再多补充，可以参考<a href="https://hexo.io/zh-cn/docs/configuration">Hexo文档</a>，里面没有的话<a href="https://www.baidu.com/">百度一下，你就知道</a>，总的来说，不难要善用搜索引擎。</p>
<h3><span id="主题更换"> 主题更换</span></h3>
<p>主题选择的话可以从<a href="https://hexo.io/themes/index.html">Themes|Hexo</a>上选你喜欢的，具体步骤里面每个主题作者都会介绍，大致过程是一样的，不管你是clone也好，下载zip主题文件也好，要保证你的主题文件夹在themes文件夹下面，然后回到你的网站的文件夹里面找到_config.yml配置文件，在里面找到theme，将其更改为你的主题，比如说我的是<a href="https://shen-yu.gitee.io/2019/ayer/">Ayer</a>，就是这样</p>
<p><img src="https://i.loli.net/2021/04/07/c58fxSXgOuYEDka.png" alt="image-20210407212409875"></p>
<p>然后基本上就可以了，之后需要做的就是一些优化工作，讲几点大家会遇到的关键的：</p>
<ul>
<li>会有两个_config.yml文件，一个位于你网站的页面，是你网站的配置文件，另一个是在你的主题文件夹里面，两个名字一样，但是千万不要弄混，不要修改错文件，这两个都是配置文件，所以名字相同，但是配置的对象不一样，这点明白，应该就很简单了。</li>
<li>更换主题的步骤基本上就是theme后面换上你的主题名字，然后在安装你的主题所需要的插件，比如说你的网站想要有一个播放器小图标，但是你不给安装插件，就算主题配置里面作者配置的再全，也不可能有用，所以说要按照主题安装说明安装插件（在网站主页面右键Git Bush Here),然后修改主题配置文件就可以</li>
<li>格式极其重要，修改配置问件事要注意中间要有一个空格才能有效<img src="https://i.loli.net/2021/04/07/NYXb42JR18uTphm.png" alt="image-20210407214015182">注意注释前也要有空格</li>
<li>最后放两张我的文件夹，以便大家区分两个配置文件，看不懂的话可以看文件夹上方的路径，路径也看不懂那就没办法了</li>
<li>主文件夹<img src="https://i.loli.net/2021/04/07/BsuyYMQEZJPoDfF.png" alt="image-20210407214254076"></li>
<li>主题页<img src="https://i.loli.net/2021/04/07/EzaDdKH7URk5B6O.png" alt="image-20210407214413945"></li>
<li>最后一点：不要怕出错，实践出真知，搞这个东西没错一段时间是没有游戏体验的，你懂的，这也是一个学习的过程，所以不要急，慢慢来，涨涨姿势，等到把雏形弄出来再慢慢搞UI也不迟。</li>
</ul>
<p>最后欢迎大家补充，有地方不懂得可以留言，也可以发邮件，看到会回复的，祝大家能尽快拥有自己的网站。</p>
]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>Github</tag>
      </tags>
  </entry>
</search>
